@using MySqlConnector;
@using System.Data.Common;
@using System.Text.Json;

@inject NavigationManager NavigationManager
@inject ILocalStorageService localStorage
@inject IDialogService DialogService
@inject ISnackbar Snackbar
@inject IJSRuntime JSRuntime
@inject IStringLocalizer<Pages.Dashboard.Dialogs.Event_Details_Dialog> Localizer

<MudDialog>
    <TitleContent>
        <MudText Typo="Typo.h5">@Localizer["title"] (@device_name)</MudText>
    </TitleContent>
    <DialogContent>

        <MudTextField Label="@Localizer["date"]" T="string" @bind-Value="@date" Required="false" RequiredError="@Localizer["required"]" Immediate="@true" ReadOnly="true" />
        <MudTextField Label="@Localizer["tenant"]" T="string" @bind-Value="@tenant_name" Required="false" RequiredError="@Localizer["required"]" Immediate="@true" ReadOnly="true" />
        <MudTextField Label="@Localizer["location"]" T="string" @bind-Value="@location_name" Required="false" RequiredError="@Localizer["required"]" Immediate="@true" ReadOnly="true" />
        <MudTextField Label="@Localizer["device"]" T="string" @bind-Value="@device_name" Required="false" RequiredError="@Localizer["required"]" Immediate="@true" ReadOnly="true" />
        <MudTextField Label="@Localizer["severity"]" T="string" @bind-Value="@severity" Required="false" RequiredError="@Localizer["required"]" Immediate="@true" ReadOnly="true" />
        <MudTextField Label="@Localizer["reported_by"]" T="string" @bind-Value="@reported_by" Required="false" RequiredError="@Localizer["required"]" Immediate="@true" ReadOnly="true" />
        <MudTextField Label="@Localizer["event"]" T="string" @bind-Value="@_event" Required="false" RequiredError="@Localizer["required"]" Immediate="@true" ReadOnly="true" />
        <MudTextField Label="@Localizer["description"]" T="string" Lines="20" @bind-Value="@description" Required="false" RequiredError="@Localizer["required"]" Immediate="@true" ReadOnly="true" />
       
    </DialogContent>
    <DialogActions>
        
        <!--<MudButton OnClick="@this.OK" Variant="Variant.Filled" Size="@Size.Small" Color="@Color.Success">Als gelesen markieren</MudButton>-->
    </DialogActions>
</MudDialog>

@code {

    [CascadingParameter] MudDialogInstance MudDialog { get; set; }

    [Parameter] public string date { get; set; }
    [Parameter] public string event_id { get; set; }
    [Parameter] public string device_name { get; set; }
    [Parameter] public string tenant_name { get; set; }
    [Parameter] public string location_name { get; set; }
    [Parameter] public string severity { get; set; }
    [Parameter] public string reported_by { get; set; }
    [Parameter] public string _event { get; set; }
    [Parameter] public string description { get; set; }

    protected override async Task OnInitializedAsync()
    {
        // Convert severity
        if (severity == "0")
            severity = Localizer["low"];
        else if (severity == "1")
            severity = Localizer["moderate"];
        else if (severity == "2")
            severity = Localizer["high"];
        else if (severity == "3")
            severity = Localizer["critical"];
    }

    private async Task OK()
    {
        this.Snackbar.Configuration.ShowCloseIcon = true;
        this.Snackbar.Configuration.PositionClass = Defaults.Classes.Position.BottomRight;

        bool success = false;

        MySqlConnection conn = new MySqlConnection(await Classes.MySQL.Config.Get_Connection_String());

        try
        {  
            /*
            string scripts_json_string = JsonSerializer.Serialize(script_json, new JsonSerializerOptions { WriteIndented = true });

            //Save to MySQL
            await conn.OpenAsync();

            string execute_query = "INSERT INTO `scripts` (`name`, `date`, `author`, `description`, `platform`, `shell`, `script`, `json`) VALUES (@name, @date, @author, @description, @platform, @shell, @script, @json);";

            MySqlCommand cmd = new MySqlCommand(execute_query, conn);

            cmd.Parameters.AddWithValue("@name", script_name);
            cmd.Parameters.AddWithValue("@date", DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss"));
            cmd.Parameters.AddWithValue("@author", await localStorage.GetItemAsync<string>("username"));
            cmd.Parameters.AddWithValue("@description", description);
            cmd.Parameters.AddWithValue("@platform", platform);
            cmd.Parameters.AddWithValue("@shell", shell);
            cmd.Parameters.AddWithValue("@script", script);
            cmd.Parameters.AddWithValue("@json", scripts_json_string);

            cmd.ExecuteNonQuery();

            success = true;
            */
        }
        catch (Exception ex)
        {
            Logging.Handler.Error("/manage_scripts (Add_Script_Dialog) -> OK", "Result", ex.Message);
        }
        finally
        {
            await conn.CloseAsync();
        }

        if (success)
        {
            this.MudDialog.Close(DialogResult.Ok("success"));
        }
        else
        {
            this.Snackbar.Add(Localizer["error_occurred"], Severity.Error);
            this.MudDialog.Close(DialogResult.Ok("error"));
        }
    }

    private void Cancel() => MudDialog.Cancel();
}