@using MySqlConnector;
@using System.Data.Common;
@using System.Text.Json;

@inject NavigationManager NavigationManager
@inject ILocalStorageService localStorage
@inject IDialogService DialogService
@inject ISnackbar Snackbar
@inject IStringLocalizer<Pages.Policy_Management.Antivirus.Scan_Jobs.Add_Scan_Job_Directory_Dialog> Localizer

<MudDialog Style="width: 550px;">
    <TitleContent>
        <MudText Typo="Typo.h5">@Localizer["title"]</MudText>
    </TitleContent>
    <DialogContent>

        <MudTextField Label="@Localizer["directory"]" T="string" @bind-Value="directory" Required="true" RequiredError="@Localizer["required"]" Immediate="@true" />
        <MudTextField Label="@Localizer["description"]" T="string" @bind-Value="description" Required="true" RequiredError="@Localizer["required"]" Immediate="@true" />

    </DialogContent>
    <DialogActions>
        <MudButton OnClick="Cancel">@Localizer["cancel"]</MudButton>

        <MudButton Disabled="@Form_Valid()" OnClick="@this.OK" Variant="Variant.Filled" Size="@Size.Small" Color="@Color.Success">@Localizer["confirm"]</MudButton>
    </DialogActions>
</MudDialog>

@code {

    protected override async Task OnInitializedAsync()
    {
        policy_name = await localStorage.GetItemAsync<string>("policy_name");
        directories_json = await localStorage.GetItemAsync<string>("temp_antivirus_scan_job_directories_json");
        Logging.Handler.Debug("/Policy_Settings (Add_Scan_Job_Directory_Dialog) -> OnInitializedAsync", "directories_json", directories_json);
    }

    private string policy_name = String.Empty;
    private string directories_json = String.Empty;
    string updatedJson = String.Empty;

    private string directory = String.Empty;
    private string description = String.Empty;

    public class Directories
    {
        public string date { get; set; }
        public string directory { get; set; }
        public string description { get; set; }
    }

    [CascadingParameter]
    private MudDialogInstance MudDialog { get; set; } = default!;

    private bool Form_Valid()
    {
        if (String.IsNullOrEmpty(directory) || String.IsNullOrEmpty(description))
            return true;
        else
            return false;
    }

    private async Task OK()
    {
        this.Snackbar.Configuration.ShowCloseIcon = true;
        this.Snackbar.Configuration.PositionClass = Defaults.Classes.Position.BottomRight;

        bool success = false;

        try
        {
            List<Directories> directories = JsonSerializer.Deserialize<List<Directories>>(directories_json);

            // Neue Ausnahme hinzufügen
            directories.Add(new Directories
                {
                    date = DateTime.Now.ToString("dd.MM.yyyy HH:mm:ss"),
                    directory = directory,
                    description = description,
                });

            // Konvertieren der Liste in JSON
            updatedJson = JsonSerializer.Serialize(directories, new JsonSerializerOptions { WriteIndented = true });

            Logging.Handler.Debug("/Policy_Settings (Add_Scan_Job_Directory_Dialog) -> OK", "Update existing JSON (updatedJson)", updatedJson);

            success = true;
        }
        catch (Exception ex)
        {
            Logging.Handler.Error("/Policy_Settings (Add_Scan_Job_Directory_Dialog) -> OK", "Update existing JSON", ex.Message);
        }

        if (success)
        {
            this.MudDialog.Close(DialogResult.Ok(updatedJson));
        }
        else
        {
            this.Snackbar.Add(Localizer["error_occurred"], Severity.Error);
            this.MudDialog.Close(DialogResult.Ok("error"));
        }
    }

    private void Cancel() => MudDialog.Cancel();
}