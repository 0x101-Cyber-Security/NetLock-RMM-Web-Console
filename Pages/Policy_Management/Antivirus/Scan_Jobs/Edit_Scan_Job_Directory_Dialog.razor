@using MySqlConnector;
@using System.Data.Common;
@using System.Text.Json;

@inject NavigationManager NavigationManager
@inject ILocalStorageService localStorage
@inject IDialogService DialogService
@inject ISnackbar Snackbar

<MudDialog Style="width: 550px;">
    <TitleContent>
        <MudText Typo="Typo.h5">Verzeichnis bearbeiten</MudText>
    </TitleContent>
    <DialogContent>

        <MudTextField Label="Verzeichnis" T="string" @bind-Value="directory" Required="true" RequiredError="Erforderlich" Immediate="@true" />
        <MudTextField Label="Beschreibung" T="string" @bind-Value="description" Required="true" RequiredError="Erforderlich" Immediate="@true" />

    </DialogContent>
    <DialogActions>
        <MudButton OnClick="Cancel">Abbrechen</MudButton>

        <MudButton Disabled="@Form_Valid()" OnClick="@this.OK" Variant="Variant.Filled" Size="@Size.Small" Color="@Color.Success">Bestätigen</MudButton>
    </DialogActions>
</MudDialog>

@code {

    protected override async Task OnInitializedAsync()
    {
        policy_name = await localStorage.GetItemAsync<string>("policy_name");
        directory = await localStorage.GetItemAsync<string>("temp_antivirus_scan_job_directory");
        directory_old = await localStorage.GetItemAsync<string>("temp_antivirus_scan_job_directory");
        directories_json = await localStorage.GetItemAsync<string>("temp_antivirus_scan_job_directories_json");
        Logging.Handler.Debug("/Policy_Settings (Add_Exclusion_Dialog) -> Get_Directories (DB)", "directory", directory);
        Logging.Handler.Debug("/Policy_Settings (Add_Exclusion_Dialog) -> Get_Directories (DB)", "directories_json", directories_json);

        await Get_Directory();
    }

    private string policy_name = String.Empty;
    private string directories_json = String.Empty;
    string updated_json = String.Empty;

    private string directory = String.Empty;
    private string directory_old = String.Empty;
    private string description = String.Empty;

    public class Directories
    {
        public string date { get; set; }
        public string directory { get; set; }
        public string description { get; set; }
    }

    [CascadingParameter]
    private MudDialogInstance MudDialog { get; set; } = default!;

    private bool Form_Valid()
    {
        if (String.IsNullOrEmpty(directory) || String.IsNullOrEmpty(description))
            return true;
        else
            return false;
    }

    private async Task Get_Directory()
    {
        try
        {
            List<Directories> directories = JsonSerializer.Deserialize<List<Directories>>(directories_json);

            foreach (var _object in directories)
            {
                if (_object.directory == directory)
                {
                    description = _object.description;
                }
            }
        }
        catch (Exception ex)
        {
            Logging.Handler.Error("/Policy_Settings (Edit_Scan_Job_Directory_Dialog) -> Get_Directory", "JSON", ex.Message);
        }
    }

    private async Task OK()
    {
        this.Snackbar.Configuration.ShowCloseIcon = true;
        this.Snackbar.Configuration.PositionClass = Defaults.Classes.Position.BottomRight;

        bool success = false;

        try
        {
            List<Directories> directories = JsonSerializer.Deserialize<List<Directories>>(directories_json);

            foreach (var _object in directories)
            {
                if (_object.directory == directory_old)
                {
                    _object.directory = directory;
                    _object.description = description;
                }
            }

            // Konvertieren der Liste in JSON
            updated_json = JsonSerializer.Serialize(directories, new JsonSerializerOptions { WriteIndented = true });

            Logging.Handler.Debug("/Policy_Settings (Edit_Scan_Job_Directory_Dialog) -> OK", "Update existing JSON (updated_json)", updated_json);

            success = true;
        }
        catch (Exception ex)
        {
            Logging.Handler.Error("/Policy_Settings (Edit_Scan_Job_Directory_Dialog) -> OK", "Update existing JSON", ex.Message);
        }

        if (success)
        {
            this.MudDialog.Close(DialogResult.Ok(updated_json));
        }
        else
        {
            this.Snackbar.Add("Es ist ein Fehler aufgetreten.", Severity.Error);
            this.MudDialog.Close(DialogResult.Ok("error"));
        }
    }

    private void Cancel() => MudDialog.Cancel();
}