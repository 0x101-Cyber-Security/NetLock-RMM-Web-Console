@page "/policy_settings"
@using MySqlConnector;
@using System.Data.Common;
@using System.Text.Json.Nodes;
@using System.Text.Json;
@using System.Globalization;
@using Microsoft.AspNetCore.Components.Server.ProtectedBrowserStorage;
@using Microsoft.AspNetCore.DataProtection;

@inject NavigationManager NavigationManager
@inject ILocalStorageService localStorage
@inject IDialogService DialogService
@inject ISnackbar Snackbar
@inject IJSRuntime JSRuntime
@inject IDataProtectionProvider DataProtectionProvider

<AuthorizeView>
    <NotAuthorized>
        @{
            NavigationManager.NavigateTo("/");
        }
    </NotAuthorized>

    <Authorized>
        
        @if (permissions_policies_enabled)
        {
            <MudText Class="mt-5" Typo="Typo.h5">@policy_name</MudText>

            <MudButton Class="mt-5 mr-2" Size="Size.Small" Variant="Variant.Filled" Color="Color.Default" StartIcon="@Icons.Material.Filled.ArrowBack" Href="/manage_policies">Zurück</MudButton>

            @if (permissions_policies_edit)
            {
                <MudButton Class="mt-5 mr-2" Size="Size.Small" Variant="Variant.Filled" OnClick="@Save_Policy" Color="Color.Success" StartIcon="@Icons.Material.Filled.Save">Speichern</MudButton>                
            }

            @if (permissions_policies_delete)
            {
                <MudButton Class="mt-5" Size="Size.Small" Variant="Variant.Filled" OnClick="@Show_Delete_Policy_Dialog" Color="Color.Error" StartIcon="@Icons.Material.Filled.Delete">Löschen</MudButton>
            }
            
            <MudTabs Class="mt-5" KeepPanelsAlive=true Elevation="4" Rounded="false" Color="@Color.Default">
                <MudTabPanel Text="Antivirus">

                    <MudTabs Class="mt-0" KeepPanelsAlive=true Elevation="4" Rounded="false" Color="@Color.Default">
                        <MudTabPanel Text="Konfiguration">

                            <MudPaper>
                                <MudSwitch Class="ml-2" T="bool" @bind-Value="@antivirus_enabled" Label="Aktiviert" Color="Color.Primary" />

                                <MudText Class="ml-2 mt-2" Typo="Typo.h6">Allgemeine Einstellungen</MudText>
                                <MudText Class="ml-3" Typo="Typo.body1">Benutzerinteraktion</MudText>
                                <MudCheckBox Class="ml-2" T="bool" @bind-Value="@antivirus_security_center" Label="Viren- & Bedrohungsschutz im Sicherheitscenter anzeigen" Color="Color.Primary" Disabled="@(!antivirus_enabled)" />
                                <MudCheckBox Class="ml-2" T="bool" @bind-Value="@antivirus_security_center_tray" Label="Sicherheitscenter Symbol im System Tray anzeigen" Color="Color.Primary" Disabled="@(!antivirus_enabled)" />

                                <MudText Class="ml-3 mt-3" Typo="Typo.body1">Updates</MudText>
                                <MudCheckBox Class="ml-2" T="bool" @bind-Value="@antivirus_check_hourly_signatures" Label="Stündlich nach neuen Signatur Updates suchen" Color="Color.Primary" Disabled="@(!antivirus_enabled)" />
                                <MudCheckBox Class="ml-2" T="bool" @bind-Value="@antivirus_allow_metered_updates" Label="Updates über getaktete Verbindungen zulassen" Color="Color.Primary" Disabled="@(!antivirus_enabled)" />

                                <MudText Class="ml-3 mt-3" Typo="Typo.body1">Sonstiges</MudText>
                                <MudCheckBox Class="ml-2" T="bool" @bind-Value="@antivirus_delete_quarantine_six_months" Label="Quarantäne nach sechs Monaten löschen" Color="Color.Primary" Disabled="@(!antivirus_enabled)" />

                            </MudPaper>

                            <MudPaper Class="mt-5">

                                <MudText Class="ml-2 mt-3" Typo="Typo.h6">Scanner Einstellungen</MudText>
                                <MudSelect Class="ml-2 mr-2" T="string" @bind-Value="this.antivirus_scan_direction_display" onclick="Antivirus_Scan_Direction" Label="Richtung" AnchorOrigin="Origin.BottomCenter" style="max-width: 350px;" Disabled="@(!antivirus_enabled)">
                                    <MudSelectItem Value="@("Eingehend & Ausgehend")" />
                                    <MudSelectItem Value="@("Eingehend")" />
                                    <MudSelectItem Value="@("Ausgehend")" />
                                </MudSelect>

                                <MudText Class="ml-3 mt-3" Typo="Typo.body1">Dateisystem</MudText>
                                <MudCheckBox Class="ml-2" T="bool" @bind-Value="@antivirus_file_hash_computing" Label="Datei Hashwert Prüfung" Color="Color.Primary" Disabled="@(!antivirus_enabled)" />
                                <MudCheckBox Class="ml-2" T="bool" @bind-Value="@antivirus_block_at_first_seen" Label="Beim ersten Sichten blockieren" Color="Color.Primary" Disabled="@(!antivirus_enabled)" />
                                <MudCheckBox Class="ml-2" T="bool" @bind-Value="@antivirus_scan_archives" Label="Archive scannen" Color="Color.Primary" Disabled="@(!antivirus_enabled)" />
                                <MudCheckBox Class="ml-2" T="bool" @bind-Value="@antivirus_scan_mails" Label="E-Mails scannen" Color="Color.Primary" Disabled="@(!antivirus_enabled)" />

                                <MudText Class="ml-3 mt-3" Typo="Typo.body1">Netzwerk</MudText>
                                <MudCheckBox Class="ml-2" T="bool" @bind-Value="@antivirus_net_scan_network_files" Label="Netzwerkdateien scannen" Color="Color.Primary" Disabled="@(!antivirus_enabled)" />
                                <MudCheckBox Class="ml-2" T="bool" @bind-Value="@antivirus_net_filter_incoming_connections" Label="Eingehende Verbindungen überprüfen" Color="Color.Primary" Disabled="@(!antivirus_enabled)" />
                                <MudCheckBox Class="ml-2" T="bool" @bind-Value="@antivirus_net_datagram_processing" Label="Datagramm-Verarbeitung" Color="Color.Primary" Disabled="@(!antivirus_enabled)" />

                                <MudText Class="ml-3 mt-3" Typo="Typo.body1">Parser</MudText>
                                <MudCheckBox Class="ml-2" T="bool" @bind-Value="@antivirus_parser_tls" Label="TLS" Color="Color.Primary" Disabled="@(!antivirus_enabled)" />
                                <MudCheckBox Class="ml-2" T="bool" @bind-Value="@antivirus_parser_rdp" Label="RDP" Color="Color.Primary" Disabled="@(!antivirus_enabled)" />
                                <MudCheckBox Class="ml-2" T="bool" @bind-Value="@antivirus_parser_ssh" Label="SSH" Color="Color.Primary" Disabled="@(!antivirus_enabled)" />
                                <MudCheckBox Class="ml-2" T="bool" @bind-Value="@antivirus_parser_http" Label="HTTP" Color="Color.Primary" Disabled="@(!antivirus_enabled)" />
                                <MudCheckBox Class="ml-2" T="bool" @bind-Value="@antivirus_parser_dns" Label="DNS" Color="Color.Primary" Disabled="@(!antivirus_enabled)" />
                                <MudCheckBox Class="ml-2" T="bool" @bind-Value="@antivirus_parser_dnsovertcp" Label="DNS über TCP" Color="Color.Primary" Disabled="@(!antivirus_enabled)" />

                            </MudPaper>

                            <MudPaper Class="mt-5">

                                <MudText Class="ml-2 mt-3" Typo="Typo.h6">Ausnahmen</MudText>

                                <MudButton Class="ml-2 mt-2" Size="Size.Small" Variant="Variant.Filled" OnClick="@Antivirus_Exclusion_Add_Dialog" Color="Color.Default" StartIcon="@Icons.Material.Filled.Add" Disabled="@(!antivirus_enabled)">Hinzufügen</MudButton>

                                <MudTooltip Text="Daten exportieren">
                                    <MudIconButton Class="ml-2 mt-2" Icon="@Icons.Material.Filled.FileDownload" Variant="Variant.Filled" Size="Size.Small" Color="Color.Default" @onclick="Antivirus_Exclusions_Export_Table_Dialog" Disabled="@(!antivirus_enabled)"></MudIconButton>
                                </MudTooltip>

                                <MudTable Class="mt-0" Height="20vh" FixedHeader="true" FixedFooter="true" Hover="true" RowsPerPage="25" Dense="true" Items="@antivirus_exclusions_mysql_data" Filter="new Func<Antivirus_Exclusions_Entity, bool>(Antivirus_Exclusions_Table_Filter_Func)">
                                    <ToolBarContent>
                                        <MudTextField @bind-Value="antivirus_exclusions_table_search_string" Placeholder="Suche" Adornment="Adornment.Start" AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Medium" Class="mt-0"></MudTextField>
                                    </ToolBarContent>
                                    <HeaderContent>
                                        <MudTh Sortable="true" @onclick="() => antivirus_exclusions_table_sorted_column = (nameof(Antivirus_Exclusions_Entity.exclusion))" style="white-space: nowrap;">Ausnahme</MudTh>
                                        <MudTh Sortable="true" @onclick="() => antivirus_exclusions_table_sorted_column = (nameof(Antivirus_Exclusions_Entity.type))" style="white-space: nowrap;">Typ</MudTh>
                                        <MudTh Sortable="true" @onclick="() => antivirus_exclusions_table_sorted_column = (nameof(Antivirus_Exclusions_Entity.description))" style="white-space: nowrap;">Beschreibung</MudTh>
                                        <MudTh Sortable="true" @onclick="() => antivirus_exclusions_table_sorted_column = (nameof(Antivirus_Exclusions_Entity.date))" style="white-space: nowrap;">Datum</MudTh>
                                        <MudTh></MudTh>

                                    </HeaderContent>
                                    <RowTemplate Context="antivirus_exclusions_row">

                                        <MudTd DataLabel="ID" @onclick="() => Antivirus_Exclusions_RowClickHandler(antivirus_exclusions_row)" class="@Antivirus_Exclusions_GetRowClass(antivirus_exclusions_row)" style="display: none;">
                                            <span style="display: flex; align-items: center;">
                                                &nbsp;@antivirus_exclusions_row.id
                                            </span>
                                        </MudTd>

                                        <MudTd DataLabel="Ausnahme" @onclick="() => Antivirus_Exclusions_RowClickHandler(antivirus_exclusions_row)" class="@Antivirus_Exclusions_GetRowClass(antivirus_exclusions_row)" style="white-space: nowrap;">
                                            <span style="display: flex; align-items: center;">
                                                &nbsp;@antivirus_exclusions_row.exclusion
                                            </span>
                                        </MudTd>

                                        <MudTd DataLabel="Typ" @onclick="() => Antivirus_Exclusions_RowClickHandler(antivirus_exclusions_row)" class="@Antivirus_Exclusions_GetRowClass(antivirus_exclusions_row)" style="white-space: nowrap;">
                                            <span style="display: flex; align-items: center;">
                                                &nbsp;@antivirus_exclusions_row.type
                                            </span>
                                        </MudTd>

                                        <MudTd DataLabel="Beschreibung" @onclick="() => Antivirus_Exclusions_RowClickHandler(antivirus_exclusions_row)" class="@Antivirus_Exclusions_GetRowClass(antivirus_exclusions_row)" style="white-space: nowrap;">
                                            <span style="display: flex; align-items: center;">
                                                &nbsp;@antivirus_exclusions_row.description
                                            </span>
                                        </MudTd>

                                        <MudTd DataLabel="Datum" @onclick="() => Antivirus_Exclusions_RowClickHandler(antivirus_exclusions_row)" class="@Antivirus_Exclusions_GetRowClass(antivirus_exclusions_row)" style="white-space: nowrap;">
                                            <span style="display: flex; align-items: center;">
                                                &nbsp;@antivirus_exclusions_row.date
                                            </span>
                                        </MudTd>

                                        <MudTd DataLabel="" @onclick="() => Antivirus_Exclusions_RowClickHandler(antivirus_exclusions_row)" class="@Antivirus_Exclusions_GetRowClass(antivirus_exclusions_row)" style="white-space: nowrap;">
                                            <span style="display: flex; align-items: center;">
                                                <MudButton Size="Size.Small" Variant="@Variant.Filled" Color="@Color.Default" StartIcon="@Icons.Material.Filled.Edit" OnClick="@(() => Antivirus_Exclusion_Edit_Exclusion_Dialog(antivirus_exclusions_row.id))" Disabled="@(!antivirus_enabled)">Bearbeiten</MudButton>
                                                <MudButton Class="ml-2" Size="Size.Small" Variant="@Variant.Filled" Color="@Color.Error" StartIcon="@Icons.Material.Filled.Recycling" OnClick="@(() => Antivirus_Exclusion_Delete_Dialog(antivirus_exclusions_row.id))" Disabled="@(!antivirus_enabled)">Löschen</MudButton>
                                            </span>
                                        </MudTd>

                                    </RowTemplate>
                                    <PagerContent>
                                        <MudTablePager PageSizeOptions="new int[] { 10, 25, 50, 100, 250, 500, int.MaxValue }" RowsPerPageString="Einträge pro Seite" />
                                    </PagerContent>
                                </MudTable>

                            </MudPaper>

                            <MudPaper Class="mt-5">
                                <MudText Class="ml-2 mt-3" Typo="Typo.h6">Scanaufträge</MudText>

                                <MudButton Class="ml-2 mt-2" Size="Size.Small" Variant="Variant.Filled" OnClick="@Antivirus_Scan_Job_Add_Dialog" Color="Color.Default" StartIcon="@Icons.Material.Filled.Add" Disabled="@(!antivirus_enabled)">Hinzufügen</MudButton>

                                <MudTooltip Text="Daten exportieren">
                                    <MudIconButton Class="ml-2 mt-2" Icon="@Icons.Material.Filled.FileDownload" Variant="Variant.Filled" Size="Size.Small" Color="Color.Default" @onclick="Antivirus_Scan_Jobs_Export_Table_Dialog" Disabled="@(!antivirus_enabled)"></MudIconButton>
                                </MudTooltip>

                                <MudTable Class="mt-0" Height="20vh" FixedHeader="true" FixedFooter="true" Hover="true" RowsPerPage="25" Dense="true" Items="@antivirus_scan_jobs_mysql_data" Filter="new Func<Antivirus_Scan_Jobs_Entity, bool>(Antivirus_Scan_Jobs_Table_Filter_Func)">
                                    <ToolBarContent>
                                        <MudTextField @bind-Value="antivirus_scan_jobs_table_search_string" Placeholder="Suche" Adornment="Adornment.Start" AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Medium" Class="mt-0"></MudTextField>
                                    </ToolBarContent>
                                    <HeaderContent>
                                        <MudTh Sortable="true" @onclick="() => antivirus_scan_jobs_table_sorted_column = (nameof(Antivirus_Scan_Jobs_Entity.name))" style="white-space: nowrap;">Name</MudTh>
                                        <MudTh Sortable="true" @onclick="() => antivirus_scan_jobs_table_sorted_column = (nameof(Antivirus_Scan_Jobs_Entity.date))" style="white-space: nowrap;">Datum</MudTh>
                                        <MudTh Sortable="true" @onclick="() => antivirus_scan_jobs_table_sorted_column = (nameof(Antivirus_Scan_Jobs_Entity.description))" style="white-space: nowrap;">Beschreibung</MudTh>
                                        <MudTh Sortable="true" @onclick="() => antivirus_scan_jobs_table_sorted_column = (nameof(Antivirus_Scan_Jobs_Entity.time_scheduler_type))" style="white-space: nowrap;">Zeitplaner</MudTh>
                                        <MudTh Sortable="true" @onclick="() => antivirus_scan_jobs_table_sorted_column = (nameof(Antivirus_Scan_Jobs_Entity.time_scheduler_time))" style="white-space: nowrap;">Uhrzeit</MudTh>
                                        <MudTh Sortable="true" @onclick="() => antivirus_scan_jobs_table_sorted_column = (nameof(Antivirus_Scan_Jobs_Entity.time_scheduler_monday))" style="white-space: nowrap;">Montag</MudTh>
                                        <MudTh Sortable="true" @onclick="() => antivirus_scan_jobs_table_sorted_column = (nameof(Antivirus_Scan_Jobs_Entity.time_scheduler_tuesday))" style="white-space: nowrap;">Dienstag</MudTh>
                                        <MudTh Sortable="true" @onclick="() => antivirus_scan_jobs_table_sorted_column = (nameof(Antivirus_Scan_Jobs_Entity.time_scheduler_wednesday))" style="white-space: nowrap;">Mittwoch</MudTh>
                                        <MudTh Sortable="true" @onclick="() => antivirus_scan_jobs_table_sorted_column = (nameof(Antivirus_Scan_Jobs_Entity.time_scheduler_thursday))" style="white-space: nowrap;">Donnerstag</MudTh>
                                        <MudTh Sortable="true" @onclick="() => antivirus_scan_jobs_table_sorted_column = (nameof(Antivirus_Scan_Jobs_Entity.time_scheduler_friday))" style="white-space: nowrap;">Freitag</MudTh>
                                        <MudTh Sortable="true" @onclick="() => antivirus_scan_jobs_table_sorted_column = (nameof(Antivirus_Scan_Jobs_Entity.time_scheduler_saturday))" style="white-space: nowrap;">Samstag</MudTh>
                                        <MudTh Sortable="true" @onclick="() => antivirus_scan_jobs_table_sorted_column = (nameof(Antivirus_Scan_Jobs_Entity.time_scheduler_sunday))" style="white-space: nowrap;">Sonntag</MudTh>
                                        <MudTh Sortable="true" @onclick="() => antivirus_scan_jobs_table_sorted_column = (nameof(Antivirus_Scan_Jobs_Entity.scan_type))" style="white-space: nowrap;">Scan Modus</MudTh>
                                        <MudTh Sortable="true" @onclick="() => antivirus_scan_jobs_table_sorted_column = (nameof(Antivirus_Scan_Jobs_Entity.scan_settings_cpu_usage))" style="white-space: nowrap;">Durchschnittlicher CPU-Lastfaktor (%)</MudTh>
                                        <MudTh Sortable="true" @onclick="() => antivirus_scan_jobs_table_sorted_column = (nameof(Antivirus_Scan_Jobs_Entity.scan_settings_scan_on_battery))" style="white-space: nowrap;">Scannen im Akkubetrieb</MudTh>
                                        <MudTh Sortable="true" @onclick="() => antivirus_scan_jobs_table_sorted_column = (nameof(Antivirus_Scan_Jobs_Entity.scan_settings_network_drives))" style="white-space: nowrap;">Eingebundene Netzlaufwerke scannen (Vollständiger Scan)</MudTh>
                                        <MudTh Sortable="true" @onclick="() => antivirus_scan_jobs_table_sorted_column = (nameof(Antivirus_Scan_Jobs_Entity.scan_settings_removable_disks))" style="white-space: nowrap;">Wechseldatenträger scannen (Vollständiger Scan)</MudTh>
                                        <MudTh Sortable="true" @onclick="() => antivirus_scan_jobs_table_sorted_column = (nameof(Antivirus_Scan_Jobs_Entity.scan_settings_update_signatures))" style="white-space: nowrap;">Vor Scan Start nach Signaturaktualisierungen suchen</MudTh>
                                        <MudTh></MudTh>
                                        <MudTh></MudTh>

                                    </HeaderContent>
                                    <RowTemplate Context="antivirus_scan_jobs_row">

                                        <MudTd DataLabel="Name" @onclick="() => Antivirus_Scan_Jobs_RowClickHandler(antivirus_scan_jobs_row)" class="@Antivirus_Scan_Jobs_GetRowClass(antivirus_scan_jobs_row)" style="white-space: nowrap;">
                                            <span style="display: flex; align-items: center;">
                                                &nbsp;@antivirus_scan_jobs_row.name
                                            </span>
                                        </MudTd>

                                        <MudTd DataLabel="Datum" @onclick="() => Antivirus_Scan_Jobs_RowClickHandler(antivirus_scan_jobs_row)" class="@Antivirus_Scan_Jobs_GetRowClass(antivirus_scan_jobs_row)" style="white-space: nowrap;">
                                            <span style="display: flex; align-items: center;">
                                                &nbsp;@antivirus_scan_jobs_row.date
                                            </span>
                                        </MudTd>

                                        <MudTd DataLabel="Beschreibung" @onclick="() => Antivirus_Scan_Jobs_RowClickHandler(antivirus_scan_jobs_row)" class="@Antivirus_Scan_Jobs_GetRowClass(antivirus_scan_jobs_row)" style="white-space: nowrap;">
                                            <span style="display: flex; align-items: center;">
                                                &nbsp;@antivirus_scan_jobs_row.description
                                            </span>
                                        </MudTd>

                                        <MudTd DataLabel="Zeitplaner" @onclick="() => Antivirus_Scan_Jobs_RowClickHandler(antivirus_scan_jobs_row)" class="@Antivirus_Scan_Jobs_GetRowClass(antivirus_scan_jobs_row)" style="white-space: nowrap;">
                                            <span style="display: flex; align-items: center;">
                                                &nbsp;@antivirus_scan_jobs_row.time_scheduler_type
                                            </span>
                                        </MudTd>

                                        <MudTd DataLabel="Uhrzeit" @onclick="() => Antivirus_Scan_Jobs_RowClickHandler(antivirus_scan_jobs_row)" class="@Antivirus_Scan_Jobs_GetRowClass(antivirus_scan_jobs_row)" style="white-space: nowrap;">
                                            <span style="display: flex; align-items: center;">
                                                &nbsp;@antivirus_scan_jobs_row.time_scheduler_time Uhr
                                            </span>
                                        </MudTd>

                                        <MudTd DataLabel="Montag" @onclick="() => Antivirus_Scan_Jobs_RowClickHandler(antivirus_scan_jobs_row)" class="@Antivirus_Scan_Jobs_GetRowClass(antivirus_scan_jobs_row)" style="white-space: nowrap;">
                                            <span style="display: flex; align-items: center;">
                                                &nbsp;@antivirus_scan_jobs_row.time_scheduler_monday
                                            </span>
                                        </MudTd>

                                        <MudTd DataLabel="Dienstag" @onclick="() => Antivirus_Scan_Jobs_RowClickHandler(antivirus_scan_jobs_row)" class="@Antivirus_Scan_Jobs_GetRowClass(antivirus_scan_jobs_row)" style="white-space: nowrap;">
                                            <span style="display: flex; align-items: center;">
                                                &nbsp;@antivirus_scan_jobs_row.time_scheduler_tuesday
                                            </span>
                                        </MudTd>

                                        <MudTd DataLabel="Mittwoch" @onclick="() => Antivirus_Scan_Jobs_RowClickHandler(antivirus_scan_jobs_row)" class="@Antivirus_Scan_Jobs_GetRowClass(antivirus_scan_jobs_row)" style="white-space: nowrap;">
                                            <span style="display: flex; align-items: center;">
                                                &nbsp;@antivirus_scan_jobs_row.time_scheduler_wednesday
                                            </span>
                                        </MudTd>

                                        <MudTd DataLabel="Donnerstag" @onclick="() => Antivirus_Scan_Jobs_RowClickHandler(antivirus_scan_jobs_row)" class="@Antivirus_Scan_Jobs_GetRowClass(antivirus_scan_jobs_row)" style="white-space: nowrap;">
                                            <span style="display: flex; align-items: center;">
                                                &nbsp;@antivirus_scan_jobs_row.time_scheduler_thursday
                                            </span>
                                        </MudTd>

                                        <MudTd DataLabel="Freitag" @onclick="() => Antivirus_Scan_Jobs_RowClickHandler(antivirus_scan_jobs_row)" class="@Antivirus_Scan_Jobs_GetRowClass(antivirus_scan_jobs_row)" style="white-space: nowrap;">
                                            <span style="display: flex; align-items: center;">
                                                &nbsp;@antivirus_scan_jobs_row.time_scheduler_friday
                                            </span>
                                        </MudTd>

                                        <MudTd DataLabel="Samstag" @onclick="() => Antivirus_Scan_Jobs_RowClickHandler(antivirus_scan_jobs_row)" class="@Antivirus_Scan_Jobs_GetRowClass(antivirus_scan_jobs_row)" style="white-space: nowrap;">
                                            <span style="display: flex; align-items: center;">
                                                &nbsp;@antivirus_scan_jobs_row.time_scheduler_saturday
                                            </span>
                                        </MudTd>

                                        <MudTd DataLabel="Sonntag" @onclick="() => Antivirus_Scan_Jobs_RowClickHandler(antivirus_scan_jobs_row)" class="@Antivirus_Scan_Jobs_GetRowClass(antivirus_scan_jobs_row)" style="white-space: nowrap;">
                                            <span style="display: flex; align-items: center;">
                                                &nbsp;@antivirus_scan_jobs_row.time_scheduler_sunday
                                            </span>
                                        </MudTd>

                                        <MudTd DataLabel="Scan Modus" @onclick="() => Antivirus_Scan_Jobs_RowClickHandler(antivirus_scan_jobs_row)" class="@Antivirus_Scan_Jobs_GetRowClass(antivirus_scan_jobs_row)" style="white-space: nowrap;">
                                            <span style="display: flex; align-items: center;">
                                                &nbsp;@antivirus_scan_jobs_row.scan_type
                                            </span>
                                        </MudTd>

                                        <MudTd DataLabel="Durchschnittlicher CPU-Lastfaktor (%)" @onclick="() => Antivirus_Scan_Jobs_RowClickHandler(antivirus_scan_jobs_row)" class="@Antivirus_Scan_Jobs_GetRowClass(antivirus_scan_jobs_row)" style="white-space: nowrap;">
                                            <span style="display: flex; align-items: center;">
                                                &nbsp;@antivirus_scan_jobs_row.scan_settings_cpu_usage (%)
                                            </span>
                                        </MudTd>

                                        <MudTd DataLabel="Scannen im Akkubetrieb" @onclick="() => Antivirus_Scan_Jobs_RowClickHandler(antivirus_scan_jobs_row)" class="@Antivirus_Scan_Jobs_GetRowClass(antivirus_scan_jobs_row)" style="white-space: nowrap;">
                                            <span style="display: flex; align-items: center;">
                                                &nbsp;@antivirus_scan_jobs_row.scan_settings_scan_on_battery
                                            </span>
                                        </MudTd>

                                        <MudTd DataLabel="Eingebundene Netzlaufwerke scannen (Vollständiger Scan)" @onclick="() => Antivirus_Scan_Jobs_RowClickHandler(antivirus_scan_jobs_row)" class="@Antivirus_Scan_Jobs_GetRowClass(antivirus_scan_jobs_row)" style="white-space: nowrap;">
                                            <span style="display: flex; align-items: center;">
                                                &nbsp;@antivirus_scan_jobs_row.scan_settings_network_drives
                                            </span>
                                        </MudTd>

                                        <MudTd DataLabel="Wechseldatenträger scannen (Vollständiger Scan)" @onclick="() => Antivirus_Scan_Jobs_RowClickHandler(antivirus_scan_jobs_row)" class="@Antivirus_Scan_Jobs_GetRowClass(antivirus_scan_jobs_row)" style="white-space: nowrap;">
                                            <span style="display: flex; align-items: center;">
                                                &nbsp;@antivirus_scan_jobs_row.scan_settings_removable_disks
                                            </span>
                                        </MudTd>

                                        <MudTd DataLabel="Vor Scan Start nach Signaturaktualisierungen suchen" @onclick="() => Antivirus_Scan_Jobs_RowClickHandler(antivirus_scan_jobs_row)" class="@Antivirus_Scan_Jobs_GetRowClass(antivirus_scan_jobs_row)" style="white-space: nowrap;">
                                            <span style="display: flex; align-items: center;">
                                                &nbsp;@antivirus_scan_jobs_row.scan_settings_update_signatures
                                            </span>
                                        </MudTd>

                                        <MudTd DataLabel="Beschreibung" @onclick="() => Antivirus_Scan_Jobs_RowClickHandler(antivirus_scan_jobs_row)" class="@Antivirus_Scan_Jobs_GetRowClass(antivirus_scan_jobs_row)" style="display: none;">
                                            <span style="display: flex; align-items: center;">
                                                &nbsp;@antivirus_scan_jobs_row.scan_directories_json
                                            </span>
                                        </MudTd>

                                        <MudTd DataLabel="" @onclick="() => Antivirus_Scan_Jobs_RowClickHandler(antivirus_scan_jobs_row)" class="@Antivirus_Scan_Jobs_GetRowClass(antivirus_scan_jobs_row)" style="white-space: nowrap;">
                                            <span style="display: flex; align-items: center;">
                                                <MudButton Size="Size.Small" Variant="@Variant.Filled" Color="@Color.Default" StartIcon="@Icons.Material.Filled.Edit" OnClick="@(() => Antivirus_Scan_Job_Edit_Dialog(antivirus_scan_jobs_row.name))" Disabled="@(!antivirus_enabled)">Bearbeiten</MudButton>
                                                <MudButton Class="ml-2" Size="Size.Small" Variant="@Variant.Filled" Color="@Color.Error" StartIcon="@Icons.Material.Filled.Recycling" OnClick="@(() => Antivirus_Scan_Job_Delete_Dialog(antivirus_scan_jobs_row.name))" Disabled="@(!antivirus_enabled)">Löschen</MudButton>
                                            </span>
                                        </MudTd>

                                    </RowTemplate>
                                    <PagerContent>
                                        <MudTablePager PageSizeOptions="new int[] { 10, 25, 50, 100, 250, 500, int.MaxValue }" RowsPerPageString="Einträge pro Seite" />
                                    </PagerContent>
                                </MudTable>

                            </MudPaper>

                            <MudPaper Class="mt-5">

                                <MudText Class="ml-2 mt-3" Typo="Typo.h6">Überwachter Ordnerzugriff</MudText>

                                <MudSwitch Class="ml-2" T="bool" @bind-Value="@antivirus_controlled_folder_access_enabled" Label="Aktiviert" Color="Color.Primary" Disabled="@(!antivirus_enabled)" />

                                <MudSelect Class="ml-2" T="string" @bind-Value="antivirus_controlled_folder_access_ruleset" Label="Regelsatz" AnchorOrigin="Origin.BottomCenter" Style="max-width: 300px;" Disabled="@(!antivirus_enabled)">
                                    <MudSelectItem Value="@("-")" />
                                    @{
                                        foreach (string ruleset in antivirus_controlled_folder_access_rulesets)
                                        {
                                            <MudSelectItem Value="@ruleset" />
                                        }
                                    }
                                </MudSelect>

                                <MudDatePicker Class="ml-2" PickerVariant="PickerVariant.Dialog" Label="Automatisches Whitelisting bis zum" @ref="antivirus_controlled_folder_access_folders_date_picker" @bind-Date="antivirus_controlled_folder_access_folders_whitelist_until_date" Required="true" Style="max-width: 135px;" Disabled="@(!antivirus_enabled)">
                                    <PickerActions Context="pickerActionsContext">
                                        <MudButton Class="mr-auto align-self-start" OnClick="@(() => antivirus_controlled_folder_access_folders_date_picker.Clear())">Zurücksetzen</MudButton>
                                        <MudButton OnClick="@(() => antivirus_controlled_folder_access_folders_date_picker.Close(false))">Abbrechen</MudButton>
                                        <MudButton OnClick="@(() => antivirus_controlled_folder_access_folders_date_picker.Close(true))" Color="Color.Primary">Bestätigen</MudButton>
                                    </PickerActions>
                                </MudDatePicker>

                                <MudButton Class="ml-2 mt-2" Size="Size.Small" Variant="Variant.Filled" OnClick="@Antivirus_Controlled_Folder_Access_Folders_Add_Dialog" Color="Color.Default" StartIcon="@Icons.Material.Filled.Add" Disabled="@(!antivirus_enabled)">Hinzufügen</MudButton>

                                <MudTooltip Text="Daten exportieren">
                                    <MudIconButton Class="ml-2 mt-2" Icon="@Icons.Material.Filled.FileDownload" Variant="Variant.Filled" Size="Size.Small" Color="Color.Default" @onclick="Antivirus_Controlled_Folder_Access_Folders_Export_Table_Dialog" Disabled="@(!antivirus_enabled)"></MudIconButton>
                                </MudTooltip>

                                <MudTable Class="mt-0" Height="20vh" FixedHeader="true" FixedFooter="true" Hover="true" RowsPerPage="25" Dense="true" Items="@antivirus_controlled_folder_access_folders_mysql_data" Filter="new Func<Antivirus_Controlled_Folder_Access_Folders_Entity, bool>(Antivirus_Controlled_Folder_Access_Folders_Table_Filter_Func)">
                                    <ToolBarContent>
                                        <MudTextField @bind-Value="antivirus_controlled_folder_access_folders_table_search_string" Placeholder="Suche" Adornment="Adornment.Start" AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Medium" Class="mt-0"></MudTextField>
                                    </ToolBarContent>
                                    <HeaderContent>
                                        <MudTh Sortable="true" @onclick="() => antivirus_controlled_folder_access_folders_table_sorted_column = (nameof(Antivirus_Controlled_Folder_Access_Folders_Entity.folder))" style="white-space: nowrap;">Ordner</MudTh>
                                        <MudTh Sortable="true" @onclick="() => antivirus_controlled_folder_access_folders_table_sorted_column = (nameof(Antivirus_Controlled_Folder_Access_Folders_Entity.description))" style="white-space: nowrap;">Beschreibung</MudTh>
                                        <MudTh Sortable="true" @onclick="() => antivirus_controlled_folder_access_folders_table_sorted_column = (nameof(Antivirus_Controlled_Folder_Access_Folders_Entity.date))" style="white-space: nowrap;">Datum</MudTh>
                                        <MudTh></MudTh>

                                    </HeaderContent>
                                    <RowTemplate Context="antivirus_controlled_folder_access_folders_row">

                                        <MudTd DataLabel="Ordner" @onclick="() => Antivirus_Controlled_Folder_Access_Folders_RowClickHandler(antivirus_controlled_folder_access_folders_row)" class="@Antivirus_Controlled_Folder_Access_Folders_GetRowClass(antivirus_controlled_folder_access_folders_row)" style="white-space: nowrap;">
                                            <span style="display: flex; align-items: center;">
                                                &nbsp;@antivirus_controlled_folder_access_folders_row.folder
                                            </span>
                                        </MudTd>

                                        <MudTd DataLabel="Beschreibung" @onclick="() => Antivirus_Controlled_Folder_Access_Folders_RowClickHandler(antivirus_controlled_folder_access_folders_row)" class="@Antivirus_Controlled_Folder_Access_Folders_GetRowClass(antivirus_controlled_folder_access_folders_row)" style="white-space: nowrap;">
                                            <span style="display: flex; align-items: center;">
                                                &nbsp;@antivirus_controlled_folder_access_folders_row.description
                                            </span>
                                        </MudTd>

                                        <MudTd DataLabel="Datum" @onclick="() => Antivirus_Controlled_Folder_Access_Folders_RowClickHandler(antivirus_controlled_folder_access_folders_row)" class="@Antivirus_Controlled_Folder_Access_Folders_GetRowClass(antivirus_controlled_folder_access_folders_row)" style="white-space: nowrap;">
                                            <span style="display: flex; align-items: center;">
                                                &nbsp;@antivirus_controlled_folder_access_folders_row.date
                                            </span>
                                        </MudTd>

                                        <MudTd DataLabel="" @onclick="() => Antivirus_Controlled_Folder_Access_Folders_RowClickHandler(antivirus_controlled_folder_access_folders_row)" class="@Antivirus_Controlled_Folder_Access_Folders_GetRowClass(antivirus_controlled_folder_access_folders_row)" style="white-space: nowrap;">
                                            <span style="display: flex; align-items: center;">
                                                <MudButton Size="Size.Small" Variant="@Variant.Filled" Color="@Color.Default" StartIcon="@Icons.Material.Filled.Edit" OnClick="@(() => Antivirus_Controlled_Folder_Access_Folders_Edit_Dialog(antivirus_controlled_folder_access_folders_row.folder))" Disabled="@(!antivirus_enabled)">Bearbeiten</MudButton>
                                                <MudButton Class="ml-2" Size="Size.Small" Variant="@Variant.Filled" Color="@Color.Error" StartIcon="@Icons.Material.Filled.Recycling" OnClick="@(() => Antivirus_Controlled_Folder_Access_Folders_Delete_Dialog(antivirus_controlled_folder_access_folders_row.folder))" Disabled="@(!antivirus_enabled)">Löschen</MudButton>
                                            </span>
                                        </MudTd>

                                    </RowTemplate>
                                    <PagerContent>
                                        <MudTablePager PageSizeOptions="new int[] { 10, 25, 50, 100, 250, 500, int.MaxValue }" RowsPerPageString="Einträge pro Seite" />
                                    </PagerContent>
                                </MudTable>

                            </MudPaper>

                        </MudTabPanel>

                        <MudTabPanel Text="Benachrichtigungen">

                            <MudPaper Class="mt-0">
                                <!-- Antivirus Kategorie -->
                                <MudText Class="ml-2 mt-0" Typo="Typo.h6">Antivirus</MudText>
                                <MudCheckBox Class="ml-2" T="bool" @bind-Value="@antivirus_notifications_malwareprotection_antivirus_enabled" Label="Der Virenscan ist aktiviert." Color="Color.Primary" Disabled="@(!antivirus_enabled)" />
                                <MudCheckBox Class="ml-2" T="bool" @bind-Value="@antivirus_notifications_malwareprotection_antivirus_disabled" Label="Der Virenscan ist deaktiviert." Color="Color.Primary" Disabled="@(!antivirus_enabled)" />

                                <!-- Antispyware Kategorie -->
                                <MudText Class="ml-2 mt-3" Typo="Typo.h6">Antispyware</MudText>
                                <MudCheckBox Class="ml-2" T="bool" @bind-Value="@antivirus_notifications_malwareprotection_antispyware_disabled" Label="Das Scannen nach Malware und anderer potenziell unerwünschter Software ist deaktiviert." Color="Color.Primary" Disabled="@(!antivirus_enabled)" />
                                <MudCheckBox Class="ml-2" T="bool" @bind-Value="@antivirus_notifications_malwareprotection_antispyware_enabled" Label="Das Scannen nach Malware und anderer potenziell unerwünschter Software ist aktiviert." Color="Color.Primary" Disabled="@(!antivirus_enabled)" />

                                <!-- Verhalten Kategorie -->
                                <MudText Class="ml-2 mt-3" Typo="Typo.h6">Verhalten</MudText>
                                <MudCheckBox Class="ml-2" T="bool" @bind-Value="@antivirus_notifications_malwareprotection_behavior_detected" Label="Verdächtiges Verhalten erkannt." Color="Color.Primary" Disabled="@(!antivirus_enabled)" />

                                <!-- Konfiguration Kategorie -->
                                <MudText Class="ml-2 mt-3" Typo="Typo.h6">Konfiguration</MudText>
                                <MudCheckBox Class="ml-2" T="bool" @bind-Value="@antivirus_notifications_malwareprotection_config_changed" Label="Die Konfiguration der Antimalware-Plattform hat sich geändert. (Hinweis: Kann viele Logs erzeugen.)" Color="Color.Primary" Disabled="@(!antivirus_enabled)" />

                                <!-- Plattform Kategorie -->
                                <MudText Class="ml-2 mt-3" Typo="Typo.h6">Plattform</MudText>
                                <MudCheckBox Class="ml-2" T="bool" @bind-Value="@antivirus_notifications_malwareprotection_disabled_expired_state" Label="Die Antimalware-Plattform ist abgelaufen." Color="Color.Primary" Disabled="@(!antivirus_enabled)" />
                                <MudCheckBox Class="ml-2" T="bool" @bind-Value="@antivirus_notifications_malwareprotection_engine_failure" Label="Die Antimalware-Engine hat einen Fehler festgestellt." Color="Color.Primary" Disabled="@(!antivirus_enabled)" />
                                <MudCheckBox Class="ml-2" T="bool" @bind-Value="@antivirus_notifications_malwareprotection_engine_update_platformoutofdate" Label="Update des AntiVirus-Moduls fehlgeschlagen. Versuché alte Version zu laden." Color="Color.Primary" Disabled="@(!antivirus_enabled)" />
                                <MudCheckBox Class="ml-2" T="bool" @bind-Value="@antivirus_notifications_malwareprotection_expiration_warning_state" Label="Die Antimalware-Plattform läuft bald ab." Color="Color.Primary" Disabled="@(!antivirus_enabled)" />
                                <MudCheckBox Class="ml-2" T="bool" @bind-Value="@antivirus_notifications_malwareprotection_platform_almostoutofdate" Label="Die Plattform wird bald veraltet sein." Color="Color.Primary" Disabled="@(!antivirus_enabled)" />
                                <MudCheckBox Class="ml-2" T="bool" @bind-Value="@antivirus_notifications_malwareprotection_platform_update_failed" Label="Das Plattform-Update ist fehlgeschlagen." Color="Color.Primary" Disabled="@(!antivirus_enabled)" />
                                <MudCheckBox Class="ml-2" T="bool" @bind-Value="@antivirus_notifications_malwareprotection_protection_eol" Label="Die Antimalware-Engine unterstützt dieses Betriebssystem nicht mehr und schützt Ihr System nicht mehr vor Malware." Color="Color.Primary" Disabled="@(!antivirus_enabled)" />

                                <!-- Quarantäne Kategorie -->
                                <MudText Class="ml-2 mt-3" Typo="Typo.h6">Quarantäne</MudText>
                                <MudCheckBox Class="ml-2 " T="bool" @bind-Value="@antivirus_notifications_malwareprotection_quarantine_delete" Label="Ein Element wurde aus der Quarantäne gelöscht." Color="Color.Primary" Disabled="@(!antivirus_enabled)" />
                                <MudCheckBox Class="ml-2" T="bool" @bind-Value="@antivirus_notifications_malwareprotection_quarantine_restore" Label="Ein Element wurde aus der Quarantäne wiederhergestellt." Color="Color.Primary" Disabled="@(!antivirus_enabled)" />

                                <!-- Echtzeitschutz Kategorie -->
                                <MudText Class="ml-2 mt-3" Typo="Typo.h6">Echtzeitschutz</MudText>
                                <MudCheckBox Class="ml-2" T="bool" @bind-Value="@antivirus_notifications_malwareprotection_rtp_disabled" Label="Echtzeitschutz deaktiviert." Color="Color.Primary" Disabled="@(!antivirus_enabled)" />
                                <MudCheckBox Class="ml-2" T="bool" @bind-Value="@antivirus_notifications_malwareprotection_rtp_enabled" Label="Echtzeitschutz aktiviert." Color="Color.Primary" Disabled="@(!antivirus_enabled)" />
                                <MudCheckBox Class="ml-2" T="bool" @bind-Value="@antivirus_notifications_malwareprotection_rtp_feature_configured" Label="Die Konfiguration des Echtzeitschutzes wurde geändert." Color="Color.Primary" Disabled="@(!antivirus_enabled)" />
                                <MudCheckBox Class="ml-2" T="bool" @bind-Value="@antivirus_notifications_malwareprotection_rtp_feature_failure" Label="Beim Echtzeitschutz ist ein Fehler aufgetreten." Color="Color.Primary" Disabled="@(!antivirus_enabled)" />
                                <MudCheckBox Class="ml-2" T="bool" @bind-Value="@antivirus_notifications_malwareprotection_rtp_feature_recovered" Label="Der Echtzeitschutz wurde nach einem Fehler wiederhergestellt." Color="Color.Primary" Disabled="@(!antivirus_enabled)" />

                                <!-- Scan Kategorie -->
                                <MudText Class="ml-2 mt-3" Typo="Typo.h6">Scan</MudText>
                                <MudCheckBox Class="ml-2" T="bool" @bind-Value="@antivirus_notifications_malwareprotection_scan_cancelled" Label="Ein Scanauftrag wurde gestoppt, bevor er abgeschlossen war." Color="Color.Primary" Disabled="@(!antivirus_enabled)" />
                                <MudCheckBox Class="ml-2" T="bool" @bind-Value="@antivirus_notifications_malwareprotection_scan_completed" Label="Scanauftrag fertiggestellt." Color="Color.Primary" Disabled="@(!antivirus_enabled)" />
                                <MudCheckBox Class="ml-2" T="bool" @bind-Value="@antivirus_notifications_malwareprotection_scan_failed" Label="Antischadsoftwarescan fehlgeschlagen." Color="Color.Primary" Disabled="@(!antivirus_enabled)" />
                                <MudCheckBox Class="ml-2" T="bool" @bind-Value="@antivirus_notifications_malwareprotection_scan_paused" Label="Ein Antischadsoftwarescan wurde angehalten." Color="Color.Primary" Disabled="@(!antivirus_enabled)" />

                                <!-- Signaturen Kategorie -->
                                <MudText Class="ml-2 mt-3" Typo="Typo.h6">Signaturen</MudText>
                                <MudCheckBox Class="ml-2" T="bool" @bind-Value="@antivirus_notifications_malwareprotection_signature_reversion" Label="Update der AntiVirus Signaturen fehlgeschlagen. Versuche alte Signaturen zu laden." Color="Color.Primary" Disabled="@(!antivirus_enabled)" />
                                <MudCheckBox Class="ml-2" T="bool" @bind-Value="@antivirus_notifications_malwareprotection_signature_update_failed" Label="Update der AntiVirus Signaturen fehlgeschlagen." Color="Color.Primary" Disabled="@(!antivirus_enabled)" />
                                <MudCheckBox Class="ml-2" T="bool" @bind-Value="@antivirus_notifications_malwareprotection_signature_updated" Label="Signaturen aktualisiert." Color="Color.Primary" Disabled="@(!antivirus_enabled)" />

                                <!-- Weitere Kategorien hier einfügen, falls vorhanden -->
                            </MudPaper>

                        </MudTabPanel>
                    </MudTabs>

                </MudTabPanel>

                <MudTabPanel Text="Sensoren">
                    <MudPaper>

                        <MudTooltip Text="Daten exportieren">
                            <!--<MudIconButton Class="ml-2 mt-2" Icon="@Icons.Material.Filled.FileDownload" Variant="Variant.Filled" Size="Size.Small" Color="Color.Default" @onclick="Trigger_Export_Table_Dialog"></MudIconButton>-->
                        </MudTooltip>

                        <MudTable Class="mt-0" Height="70vh" FixedHeader="true" FixedFooter="true" Hover="true" RowsPerPage="25" Dense="true" Items="@sensors_mysql_data" Filter="new Func<Sensors_Entity, bool>(Sensors_Table_Filter_Func)">
                            <ToolBarContent>
                                <MudTextField @bind-Value="sensors_table_search_string" Placeholder="Suche" Adornment="Adornment.Start" AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Medium" Class="mt-0"></MudTextField>
                            </ToolBarContent>
                            <HeaderContent>
                                <MudTh Sortable="true" @onclick="() => sensors_table_sorted_column = (nameof(Sensors_Entity.enabled))" style="white-space: nowrap;">Aktiviert</MudTh>
                                <MudTh Sortable="true" @onclick="() => sensors_table_sorted_column = (nameof(Sensors_Entity.name))" style="white-space: nowrap;">Name</MudTh>
                                <MudTh Sortable="true" @onclick="() => sensors_table_sorted_column = (nameof(Sensors_Entity.category))" style="white-space: nowrap;">Kategorie</MudTh>
                                <MudTh Sortable="true" @onclick="() => sensors_table_sorted_column = (nameof(Sensors_Entity.sub_category))" style="white-space: nowrap;">Unterkategorie</MudTh>
                                <MudTh Sortable="true" @onclick="() => sensors_table_sorted_column = (nameof(Sensors_Entity.severity))" style="white-space: nowrap;">Priorität</MudTh>
                                <MudTh Sortable="true" @onclick="() => sensors_table_sorted_column = (nameof(Sensors_Entity.description))" style="white-space: nowrap;">Beschreibung</MudTh>
                                <MudTh Sortable="true" @onclick="() => sensors_table_sorted_column = (nameof(Sensors_Entity.author))" style="white-space: nowrap;">Author</MudTh>
                                <MudTh Sortable="true" @onclick="() => sensors_table_sorted_column = (nameof(Sensors_Entity.date))" style="white-space: nowrap;">Datum</MudTh>
                            </HeaderContent>
                            <RowTemplate Context="sensors_row">

                                <MudTd DataLabel="Aktiviert" @onclick="() => Sensors_RowClickHandler(sensors_row)" class="@Sensors_GetRowClass(sensors_row)" style="white-space: nowrap;">
                                    <span style="display: flex; align-items: center;">
                                        <MudCheckBox T="bool" @bind-Value="sensors_row.enabled" Color="Color.Primary" />
                                    </span>
                                </MudTd>

                                <MudTd DataLabel="Name" @onclick="() => Sensors_RowClickHandler(sensors_row)" class="@Sensors_GetRowClass(sensors_row)" style="white-space: nowrap;">
                                    <span style="display: flex; align-items: center;">
                                        &nbsp;@sensors_row.name
                                    </span>
                                </MudTd>

                                <MudTd DataLabel="Kategorie" @onclick="() => Sensors_RowClickHandler(sensors_row)" class="@Sensors_GetRowClass(sensors_row)" style="white-space: nowrap;">
                                    <span style="display: flex; align-items: center;">
                                        &nbsp;@sensors_row.category
                                    </span>
                                </MudTd>

                                <MudTd DataLabel="Unterkategorie" @onclick="() => Sensors_RowClickHandler(sensors_row)" class="@Sensors_GetRowClass(sensors_row)" style="white-space: nowrap;">
                                    <span style="display: flex; align-items: center;">
                                        &nbsp;@sensors_row.sub_category
                                    </span>
                                </MudTd>

                                <MudTd DataLabel="Priorität" @onclick="() => Sensors_RowClickHandler(sensors_row)" class="@Sensors_GetRowClass(sensors_row)" style="white-space: nowrap;">
                                    <span style="display: flex; align-items: center;">
                                        &nbsp;@sensors_row.severity
                                    </span>
                                </MudTd>

                                <MudTd DataLabel="Beschreibung" @onclick="() => Sensors_RowClickHandler(sensors_row)" class="@Sensors_GetRowClass(sensors_row)" style="white-space: nowrap;">
                                    <span style="display: flex; align-items: center;">
                                        &nbsp;@sensors_row.description
                                    </span>
                                </MudTd>

                                <MudTd DataLabel="Author" @onclick="() => Sensors_RowClickHandler(sensors_row)" class="@Sensors_GetRowClass(sensors_row)" style="white-space: nowrap;">
                                    <span style="display: flex; align-items: center;">
                                        &nbsp;@sensors_row.author
                                    </span>
                                </MudTd>

                                <MudTd DataLabel="Datum" @onclick="() => Sensors_RowClickHandler(sensors_row)" class="@Sensors_GetRowClass(sensors_row)" style="white-space: nowrap;">
                                    <span style="display: flex; align-items: center;">
                                        &nbsp;@sensors_row.date
                                    </span>
                                </MudTd>

                            </RowTemplate>
                            <PagerContent>
                                <MudTablePager PageSizeOptions="new int[] { 10, 25, 50, 100, 250, 500, int.MaxValue }" RowsPerPageString="Einträge pro Seite" />
                            </PagerContent>
                        </MudTable>

                    </MudPaper>
                </MudTabPanel>

                <MudTabPanel Text="Jobs">
                    <MudPaper>

                        <MudTooltip Text="Daten exportieren">
                            <!--<MudIconButton Class="ml-2 mt-2" Icon="@Icons.Material.Filled.FileDownload" Variant="Variant.Filled" Size="Size.Small" Color="Color.Default" @onclick="Trigger_Export_Table_Dialog"></MudIconButton>-->
                        </MudTooltip>

                        <MudTable Class="mt-0" Height="70vh" FixedHeader="true" FixedFooter="true" Hover="true" RowsPerPage="25" Dense="true" Items="@jobs_mysql_data" Filter="new Func<Jobs_Entity, bool>(Jobs_Table_Filter_Func)">
                            <ToolBarContent>
                                <MudTextField @bind-Value="jobs_table_search_string" Placeholder="Suche" Adornment="Adornment.Start" AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Medium" Class="mt-0"></MudTextField>
                            </ToolBarContent>
                            <HeaderContent>
                                <MudTh Sortable="true" @onclick="() => jobs_table_sorted_column = (nameof(Jobs_Entity.enabled))" style="white-space: nowrap;">Aktiviert</MudTh>
                                <MudTh Sortable="true" @onclick="() => jobs_table_sorted_column = (nameof(Jobs_Entity.name))" style="white-space: nowrap;">Name</MudTh>
                                <MudTh Sortable="true" @onclick="() => jobs_table_sorted_column = (nameof(Jobs_Entity.type))" style="white-space: nowrap;">Kategorie</MudTh>
                                <MudTh Sortable="true" @onclick="() => jobs_table_sorted_column = (nameof(Jobs_Entity.description))" style="white-space: nowrap;">Beschreibung</MudTh>
                                <MudTh Sortable="true" @onclick="() => jobs_table_sorted_column = (nameof(Jobs_Entity.author))" style="white-space: nowrap;">Author</MudTh>
                                <MudTh Sortable="true" @onclick="() => jobs_table_sorted_column = (nameof(Jobs_Entity.date))" style="white-space: nowrap;">Datum</MudTh>
                            </HeaderContent>
                            <RowTemplate Context="jobs_row">

                                <MudTd DataLabel="Aktiviert" @onclick="() => Jobs_RowClickHandler(jobs_row)" class="@Jobs_GetRowClass(jobs_row)" style="white-space: nowrap;">
                                    <span style="display: flex; align-items: center;">
                                        <MudCheckBox T="bool" @bind-Value="jobs_row.enabled" Color="Color.Primary" />
                                    </span>
                                </MudTd>

                                <MudTd DataLabel="Name" @onclick="() => Jobs_RowClickHandler(jobs_row)" class="@Jobs_GetRowClass(jobs_row)" style="white-space: nowrap;">
                                    <span style="display: flex; align-items: center;">
                                        &nbsp;@jobs_row.name
                                    </span>
                                </MudTd>

                                <MudTd DataLabel="Typ" @onclick="() => Jobs_RowClickHandler(jobs_row)" class="@Jobs_GetRowClass(jobs_row)" style="white-space: nowrap;">
                                    <span style="display: flex; align-items: center;">
                                        &nbsp;@jobs_row.type
                                    </span>
                                </MudTd>

                                <MudTd DataLabel="Beschreibung" @onclick="() => Jobs_RowClickHandler(jobs_row)" class="@Jobs_GetRowClass(jobs_row)" style="white-space: nowrap;">
                                    <span style="display: flex; align-items: center;">
                                        &nbsp;@jobs_row.description
                                    </span>
                                </MudTd>

                                <MudTd DataLabel="Author" @onclick="() => Jobs_RowClickHandler(jobs_row)" class="@Jobs_GetRowClass(jobs_row)" style="white-space: nowrap;">
                                    <span style="display: flex; align-items: center;">
                                        &nbsp;@jobs_row.author
                                    </span>
                                </MudTd>

                                <MudTd DataLabel="Datum" @onclick="() => Jobs_RowClickHandler(jobs_row)" class="@Jobs_GetRowClass(jobs_row)" style="white-space: nowrap;">
                                    <span style="display: flex; align-items: center;">
                                        &nbsp;@jobs_row.date
                                    </span>
                                </MudTd>

                            </RowTemplate>
                            <PagerContent>
                                <MudTablePager PageSizeOptions="new int[] { 10, 25, 50, 100, 250, 500, int.MaxValue }" RowsPerPageString="Einträge pro Seite" />
                            </PagerContent>
                        </MudTable>

                    </MudPaper>
                </MudTabPanel>
            </MudTabs>
        }

    </Authorized>
 </AuthorizeView>

@code {

    #region Permissions System

    private string permissions_json = String.Empty;
    private string permissions_tenants_json = String.Empty;
    public static List<string> permissions_tenants_list = new List<string> { };

    private bool permissions_policies_enabled = false;
    private bool permissions_policies_add = false;
    private bool permissions_policies_manage = false;
    private bool permissions_policies_edit = false;
    private bool permissions_policies_delete = false;

    public class Permissions_Tenants_Activation_State
    {
        public string name { get; set; } = String.Empty;
    }

    private async Task Get_Permissions()
    {
        //Extract user info from users session storage
        var sessionStorage = new ProtectedSessionStorage(JSRuntime, DataProtectionProvider);
        var username = await sessionStorage.GetAsync<string>("username");
        var password = await sessionStorage.GetAsync<string>("password");

        Logging.Handler.Debug("/policy_settings -> Permissions_Load", "username", username.Value ?? String.Empty);

        //if user info empty, force logout
        if (String.IsNullOrEmpty(username.Value) || String.IsNullOrEmpty(password.Value))
        {
            Logging.Handler.Debug("/policy_settings -> Permissions_Load", "sessions storage data", "empty, force logout");

            NavigationManager.NavigateTo("/logout", true);
            return;
        }

        //Check if user info is valid, if not, force logout
        if (!Classes.Authentication.User.Login_User(username.Value ?? String.Empty, password.Value ?? String.Empty))
        {
            Logging.Handler.Debug("/policy_settings -> Permissions_Load", "verify user", "incorrect data, force logout");

            NavigationManager.NavigateTo("/logout", true);
            return;
        }

        //Get permissions
        string query = "SELECT * FROM `accounts` WHERE username = @username;";

        MySqlConnection conn = new MySqlConnection(Application_Settings.connectionString);

        try
        {
            await conn.OpenAsync();

            MySqlCommand command = new MySqlCommand(query, conn);
            command.Parameters.AddWithValue("@username", username.Value);

            Logging.Handler.Debug("/policy_settings -> Permissions_Load", "query", query);

            using (DbDataReader reader = await command.ExecuteReaderAsync())
            {
                if (reader.HasRows)
                {
                    while (await reader.ReadAsync())
                    {
                        permissions_json = reader["permissions"].ToString() ?? String.Empty;
                        permissions_tenants_json = reader["tenants"].ToString() ?? String.Empty;
                    }
                }
            }

            Logging.Handler.Debug("/policy_settings -> Permissions_Load", "permissions_json", permissions_json);

            //Extract permissions
            if (!String.IsNullOrEmpty(permissions_json))
            {
                using (JsonDocument document = JsonDocument.Parse(permissions_json))
                {
                    //policies_enabled
                    try
                    {
                        JsonElement element = document.RootElement.GetProperty("policies_enabled");
                        permissions_policies_enabled = element.GetBoolean();
                    }
                    catch (Exception ex)
                    {
                        Logging.Handler.Error("/policy_settings -> Permissions_Load", "permissions_json (permissions_policies_enabled)", ex.Message);
                    }

                    //policies_add
                    try
                    {
                        JsonElement element = document.RootElement.GetProperty("policies_add");
                        permissions_policies_add = element.GetBoolean();
                    }
                    catch (Exception ex)
                    {
                        Logging.Handler.Error("/policy_settings -> Permissions_Load", "permissions_json (policies_add)", ex.Message);
                    }

                    //policies_manage
                    try
                    {
                        JsonElement element = document.RootElement.GetProperty("policies_manage");
                        permissions_policies_manage = element.GetBoolean();
                    }
                    catch (Exception ex)
                    {
                        Logging.Handler.Error("/policy_settings -> Permissions_Load", "permissions_json (policies_manage)", ex.Message);
                    }

                    //policies_edit
                    try
                    {
                        JsonElement element = document.RootElement.GetProperty("policies_edit");
                        permissions_policies_edit = element.GetBoolean();
                    }
                    catch (Exception ex)
                    {
                        Logging.Handler.Error("/policy_settings -> Permissions_Load", "permissions_json (policies_edit)", ex.Message);
                    }

                    //policies_delete
                    try
                    {
                        JsonElement element = document.RootElement.GetProperty("policies_delete");
                        permissions_policies_delete = element.GetBoolean();
                    }
                    catch (Exception ex)
                    {
                        Logging.Handler.Error("/policy_settings -> Permissions_Load", "permissions_json (policies_delete)", ex.Message);
                    }
                }
            }
            else if (permissions_json == "[]")
            {
                Logging.Handler.Debug("/policy_settings -> Permissions_Load", "permissions_json", "Empty, logout user");
                NavigationManager.NavigateTo("/logout", true);
            }
            else
            {
                Logging.Handler.Debug("/policy_settings -> Permissions_Load", "permissions_json", "Empty, logout user");
                NavigationManager.NavigateTo("/logout", true);
            }

            //Extract tenants from json
            permissions_tenants_list.Clear();
            if (!String.IsNullOrEmpty(permissions_tenants_json))
            {
                //Set the activation state for the tenants
                try
                {
                    List<Permissions_Tenants_Activation_State> tenants_activation_state_list = JsonSerializer.Deserialize<List<Permissions_Tenants_Activation_State>>(permissions_tenants_json);

                    foreach (var tenant in tenants_activation_state_list)
                    {
                        Logging.Handler.Debug("/policy_settings -> Permissions_Load", "foreach tenant", tenant.name);

                        permissions_tenants_list.Add(tenant.name);
                    }
                }
                catch (Exception ex)
                {
                    Logging.Handler.Error("/policy_settings -> Permissions_Load (permissions_tenants_json deserialize)", "Result", ex.Message);
                }
            }
            else
            {
                Logging.Handler.Debug("/policy_settings -> Permissions_Load (permissions_tenants_json deserialize)", "Result", "Empty");
            }
        }
        catch (Exception ex)
        {
            Logging.Handler.Error("/policy_settings -> Permissions_Load", "general_error (force logout)", ex.Message);
            NavigationManager.NavigateTo("/logout", true);
        }
        finally
        {
            conn.Close();
        }
    }

    #endregion

    protected override async Task OnInitializedAsync()
    {
        await Get_Permissions();
        //Check permissions
        if (!permissions_policies_manage)
        {
            NavigationManager.NavigateTo("/logout", true);
            return;
        }

        policy_name = await localStorage.GetItemAsync<string>("policy_name");

        await Load_Policy();
        await Antivirus_Settings_Load();
        await Antivirus_Exclusions_Load();
        await Antivirus_Scan_Jobs_Load();
        await Antivirus_Controlled_Folder_Access_Folders_Load();
        await Get_Sensors_Overview();
        await Get_Jobs_Overview();
        await Get_Antivirus_Controlled_Folder_Access_Rulesets();

        StateHasChanged();
    }

    string policy_name = "";

    #region Antivirus
    string antivirus_settings_json = String.Empty;
    string antivirus_exclusions_json = String.Empty;
    string antivirus_scan_jobs_json = String.Empty;

    public bool antivirus_enabled = false;
    public bool antivirus_security_center = false;
    public bool antivirus_security_center_tray = false;
    public bool antivirus_check_hourly_signatures = false;
    public bool antivirus_allow_metered_updates = false;
    public bool antivirus_delete_quarantine_six_months = false;
    public int antivirus_scan_direction = 0;
    public string antivirus_scan_direction_display = String.Empty;
    public bool antivirus_file_hash_computing = false;
    public bool antivirus_block_at_first_seen = false;
    public bool antivirus_scan_archives = false;
    public bool antivirus_scan_mails = false;
    public bool antivirus_net_scan_network_files = false;
    public bool antivirus_net_filter_incoming_connections = false;
    public bool antivirus_net_datagram_processing = false;
    public bool antivirus_parser_tls = false;
    public bool antivirus_parser_rdp = false;
    public bool antivirus_parser_ssh = false;
    public bool antivirus_parser_http = false;
    public bool antivirus_parser_dns = false;
    public bool antivirus_parser_dnsovertcp = false;

    //Controlled Folder Access
    public bool antivirus_controlled_folder_access_enabled = false;
    public string antivirus_controlled_folder_access_ruleset = "-";
    private DateTime? antivirus_controlled_folder_access_folders_whitelist_until_date = DateTime.Now.Date.AddDays(14);

    //Notifications
    public bool antivirus_notifications_controlled_folder_actions_blocked_action = true;
    public bool antivirus_notifications_malwareprotection_antivirus_disabled = true;
    public bool antivirus_notifications_malwareprotection_antivirus_enabled = true;
    public bool antivirus_notifications_malwareprotection_antispyware_disabled = true;
    public bool antivirus_notifications_malwareprotection_antispyware_enabled = true;
    public bool antivirus_notifications_malwareprotection_behavior_detected = true;
    public bool antivirus_notifications_malwareprotection_config_changed = false;
    public bool antivirus_notifications_malwareprotection_disabled_expired_state = true;
    public bool antivirus_notifications_malwareprotection_engine_failure = true;
    public bool antivirus_notifications_malwareprotection_engine_update_platformoutofdate = true;
    public bool antivirus_notifications_malwareprotection_expiration_warning_state = true;
    public bool antivirus_notifications_malwareprotection_folder_guard_sector_block = true;
    public bool antivirus_notifications_malwareprotection_malware_action_failed_00_malwareprotection_state_malware_action_failed_00_malwareprotection_state_malware_action_critically_failed = true;
    public bool antivirus_notifications_malwareprotection_malware_action_taken = true;
    public bool antivirus_notifications_malwareprotection_malware_detected = true;
    public bool antivirus_notifications_malwareprotection_os_eol = true;
    public bool antivirus_notifications_malwareprotection_os_expiring = true;
    public bool antivirus_notifications_malwareprotection_platform_almostoutofdate = true;
    public bool antivirus_notifications_malwareprotection_platform_update_failed = true;
    public bool antivirus_notifications_malwareprotection_protection_eol = true;
    public bool antivirus_notifications_malwareprotection_quarantine_delete = true;
    public bool antivirus_notifications_malwareprotection_quarantine_restore = true;
    public bool antivirus_notifications_malwareprotection_rtp_disabled = true;
    public bool antivirus_notifications_malwareprotection_rtp_enabled = true;
    public bool antivirus_notifications_malwareprotection_rtp_feature_configured = false;
    public bool antivirus_notifications_malwareprotection_rtp_feature_failure = true;
    public bool antivirus_notifications_malwareprotection_rtp_feature_recovered = true;
    public bool antivirus_notifications_malwareprotection_scan_cancelled = true;
    public bool antivirus_notifications_malwareprotection_scan_completed = true;
    public bool antivirus_notifications_malwareprotection_scan_failed = true;
    public bool antivirus_notifications_malwareprotection_scan_paused = true;
    public bool antivirus_notifications_malwareprotection_signature_reversion = true;
    public bool antivirus_notifications_malwareprotection_signature_update_failed = true;
    public bool antivirus_notifications_malwareprotection_signature_updated = true;
    public bool antivirus_notifications_malwareprotection_state_malware_action_critically_failed = true;
    public bool antivirus_notifications_malwareprotection_state_malware_detected = true;
    public bool antivirus_notifications_malwareprotection_state_malware_action_taken = true;
    public bool antivirus_notifications_tamper_protection_blocked_changes = true;

    public class Antivirus_Settings
    {
        public bool enabled { get; set; }
        public bool security_center { get; set; }
        public bool security_center_tray { get; set; }
        public bool check_hourly_signatures { get; set; }
        public bool allow_metered_updates { get; set; }
        public bool delete_quarantine_six_months { get; set; }
        public int scan_direction { get; set; }
        public bool file_hash_computing { get; set; }
        public bool block_at_first_seen { get; set; }
        public bool scan_archives { get; set; }
        public bool scan_mails { get; set; }
        public bool net_scan_network_files { get; set; }
        public bool net_filter_incoming_connections { get; set; }
        public bool net_datagram_processing { get; set; }
        public bool parser_tls { get; set; }
        public bool parser_rdp { get; set; }
        public bool parser_ssh { get; set; }
        public bool parser_http { get; set; }
        public bool parser_dns { get; set; }
        public bool parser_dnsovertcp { get; set; }

        //Controlled Folder Access
        public bool controlled_folder_access_enabled { get; set; }
        public string controlled_folder_access_ruleset { get; set; }
        public string controlled_folder_access_folders_whitelist_until_date { get; set; }

        // Notifications
        public bool notifications_controlled_folder_actions_blocked_action { get; set; }
        public bool notifications_malwareprotection_antivirus_disabled { get; set; }
        public bool notifications_malwareprotection_antivirus_enabled { get; set; }
        public bool notifications_malwareprotection_antispyware_disabled { get; set; }
        public bool notifications_malwareprotection_antispyware_enabled { get; set; }
        public bool notifications_malwareprotection_behavior_detected { get; set; }
        public bool notifications_malwareprotection_config_changed { get; set; }
        public bool notifications_malwareprotection_disabled_expired_state { get; set; }
        public bool notifications_malwareprotection_engine_failure { get; set; }
        public bool notifications_malwareprotection_engine_update_platformoutofdate { get; set; }
        public bool notifications_malwareprotection_expiration_warning_state { get; set; }
        public bool notifications_malwareprotection_folder_guard_sector_block { get; set; }
        public bool notifications_malwareprotection_malware_action_failed_00_malwareprotection_state_malware_action_failed_00_malwareprotection_state_malware_action_critically_failed { get; set; }
        public bool notifications_malwareprotection_malware_action_taken { get; set; }
        public bool notifications_malwareprotection_malware_detected { get; set; }
        public bool notifications_malwareprotection_os_eol { get; set; }
        public bool notifications_malwareprotection_os_expiring { get; set; }
        public bool notifications_malwareprotection_platform_almostoutofdate { get; set; }
        public bool notifications_malwareprotection_platform_update_failed { get; set; }
        public bool notifications_malwareprotection_protection_eol { get; set; }
        public bool notifications_malwareprotection_quarantine_delete { get; set; }
        public bool notifications_malwareprotection_quarantine_restore { get; set; }
        public bool notifications_malwareprotection_rtp_disabled { get; set; }
        public bool notifications_malwareprotection_rtp_enabled { get; set; }
        public bool notifications_malwareprotection_rtp_feature_configured { get; set; }
        public bool notifications_malwareprotection_rtp_feature_failure { get; set; }
        public bool notifications_malwareprotection_rtp_feature_recovered { get; set; }
        public bool notifications_malwareprotection_scan_cancelled { get; set; }
        public bool notifications_malwareprotection_scan_completed { get; set; }
        public bool notifications_malwareprotection_scan_failed { get; set; }
        public bool notifications_malwareprotection_scan_paused { get; set; }
        public bool notifications_malwareprotection_signature_reversion { get; set; }
        public bool notifications_malwareprotection_signature_update_failed { get; set; }
        public bool notifications_malwareprotection_signature_updated { get; set; }
        public bool notifications_malwareprotection_state_malware_action_critically_failed { get; set; }
        public bool notifications_malwareprotection_state_malware_detected { get; set; }
        public bool notifications_malwareprotection_state_malware_action_taken { get; set; }
        public bool notifications_tamper_protection_blocked_changes { get; set; }
    }

    public class Antivirus_Exclusions
    {
        public string date { get; set; }
        public string type { get; set; }
        public string exclusion { get; set; }
        public string description { get; set; }
    }

    public class Antivirus_Scan_Jobs
    {
        public string date { get; set; }
        public string name { get; set; }
        public string description { get; set; }
        public string time_scheduler_type { get; set; }
        public bool time_scheduler_monday { get; set; }
        public bool time_scheduler_tuesday { get; set; }
        public bool time_scheduler_wednesday { get; set; }
        public bool time_scheduler_thursday { get; set; }
        public bool time_scheduler_friday { get; set; }
        public bool time_scheduler_saturday { get; set; }
        public bool time_scheduler_sunday { get; set; }
        public string scan_type { get; set; }
        public int scan_settings_cpu_usage { get; set; }
        public bool scan_settings_scan_on_battery { get; set; }
        public bool scan_settings_network_drives { get; set; }
        public bool scan_settings_removable_disks { get; set; }
        public bool scan_settings_update_signatures { get; set; }
        public List<Antivirus_Exclusions> scan_directories { get; set; }
    }

    #endregion

    private async Task Load_Policy()
    {
        string query = "SELECT * FROM policies WHERE name = @policy_name;";

        MySqlConnection conn = new MySqlConnection(Application_Settings.connectionString);

        try
        {
            await conn.OpenAsync();

            MySqlCommand command = new MySqlCommand(query, conn);
            command = new MySqlCommand(query, conn);
            command.Parameters.AddWithValue("@policy_name", policy_name);

            Logging.Handler.Debug("/Policy_Settings -> Load_Policy", "MySQL_Prepared_Query", query);

            using (DbDataReader reader = await command.ExecuteReaderAsync())
            {
                if (reader.HasRows)
                {
                    while (await reader.ReadAsync())
                    {
                        antivirus_settings_json = reader["antivirus_settings"].ToString() ?? String.Empty;
                        antivirus_exclusions_json = reader["antivirus_exclusions"].ToString() ?? String.Empty;
                        antivirus_scan_jobs_json = reader["antivirus_scan_jobs"].ToString() ?? String.Empty;
                        antivirus_controlled_folder_access_folders_json = reader["antivirus_controlled_folder_access_folders"].ToString() ?? String.Empty;
                        sensors_json = reader["sensors"].ToString() ?? String.Empty;
                        jobs_json = reader["jobs"].ToString() ?? String.Empty;
                    }
                }
            }
        }
        catch (Exception ex)
        {
            Logging.Handler.Error("/Policy_Settings -> Load_Policy (DB)", "MySQL_Query", ex.Message);
        }
        finally
        {
            conn.Close();
        }

        Logging.Handler.Debug("/Policy_Settings -> Load_Policy", "JSON (antivirus_settings_json)", antivirus_settings_json);
        Logging.Handler.Debug("/Policy_Settings -> Load_Policy", "JSON (antivirus_exclusions_json)", antivirus_exclusions_json);
        Logging.Handler.Debug("/Policy_Settings -> Load_Policy", "JSON (antivirus_scan_jobs_json)", antivirus_scan_jobs_json);
        Logging.Handler.Debug("/Policy_Settings -> Load_Policy", "JSON (sensors)", sensors_json);
    }

    private async Task Save_Policy()
    {
        #region Antivirus

        string antivirus_settings_json_string = String.Empty;

        //Convert displayed direction to computable
        if (antivirus_scan_direction_display == "Eingehend & Ausgehend")
            antivirus_scan_direction = 0;
        else if (antivirus_scan_direction_display == "Eingehend")
            antivirus_scan_direction = 1;
        else if (antivirus_scan_direction_display == "Ausgehend")
            antivirus_scan_direction = 2;

        try
        {       
            string date = antivirus_controlled_folder_access_folders_whitelist_until_date.Value.ToString("yyyy-MM-ddTHH:mm:ss");

            Antivirus_Settings antivirus_settings = new Antivirus_Settings
                {
                    enabled = antivirus_enabled,
                    security_center = antivirus_security_center,
                    security_center_tray = antivirus_security_center_tray,
                    check_hourly_signatures = antivirus_check_hourly_signatures,
                    allow_metered_updates = antivirus_allow_metered_updates,
                    delete_quarantine_six_months = antivirus_delete_quarantine_six_months,
                    scan_direction = Convert.ToInt32(antivirus_scan_direction),
                    file_hash_computing = antivirus_file_hash_computing,
                    block_at_first_seen = antivirus_block_at_first_seen,
                    scan_archives = antivirus_scan_archives,
                    scan_mails = antivirus_scan_mails,
                    net_scan_network_files = antivirus_net_scan_network_files,
                    net_filter_incoming_connections = antivirus_net_filter_incoming_connections,
                    net_datagram_processing = antivirus_net_datagram_processing,
                    parser_tls = antivirus_parser_tls,
                    parser_rdp = antivirus_parser_rdp,
                    parser_ssh = antivirus_parser_ssh,
                    parser_http = antivirus_parser_http,
                    parser_dns = antivirus_parser_dns,
                    parser_dnsovertcp = antivirus_parser_dnsovertcp,

                    //Controlled Folder Access
                    controlled_folder_access_enabled = antivirus_controlled_folder_access_enabled,
                    controlled_folder_access_ruleset = antivirus_controlled_folder_access_ruleset,
                    controlled_folder_access_folders_whitelist_until_date = date,

                    //Notifications
                    notifications_controlled_folder_actions_blocked_action = antivirus_notifications_controlled_folder_actions_blocked_action,
                    notifications_malwareprotection_antivirus_enabled = antivirus_notifications_malwareprotection_antivirus_enabled,
                    notifications_malwareprotection_antivirus_disabled = antivirus_notifications_malwareprotection_antivirus_disabled,
                    notifications_malwareprotection_antispyware_disabled = antivirus_notifications_malwareprotection_antispyware_disabled,
                    notifications_malwareprotection_antispyware_enabled = antivirus_notifications_malwareprotection_antispyware_enabled,
                    notifications_malwareprotection_behavior_detected = antivirus_notifications_malwareprotection_behavior_detected,
                    notifications_malwareprotection_config_changed = antivirus_notifications_malwareprotection_config_changed,
                    notifications_malwareprotection_disabled_expired_state = antivirus_notifications_malwareprotection_disabled_expired_state,
                    notifications_malwareprotection_engine_failure = antivirus_notifications_malwareprotection_engine_failure,
                    notifications_malwareprotection_engine_update_platformoutofdate = antivirus_notifications_malwareprotection_engine_update_platformoutofdate,
                    notifications_malwareprotection_expiration_warning_state = antivirus_notifications_malwareprotection_expiration_warning_state,
                    notifications_malwareprotection_folder_guard_sector_block = antivirus_notifications_malwareprotection_folder_guard_sector_block,
                    notifications_malwareprotection_malware_action_failed_00_malwareprotection_state_malware_action_failed_00_malwareprotection_state_malware_action_critically_failed = antivirus_notifications_malwareprotection_malware_action_failed_00_malwareprotection_state_malware_action_failed_00_malwareprotection_state_malware_action_critically_failed,
                    notifications_malwareprotection_malware_action_taken = antivirus_notifications_malwareprotection_malware_action_taken,
                    notifications_malwareprotection_malware_detected = antivirus_notifications_malwareprotection_malware_detected,
                    notifications_malwareprotection_os_eol = antivirus_notifications_malwareprotection_os_eol,
                    notifications_malwareprotection_os_expiring = antivirus_notifications_malwareprotection_os_expiring,
                    notifications_malwareprotection_platform_almostoutofdate = antivirus_notifications_malwareprotection_platform_almostoutofdate,
                    notifications_malwareprotection_platform_update_failed = antivirus_notifications_malwareprotection_platform_update_failed,
                    notifications_malwareprotection_protection_eol = antivirus_notifications_malwareprotection_protection_eol,
                    notifications_malwareprotection_quarantine_delete = antivirus_notifications_malwareprotection_quarantine_delete,
                    notifications_malwareprotection_quarantine_restore = antivirus_notifications_malwareprotection_quarantine_restore,
                    notifications_malwareprotection_rtp_disabled = antivirus_notifications_malwareprotection_rtp_disabled,
                    notifications_malwareprotection_rtp_enabled = antivirus_notifications_malwareprotection_rtp_enabled,
                    notifications_malwareprotection_rtp_feature_configured = antivirus_notifications_malwareprotection_rtp_feature_configured,
                    notifications_malwareprotection_rtp_feature_failure = antivirus_notifications_malwareprotection_rtp_feature_failure,
                    notifications_malwareprotection_rtp_feature_recovered = antivirus_notifications_malwareprotection_rtp_feature_recovered,
                    notifications_malwareprotection_scan_cancelled = antivirus_notifications_malwareprotection_scan_cancelled,
                    notifications_malwareprotection_scan_completed = antivirus_notifications_malwareprotection_scan_completed,
                    notifications_malwareprotection_scan_failed = antivirus_notifications_malwareprotection_scan_failed,
                    notifications_malwareprotection_scan_paused = antivirus_notifications_malwareprotection_scan_paused,
                    notifications_malwareprotection_signature_reversion = antivirus_notifications_malwareprotection_signature_reversion,
                    notifications_malwareprotection_signature_update_failed = antivirus_notifications_malwareprotection_signature_update_failed,
                    notifications_malwareprotection_signature_updated = antivirus_notifications_malwareprotection_signature_updated,
                    notifications_malwareprotection_state_malware_action_critically_failed = antivirus_notifications_malwareprotection_state_malware_action_critically_failed,
                    notifications_malwareprotection_state_malware_detected = antivirus_notifications_malwareprotection_state_malware_detected,
                    notifications_malwareprotection_state_malware_action_taken = antivirus_notifications_malwareprotection_state_malware_action_taken,
                    notifications_tamper_protection_blocked_changes = antivirus_notifications_tamper_protection_blocked_changes,
                };

            // Konvertiere das AntivirusPolicy-Objekt in ein JSON-String.
            antivirus_settings_json_string = JsonSerializer.Serialize(antivirus_settings);

            Logging.Handler.Debug("/Policy_Settings -> Save_Policy (Create antivirus_settings_json)", "Result", antivirus_settings_json_string);
        }
        catch (Exception ex)
        {
            Logging.Handler.Error("/Policy_Settings -> Save_Policy (Create antivirus_settings_json)", "Result", ex.Message);
        }

        #endregion

        #region Sensors

        foreach (var sensor in sensors_mysql_data)
        {
            Logging.Handler.Debug("/Policy_Settings -> Save_Policy (Create sensor_json)", "tesssst", sensor.name + " " + sensor.enabled.ToString());
        }

        //Create enabled sensor jsons
        try
        {
            List<Sensors_Activation_State> sensor_data_list = sensors_mysql_data
                .Where(sensor => sensor.enabled)
                .Select(sensor => new Sensors_Activation_State { id = sensor.id })
                .ToList();

            sensors_json = JsonSerializer.Serialize(sensor_data_list, new JsonSerializerOptions { WriteIndented = true });

            Logging.Handler.Debug("/Policy_Settings -> Save_Policy (Create new sensor_json)", "Result", sensors_json);
        }
        catch (Exception ex)
        {
            Logging.Handler.Error("/Policy_Settings -> Save_Policy (Create new sensor_json)", "Result", ex.Message);
        }

        #endregion

        #region Jobs

        //Create enabled job jsons
        try
        {
            List<Jobs_Activation_State> job_data_list = jobs_mysql_data
                .Where(job => job.enabled)
                .Select(job => new Jobs_Activation_State { id = job.id })
                .ToList();

            jobs_json = JsonSerializer.Serialize(job_data_list, new JsonSerializerOptions { WriteIndented = true });

            Logging.Handler.Debug("/Policy_Settings -> Save_Policy (Create new job_json)", "Result", jobs_json);
        }
        catch (Exception ex)
        {
            Logging.Handler.Error("/Policy_Settings -> Save_Policy (Create new job_json)", "Result", ex.Message);
        }

        #endregion

        MySqlConnection conn = new MySqlConnection(Application_Settings.connectionString);

        bool success = false;

        try
        {
            await conn.OpenAsync();

            string execute_query = "UPDATE policies SET antivirus_settings = @antivirus_settings, antivirus_exclusions = @antivirus_exclusions, antivirus_scan_jobs = @antivirus_scan_jobs, antivirus_controlled_folder_access_folders = @antivirus_controlled_folder_access_folders, sensors = @sensors, jobs = @jobs WHERE name = @policy_name;";

            MySqlCommand cmd = new MySqlCommand(execute_query, conn);

            cmd.Parameters.AddWithValue("@policy_name", policy_name);
            cmd.Parameters.AddWithValue("@antivirus_settings", antivirus_settings_json_string);
            cmd.Parameters.AddWithValue("@antivirus_exclusions", antivirus_exclusions_json);
            cmd.Parameters.AddWithValue("@antivirus_scan_jobs", antivirus_scan_jobs_json);
            cmd.Parameters.AddWithValue("@antivirus_controlled_folder_access_folders", antivirus_controlled_folder_access_folders_json);
            cmd.Parameters.AddWithValue("@sensors", sensors_json);
            cmd.Parameters.AddWithValue("@jobs", jobs_json);

            cmd.ExecuteNonQuery();

            success = true;
        }
        catch (Exception ex)
        {
            Logging.Handler.Error("/Policy_Settings -> Save_Policy (To DB)", "Result", ex.Message);
        }
        finally
        {
            await conn.CloseAsync();
        }

        if (success)
        {
            this.Snackbar.Configuration.ShowCloseIcon = true;
            this.Snackbar.Configuration.PositionClass = Defaults.Classes.Position.BottomRight;
            this.Snackbar.Add("Gespeichert.", Severity.Success);
        }
        else
        {
            this.Snackbar.Configuration.ShowCloseIcon = true;
            this.Snackbar.Configuration.PositionClass = Defaults.Classes.Position.BottomRight;
            this.Snackbar.Add("Ein   Fehler ist aufgetreten.", Severity.Error);
        }
    }

    #region Antivirus Settings

    private async Task Antivirus_Settings_Load()
    {
        //Extract antivirus_settings_json
        try
        {
            Logging.Handler.Debug("/Policy_Settings -> Antivirus_Settings_Load (Extract)", "antivirus_settings_json", antivirus_settings_json);

            JsonDocument jsonDocument = JsonDocument.Parse(antivirus_settings_json);
            antivirus_enabled = jsonDocument.RootElement.GetProperty("enabled").GetBoolean();
            antivirus_security_center = jsonDocument.RootElement.GetProperty("security_center").GetBoolean();
            antivirus_security_center_tray = jsonDocument.RootElement.GetProperty("security_center_tray").GetBoolean();
            antivirus_check_hourly_signatures = jsonDocument.RootElement.GetProperty("check_hourly_signatures").GetBoolean();
            antivirus_allow_metered_updates = jsonDocument.RootElement.GetProperty("allow_metered_updates").GetBoolean();
            antivirus_delete_quarantine_six_months = jsonDocument.RootElement.GetProperty("delete_quarantine_six_months").GetBoolean();
            antivirus_scan_direction = jsonDocument.RootElement.GetProperty("scan_direction").GetInt32();
            antivirus_file_hash_computing = jsonDocument.RootElement.GetProperty("file_hash_computing").GetBoolean();
            antivirus_block_at_first_seen = jsonDocument.RootElement.GetProperty("block_at_first_seen").GetBoolean();
            antivirus_scan_archives = jsonDocument.RootElement.GetProperty("scan_archives").GetBoolean();
            antivirus_scan_mails = jsonDocument.RootElement.GetProperty("scan_mails").GetBoolean();
            antivirus_net_scan_network_files = jsonDocument.RootElement.GetProperty("net_scan_network_files").GetBoolean();
            antivirus_net_filter_incoming_connections = jsonDocument.RootElement.GetProperty("net_filter_incoming_connections").GetBoolean();
            antivirus_net_datagram_processing = jsonDocument.RootElement.GetProperty("net_datagram_processing").GetBoolean();
            antivirus_parser_tls = jsonDocument.RootElement.GetProperty("parser_tls").GetBoolean();
            antivirus_parser_rdp = jsonDocument.RootElement.GetProperty("parser_rdp").GetBoolean();
            antivirus_parser_ssh = jsonDocument.RootElement.GetProperty("parser_ssh").GetBoolean();
            antivirus_parser_http = jsonDocument.RootElement.GetProperty("parser_http").GetBoolean();
            antivirus_parser_dns = jsonDocument.RootElement.GetProperty("parser_dns").GetBoolean();
            antivirus_parser_dnsovertcp = jsonDocument.RootElement.GetProperty("parser_dnsovertcp").GetBoolean();

            //Controlled Folder Access
            antivirus_controlled_folder_access_enabled = jsonDocument.RootElement.GetProperty("controlled_folder_access_enabled").GetBoolean();
            antivirus_controlled_folder_access_ruleset = jsonDocument.RootElement.GetProperty("controlled_folder_access_ruleset").GetString();
            antivirus_controlled_folder_access_folders_whitelist_until_date = jsonDocument.RootElement.GetProperty("controlled_folder_access_folders_whitelist_until_date").GetDateTime();

            //Notifications
            antivirus_notifications_controlled_folder_actions_blocked_action = jsonDocument.RootElement.GetProperty("notifications_controlled_folder_actions_blocked_action").GetBoolean();
            antivirus_notifications_malwareprotection_antivirus_enabled = jsonDocument.RootElement.GetProperty("notifications_malwareprotection_antivirus_enabled").GetBoolean();
            antivirus_notifications_malwareprotection_antivirus_disabled = jsonDocument.RootElement.GetProperty("notifications_malwareprotection_antivirus_disabled").GetBoolean();
            antivirus_notifications_malwareprotection_antispyware_disabled = jsonDocument.RootElement.GetProperty("notifications_malwareprotection_antispyware_disabled").GetBoolean();
            antivirus_notifications_malwareprotection_antispyware_enabled = jsonDocument.RootElement.GetProperty("notifications_malwareprotection_antispyware_enabled").GetBoolean();
            antivirus_notifications_malwareprotection_behavior_detected = jsonDocument.RootElement.GetProperty("notifications_malwareprotection_behavior_detected").GetBoolean();
            antivirus_notifications_malwareprotection_config_changed = jsonDocument.RootElement.GetProperty("notifications_malwareprotection_config_changed").GetBoolean();
            antivirus_notifications_malwareprotection_disabled_expired_state = jsonDocument.RootElement.GetProperty("notifications_malwareprotection_disabled_expired_state").GetBoolean();
            antivirus_notifications_malwareprotection_engine_failure = jsonDocument.RootElement.GetProperty("notifications_malwareprotection_engine_failure").GetBoolean();
            antivirus_notifications_malwareprotection_engine_update_platformoutofdate = jsonDocument.RootElement.GetProperty("notifications_malwareprotection_engine_update_platformoutofdate").GetBoolean();
            antivirus_notifications_malwareprotection_expiration_warning_state = jsonDocument.RootElement.GetProperty("notifications_malwareprotection_expiration_warning_state").GetBoolean();
            antivirus_notifications_malwareprotection_folder_guard_sector_block = jsonDocument.RootElement.GetProperty("notifications_malwareprotection_folder_guard_sector_block").GetBoolean();
            antivirus_notifications_malwareprotection_malware_action_failed_00_malwareprotection_state_malware_action_failed_00_malwareprotection_state_malware_action_critically_failed = jsonDocument.RootElement.GetProperty("notifications_malwareprotection_malware_action_failed_00_malwareprotection_state_malware_action_failed_00_malwareprotection_state_malware_action_critically_failed").GetBoolean();
            antivirus_notifications_malwareprotection_malware_action_taken = jsonDocument.RootElement.GetProperty("notifications_malwareprotection_malware_action_taken").GetBoolean();
            antivirus_notifications_malwareprotection_malware_detected = jsonDocument.RootElement.GetProperty("notifications_malwareprotection_malware_detected").GetBoolean();
            antivirus_notifications_malwareprotection_os_eol = jsonDocument.RootElement.GetProperty("notifications_malwareprotection_os_eol").GetBoolean();
            antivirus_notifications_malwareprotection_os_expiring = jsonDocument.RootElement.GetProperty("notifications_malwareprotection_os_expiring").GetBoolean();
            antivirus_notifications_malwareprotection_platform_almostoutofdate = jsonDocument.RootElement.GetProperty("notifications_malwareprotection_platform_almostoutofdate").GetBoolean();
            antivirus_notifications_malwareprotection_platform_update_failed = jsonDocument.RootElement.GetProperty("notifications_malwareprotection_platform_update_failed").GetBoolean();
            antivirus_notifications_malwareprotection_protection_eol = jsonDocument.RootElement.GetProperty("notifications_malwareprotection_protection_eol").GetBoolean();
            antivirus_notifications_malwareprotection_quarantine_delete = jsonDocument.RootElement.GetProperty("notifications_malwareprotection_quarantine_delete").GetBoolean();
            antivirus_notifications_malwareprotection_quarantine_restore = jsonDocument.RootElement.GetProperty("notifications_malwareprotection_quarantine_restore").GetBoolean();
            antivirus_notifications_malwareprotection_rtp_disabled = jsonDocument.RootElement.GetProperty("notifications_malwareprotection_rtp_disabled").GetBoolean();
            antivirus_notifications_malwareprotection_rtp_enabled = jsonDocument.RootElement.GetProperty("notifications_malwareprotection_rtp_enabled").GetBoolean();
            antivirus_notifications_malwareprotection_rtp_feature_configured = jsonDocument.RootElement.GetProperty("notifications_malwareprotection_rtp_feature_configured").GetBoolean();
            antivirus_notifications_malwareprotection_rtp_feature_failure = jsonDocument.RootElement.GetProperty("notifications_malwareprotection_rtp_feature_failure").GetBoolean();
            antivirus_notifications_malwareprotection_rtp_feature_recovered = jsonDocument.RootElement.GetProperty("notifications_malwareprotection_rtp_feature_recovered").GetBoolean();
            antivirus_notifications_malwareprotection_scan_cancelled = jsonDocument.RootElement.GetProperty("notifications_malwareprotection_scan_cancelled").GetBoolean();
            antivirus_notifications_malwareprotection_scan_completed = jsonDocument.RootElement.GetProperty("notifications_malwareprotection_scan_completed").GetBoolean();
            antivirus_notifications_malwareprotection_scan_failed = jsonDocument.RootElement.GetProperty("notifications_malwareprotection_scan_failed").GetBoolean();
            antivirus_notifications_malwareprotection_scan_paused = jsonDocument.RootElement.GetProperty("notifications_malwareprotection_scan_paused").GetBoolean();
            antivirus_notifications_malwareprotection_signature_reversion = jsonDocument.RootElement.GetProperty("notifications_malwareprotection_signature_reversion").GetBoolean();
            antivirus_notifications_malwareprotection_signature_update_failed = jsonDocument.RootElement.GetProperty("notifications_malwareprotection_signature_update_failed").GetBoolean();
            antivirus_notifications_malwareprotection_signature_updated = jsonDocument.RootElement.GetProperty("notifications_malwareprotection_signature_updated").GetBoolean();
            antivirus_notifications_malwareprotection_state_malware_action_critically_failed = jsonDocument.RootElement.GetProperty("notifications_malwareprotection_state_malware_action_critically_failed").GetBoolean();
            antivirus_notifications_malwareprotection_state_malware_detected = jsonDocument.RootElement.GetProperty("notifications_malwareprotection_state_malware_detected").GetBoolean();
            antivirus_notifications_malwareprotection_state_malware_action_taken = jsonDocument.RootElement.GetProperty("notifications_malwareprotection_state_malware_action_taken").GetBoolean();
            antivirus_notifications_tamper_protection_blocked_changes = jsonDocument.RootElement.GetProperty("notifications_tamper_protection_blocked_changes").GetBoolean();
        }
        catch (Exception ex)
        {
            Logging.Handler.Error("/Policy_Settings -> Antivirus_Settings_Load (Extract)", "antivirus_settings_json", ex.Message);
        }

        //Convert to display
        if (antivirus_scan_direction == 0)
            antivirus_scan_direction_display = "Eingehend & Ausgehend";
        else if (antivirus_scan_direction == 1)
            antivirus_scan_direction_display = "Eingehend";
        else if (antivirus_scan_direction == 2)
            antivirus_scan_direction_display = "Ausgehend";
    }

    private void Antivirus_Scan_Direction()
    {
        if (antivirus_scan_direction_display == "Eingehend & Ausgehend")
            antivirus_scan_direction = 0;
        else if (antivirus_scan_direction_display == "Eingehend")
            antivirus_scan_direction = 1;
        else if (antivirus_scan_direction_display == "Ausgehend")
            antivirus_scan_direction = 2;
    }

    #endregion

    #region Antivirus Exclusions Table

    public List<Antivirus_Exclusions_Entity> antivirus_exclusions_mysql_data;

    public class Antivirus_Exclusions_Entity
    {
        public string id { get; set; } = String.Empty;
        public string date { get; set; } = String.Empty;
        public string type { get; set; } = String.Empty;
        public string exclusion { get; set; } = String.Empty;
        public string description { get; set; } = String.Empty;
    }

    private string antivirus_exclusions_table_view_port = "70vh";
    private string antivirus_exclusions_table_sorted_column;
    private string antivirus_exclusions_table_search_string = "";

    private bool Antivirus_Exclusions_Table_Filter_Func(Antivirus_Exclusions_Entity row)
    {
        if (string.IsNullOrEmpty(antivirus_exclusions_table_search_string))
            return true;

        //Search logic for each column
        return row.date.Contains(antivirus_exclusions_table_search_string, StringComparison.OrdinalIgnoreCase) ||
            row.type.Contains(antivirus_exclusions_table_search_string, StringComparison.OrdinalIgnoreCase) ||
            row.exclusion.Contains(antivirus_exclusions_table_search_string, StringComparison.OrdinalIgnoreCase) ||
            row.description.Contains(antivirus_exclusions_table_search_string, StringComparison.OrdinalIgnoreCase);
    }

    private string antivirus_exclusions_selectedRowContent = ""; // Hier wird der Inhalt der ausgewählten Zeile gespeichert

    // Der Handler für den TableRowClick-Event
    private void Antivirus_Exclusions_RowClickHandler(Antivirus_Exclusions_Entity row)
    {
        antivirus_exclusions_selectedRowContent = row.id;
    }

    private string Antivirus_Exclusions_GetRowClass(Antivirus_Exclusions_Entity row)
    {
        return row.id == antivirus_exclusions_selectedRowContent ? "selected-row" : "";
    }

    private async Task Antivirus_Exclusions_Load()
    {
        try
        {
            antivirus_exclusions_mysql_data = new List<Antivirus_Exclusions_Entity>();

            JsonArray antivirus_exclusions_array = JsonNode.Parse(antivirus_exclusions_json).AsArray();

            foreach (var _object in antivirus_exclusions_array)
            {
                string type = _object["type"].ToString();

                if (type == "file")
                    type = "Datei";
                else if (type == "directory")
                    type = "Verzeichnis";
                else if (type == "extension")
                    type = "Dateityp";
                else if (type == "process")
                    type = "Prozess";

                Antivirus_Exclusions_Entity antivirus_exclusions_entity = new Antivirus_Exclusions_Entity
                    {
                        id = _object["id"].ToString(),
                        date = _object["date"].ToString(),
                        type = type,
                        exclusion = _object["exclusion"].ToString(),
                        description = _object["description"].ToString(),
                    };

                antivirus_exclusions_mysql_data.Add(antivirus_exclusions_entity);
            }
        }
        catch (Exception ex)
        {
            Logging.Handler.Error("/policy_settings -> Antivirus_Exclusions_Load", "Result", ex.Message);
        }
    }

    private async Task Antivirus_Exclusions_Export_Table_Dialog()
    {
        //await Show_Export_Table_Dialog("applications_installed");
    }

    private async Task Antivirus_Exclusion_Add_Dialog()
    {
        await localStorage.SetItemAsync("temp_antivirus_exclusion_json", antivirus_exclusions_json);

        var options = new DialogOptions
            {
                DisableBackdropClick = false,
                MaxWidth = MaxWidth.Small,
                ClassBackground = "dialog-blurring",
            };

        var result = await this.DialogService.Show<Pages.Policy_Management.Antivirus.Exclusions.Add_Exclusion_Dialog>(string.Empty, new DialogParameters(), options).Result;

        if (result.Cancelled)
            return;

        Logging.Handler.Debug("/policy_settings -> Add_Exclusion_Dialog", "Result", result.Data.ToString());

        if (String.IsNullOrEmpty(result.Data.ToString()) == false && result.Data.ToString() != "error")
        {
            antivirus_exclusions_json = result.Data.ToString();

            await Antivirus_Exclusions_Load();
        }
    }

    private async Task Antivirus_Exclusion_Edit_Exclusion_Dialog(string id)
    {
        await localStorage.SetItemAsync("temp_antivirus_exclusion_id", id);
        await localStorage.SetItemAsync("temp_antivirus_exclusion_json", antivirus_exclusions_json);

        var options = new DialogOptions
            {
                DisableBackdropClick = false,
                MaxWidth = MaxWidth.Small,
                ClassBackground = "dialog-blurring",

            };

        var result = await this.DialogService.Show<Pages.Policy_Management.Antivirus.Exclusions.Edit_Exclusion_Dialog>(string.Empty, new DialogParameters(), options).Result;

        if (result.Cancelled)
            return;

        Logging.Handler.Debug("/policy_settings -> Edit_Exclusion_Dialog", "Result", result.Data.ToString() ?? String.Empty);

        if (String.IsNullOrEmpty(result.Data.ToString()) == false && result.Data.ToString() != "error")
        {
            antivirus_exclusions_json = result.Data.ToString();

            await Antivirus_Exclusions_Load();
        }
    }

    private async Task Antivirus_Exclusion_Delete_Dialog(string id)
    {
        await localStorage.SetItemAsync("temp_antivirus_exclusion_id", id);
        await localStorage.SetItemAsync("temp_antivirus_exclusion_json", antivirus_exclusions_json);

        var options = new DialogOptions
            {
                DisableBackdropClick = false,
                MaxWidth = MaxWidth.Small,
                ClassBackground = "dialog-blurring",

            };

        var result = await this.DialogService.Show<Pages.Policy_Management.Antivirus.Exclusions.Delete_Exclusion_Dialog>(string.Empty, new DialogParameters(), options).Result;

        if (result.Cancelled)
            return;

        Logging.Handler.Debug("/policy_settings -> Delete_Exclusion_Dialog", "Result", result.Data.ToString());

        if (String.IsNullOrEmpty(result.Data.ToString()) == false && result.Data.ToString() != "error")
        {
            antivirus_exclusions_json = result.Data.ToString();

            await Antivirus_Exclusions_Load();
        }
    }

    #endregion

    #region Antivirus Scan Jobs Table

    public List<Antivirus_Scan_Jobs_Entity> antivirus_scan_jobs_mysql_data;

    public class Antivirus_Scan_Jobs_Entity
    {
        public string name { get; set; } = String.Empty;
        public string date { get; set; } = String.Empty;
        public string description { get; set; } = String.Empty;
        public string time_scheduler_type { get; set; } = String.Empty;
        public string time_scheduler_time { get; set; } = String.Empty;
        public string time_scheduler_monday { get; set; } = String.Empty;
        public string time_scheduler_tuesday { get; set; } = String.Empty;
        public string time_scheduler_wednesday { get; set; } = String.Empty;
        public string time_scheduler_thursday { get; set; } = String.Empty;
        public string time_scheduler_friday { get; set; } = String.Empty;
        public string time_scheduler_saturday { get; set; } = String.Empty;
        public string time_scheduler_sunday { get; set; } = String.Empty;
        public string scan_type { get; set; } = String.Empty;
        public string scan_settings_cpu_usage { get; set; } = String.Empty;
        public string scan_settings_scan_on_battery { get; set; } = String.Empty;
        public string scan_settings_network_drives { get; set; } = String.Empty;
        public string scan_settings_removable_disks { get; set; } = String.Empty;
        public string scan_settings_update_signatures { get; set; } = String.Empty;
        public string scan_directories_json { get; set; } = String.Empty;
    }

    private string antivirus_scan_jobs_table_view_port = "70vh";
    private string antivirus_scan_jobs_table_sorted_column;
    private string antivirus_scan_jobs_table_search_string = "";

    private bool Antivirus_Scan_Jobs_Table_Filter_Func(Antivirus_Scan_Jobs_Entity row)
    {
        if (string.IsNullOrEmpty(antivirus_scan_jobs_table_search_string))
            return true;

        //Search logic for each column
        return row.name.Contains(antivirus_scan_jobs_table_search_string, StringComparison.OrdinalIgnoreCase) ||
            row.date.Contains(antivirus_scan_jobs_table_search_string, StringComparison.OrdinalIgnoreCase) ||
            row.description.Contains(antivirus_scan_jobs_table_search_string, StringComparison.OrdinalIgnoreCase) ||
            row.time_scheduler_type.Contains(antivirus_scan_jobs_table_search_string, StringComparison.OrdinalIgnoreCase) ||
            row.time_scheduler_time.Contains(antivirus_scan_jobs_table_search_string, StringComparison.OrdinalIgnoreCase) ||
            row.time_scheduler_monday.Contains(antivirus_scan_jobs_table_search_string, StringComparison.OrdinalIgnoreCase) ||
            row.time_scheduler_tuesday.Contains(antivirus_scan_jobs_table_search_string, StringComparison.OrdinalIgnoreCase) ||
            row.time_scheduler_wednesday.Contains(antivirus_scan_jobs_table_search_string, StringComparison.OrdinalIgnoreCase) ||
            row.time_scheduler_thursday.Contains(antivirus_scan_jobs_table_search_string, StringComparison.OrdinalIgnoreCase) ||
            row.time_scheduler_friday.Contains(antivirus_scan_jobs_table_search_string, StringComparison.OrdinalIgnoreCase) ||
            row.time_scheduler_saturday.Contains(antivirus_scan_jobs_table_search_string, StringComparison.OrdinalIgnoreCase) ||
            row.time_scheduler_sunday.Contains(antivirus_scan_jobs_table_search_string, StringComparison.OrdinalIgnoreCase) ||
            row.scan_type.Contains(antivirus_scan_jobs_table_search_string, StringComparison.OrdinalIgnoreCase) ||
            row.scan_settings_cpu_usage.Contains(antivirus_scan_jobs_table_search_string, StringComparison.OrdinalIgnoreCase) ||
            row.scan_settings_scan_on_battery.Contains(antivirus_scan_jobs_table_search_string, StringComparison.OrdinalIgnoreCase) ||
            row.scan_settings_network_drives.Contains(antivirus_scan_jobs_table_search_string, StringComparison.OrdinalIgnoreCase) ||
            row.scan_settings_removable_disks.Contains(antivirus_scan_jobs_table_search_string, StringComparison.OrdinalIgnoreCase) ||
            row.scan_settings_update_signatures.Contains(antivirus_scan_jobs_table_search_string, StringComparison.OrdinalIgnoreCase);
    }

    private string antivirus_scan_jobs_selectedRowContent = ""; // Hier wird der Inhalt der ausgewählten Zeile gespeichert

    // Der Handler für den TableRowClick-Event
    private void Antivirus_Scan_Jobs_RowClickHandler(Antivirus_Scan_Jobs_Entity row)
    {
        antivirus_scan_jobs_selectedRowContent = row.name;
    }

    private string Antivirus_Scan_Jobs_GetRowClass(Antivirus_Scan_Jobs_Entity row)
    {
        return row.name == antivirus_scan_jobs_selectedRowContent ? "selected-row" : "";
    }

    private async Task Antivirus_Scan_Jobs_Load()
    {
        try
        {
            antivirus_scan_jobs_mysql_data = new List<Antivirus_Scan_Jobs_Entity>();

            Logging.Handler.Debug("/policy_settings -> Antivirus_Scan_Jobs_Load", "antivirus_scan_jobs_json", antivirus_scan_jobs_json);

            JsonArray antivirus_scan_jobs_array = JsonNode.Parse(antivirus_scan_jobs_json).AsArray();

            foreach (var _object in antivirus_scan_jobs_array)
            {
                string time_scheduler_type = _object["time_scheduler_type"].ToString();
                string time_scheduler_monday = _object["time_scheduler_monday"].ToString();
                string time_scheduler_tuesday = _object["time_scheduler_tuesday"].ToString();
                string time_scheduler_wednesday = _object["time_scheduler_wednesday"].ToString();
                string time_scheduler_thursday = _object["time_scheduler_thursday"].ToString();
                string time_scheduler_friday = _object["time_scheduler_friday"].ToString();
                string time_scheduler_saturday = _object["time_scheduler_saturday"].ToString();
                string time_scheduler_sunday = _object["time_scheduler_sunday"].ToString();
                string scan_type = _object["scan_type"].ToString();
                string scan_settings_cpu_usage = _object["scan_settings_cpu_usage"].ToString();
                string scan_settings_scan_on_battery = _object["scan_settings_scan_on_battery"].ToString();
                string scan_settings_network_drives = _object["scan_settings_network_drives"].ToString();
                string scan_settings_removable_disks = _object["scan_settings_removable_disks"].ToString();
                string scan_settings_update_signatures = _object["scan_settings_update_signatures"].ToString();

                if (time_scheduler_type == "0")
                    time_scheduler_type = "Beim Start";
                else if (time_scheduler_type == "1")
                    time_scheduler_type = "Uhrzeit";

                if (time_scheduler_monday == "true")
                    time_scheduler_monday = "Ja";
                else if (time_scheduler_monday == "false")
                    time_scheduler_monday = "Nein";

                if (time_scheduler_tuesday == "true")
                    time_scheduler_tuesday = "Ja";
                else if (time_scheduler_tuesday == "false")
                    time_scheduler_tuesday = "Nein";

                if (time_scheduler_wednesday == "true")
                    time_scheduler_wednesday = "Ja";
                else if (time_scheduler_wednesday == "false")
                    time_scheduler_wednesday = "Nein";

                if (time_scheduler_thursday == "true")
                    time_scheduler_thursday = "Ja";
                else if (time_scheduler_thursday == "false")
                    time_scheduler_thursday = "Nein";

                if (time_scheduler_friday == "true")
                    time_scheduler_friday = "Ja";
                else if (time_scheduler_friday == "false")
                    time_scheduler_friday = "Nein";

                if (time_scheduler_saturday == "true")
                    time_scheduler_saturday = "Ja";
                else if (time_scheduler_saturday == "false")
                    time_scheduler_saturday = "Nein";

                if (time_scheduler_sunday == "true")
                    time_scheduler_sunday = "Ja";
                else if (time_scheduler_sunday == "false")
                    time_scheduler_sunday = "Nein";

                if (scan_type == "0")
                    scan_type = "Schneller Scan";
                else if (scan_type == "1")
                    scan_type = "Vollständiger Scan";
                else if (scan_type == "2")
                    scan_type = "Benutzerdefiniert";

                if (scan_settings_scan_on_battery == "true")
                    scan_settings_scan_on_battery = "Ja";
                else if (scan_settings_scan_on_battery == "false")
                    scan_settings_scan_on_battery = "Nein";

                if (scan_settings_network_drives == "true")
                    scan_settings_network_drives = "Ja";
                else if (scan_settings_network_drives == "false")
                    scan_settings_network_drives = "Nein";

                if (scan_settings_removable_disks == "true")
                    scan_settings_removable_disks = "Ja";
                else if (scan_settings_removable_disks == "false")
                    scan_settings_removable_disks = "Nein";

                if (scan_settings_update_signatures == "true")
                    scan_settings_update_signatures = "Ja";
                else if (scan_settings_update_signatures == "false")
                    scan_settings_update_signatures = "Nein";

                Antivirus_Scan_Jobs_Entity antivirus_scan_jobs_entity = new Antivirus_Scan_Jobs_Entity
                    {
                        name = _object["name"].ToString(),
                        date = _object["date"].ToString(),
                        description = _object["description"].ToString(),
                        time_scheduler_type = time_scheduler_type,
                        time_scheduler_time = _object["time_scheduler_time"].ToString(),
                        time_scheduler_monday = time_scheduler_monday,
                        time_scheduler_tuesday = time_scheduler_tuesday,
                        time_scheduler_wednesday = time_scheduler_wednesday,
                        time_scheduler_thursday = time_scheduler_thursday,
                        time_scheduler_friday = time_scheduler_friday,
                        time_scheduler_saturday = time_scheduler_saturday,
                        time_scheduler_sunday = time_scheduler_sunday,
                        scan_type = scan_type,
                        scan_settings_cpu_usage = scan_settings_cpu_usage,
                        scan_settings_scan_on_battery = scan_settings_scan_on_battery,
                        scan_settings_network_drives = scan_settings_network_drives,
                        scan_settings_removable_disks = scan_settings_removable_disks,
                        scan_settings_update_signatures = scan_settings_update_signatures,
                        scan_directories_json = _object["scan_directories_json"].ToString(),
                    };

                antivirus_scan_jobs_mysql_data.Add(antivirus_scan_jobs_entity);
            }
        }
        catch (Exception ex)
        {
            Logging.Handler.Error("/policy_settings -> Antivirus_Scan_Jobs_Load", "Result", ex.Message);
        }
    }

    private async Task Antivirus_Scan_Jobs_Export_Table_Dialog()
    {
        //await Show_Export_Table_Dialog("applications_installed");
    }

    private async Task Antivirus_Scan_Job_Add_Dialog()
    {
        await localStorage.SetItemAsync("temp_antivirus_scan_jobs_json", antivirus_scan_jobs_json);

        var options = new DialogOptions
            {
                DisableBackdropClick = false,
                MaxWidth = MaxWidth.Small,
                ClassBackground = "dialog-blurring",
            };

        var result = await this.DialogService.Show<Pages.Policy_Management.Antivirus.Scan_Jobs.Add_Scan_Job_Dialog>(string.Empty, new DialogParameters(), options).Result;

        if (result.Cancelled)
            return;

        Logging.Handler.Debug("/policy_settings -> Add_Scan_Job_Dialog", "Result", result.Data.ToString());

        if (String.IsNullOrEmpty(result.Data.ToString()) == false && result.Data.ToString() != "error")
        {
            antivirus_scan_jobs_json = result.Data.ToString();

            await Antivirus_Scan_Jobs_Load();
        }
    }

    private async Task Antivirus_Scan_Job_Edit_Dialog(string scan_job)
    {
        await localStorage.SetItemAsync("temp_antivirus_scan_job", scan_job);
        await localStorage.SetItemAsync("temp_antivirus_scan_jobs_json", antivirus_scan_jobs_json);

        var options = new DialogOptions
            {
                DisableBackdropClick = false,
                MaxWidth = MaxWidth.Small,
                ClassBackground = "dialog-blurring",

            };

        var result = await this.DialogService.Show<Pages.Policy_Management.Antivirus.Scan_Jobs.Edit_Scan_Job_Dialog>(string.Empty, new DialogParameters(), options).Result;

        if (result.Cancelled)
            return;

        Logging.Handler.Debug("/policy_settings -> Edit_Exclusion_Dialog", "Result", result.Data.ToString() ?? String.Empty);

        if (String.IsNullOrEmpty(result.Data.ToString()) == false && result.Data.ToString() != "error")
        {
            antivirus_scan_jobs_json = result.Data.ToString();

            await Antivirus_Scan_Jobs_Load();
        }
    }

    private async Task Antivirus_Scan_Job_Delete_Dialog(string scan_job)
    {
        await localStorage.SetItemAsync("temp_antivirus_scan_job", scan_job);
        await localStorage.SetItemAsync("temp_antivirus_scan_jobs_json", antivirus_scan_jobs_json);

        var options = new DialogOptions
            {
                DisableBackdropClick = false,
                MaxWidth = MaxWidth.Small,
                ClassBackground = "dialog-blurring",

            };

        var result = await this.DialogService.Show<Pages.Policy_Management.Antivirus.Scan_Jobs.Delete_Scan_Job_Dialog>(string.Empty, new DialogParameters(), options).Result;

        if (result.Cancelled)
            return;

        Logging.Handler.Debug("/policy_settings -> Delete_Exclusion_Dialog", "Result", result.Data.ToString());

        if (String.IsNullOrEmpty(result.Data.ToString()) == false && result.Data.ToString() != "error")
        {
            antivirus_scan_jobs_json = result.Data.ToString();

            await Antivirus_Scan_Jobs_Load();
        }
    }

    #endregion

    #region Antivirus Controlled Folder Access Table

    #region Antivirus Controlled Folder Access Folders
    private string antivirus_controlled_folder_access_folders_json = String.Empty;

    public List<Antivirus_Controlled_Folder_Access_Folders_Entity> antivirus_controlled_folder_access_folders_mysql_data;

    public class Antivirus_Controlled_Folder_Access_Folders_Entity
    {
        public string folder { get; set; } = String.Empty;
        public string date { get; set; } = String.Empty;
        public string description { get; set; } = String.Empty;
    }

    private string antivirus_controlled_folder_access_folders_table_view_port = "70vh";
    private string antivirus_controlled_folder_access_folders_table_sorted_column;
    private string antivirus_controlled_folder_access_folders_table_search_string = "";

    private MudDatePicker antivirus_controlled_folder_access_folders_date_picker;

    private bool Antivirus_Controlled_Folder_Access_Folders_Table_Filter_Func(Antivirus_Controlled_Folder_Access_Folders_Entity row)
    {
        if (string.IsNullOrEmpty(antivirus_controlled_folder_access_folders_table_search_string))
            return true;

        //Search logic for each column
        return row.folder.Contains(antivirus_controlled_folder_access_folders_table_search_string, StringComparison.OrdinalIgnoreCase) ||
            row.date.Contains(antivirus_controlled_folder_access_folders_table_search_string, StringComparison.OrdinalIgnoreCase) ||
            row.description.Contains(antivirus_controlled_folder_access_folders_table_search_string, StringComparison.OrdinalIgnoreCase);
    }

    private string antivirus_controlled_folder_access_folders_selectedRowContent = ""; // Hier wird der Inhalt der ausgewählten Zeile gespeichert

    // Der Handler für den TableRowClick-Event
    private void Antivirus_Controlled_Folder_Access_Folders_RowClickHandler(Antivirus_Controlled_Folder_Access_Folders_Entity row)
    {
        antivirus_controlled_folder_access_folders_selectedRowContent = row.folder;
    }

    private string Antivirus_Controlled_Folder_Access_Folders_GetRowClass(Antivirus_Controlled_Folder_Access_Folders_Entity row)
    {
        return row.folder == antivirus_controlled_folder_access_folders_selectedRowContent ? "selected-row" : "";
    }

    private async Task Antivirus_Controlled_Folder_Access_Folders_Load()
    {
        try
        {
            antivirus_controlled_folder_access_folders_mysql_data = new List<Antivirus_Controlled_Folder_Access_Folders_Entity>();

            JsonArray antivirus_controlled_folder_access_folders_array = JsonNode.Parse(antivirus_controlled_folder_access_folders_json).AsArray();

            foreach (var _object in antivirus_controlled_folder_access_folders_array)
            {
                Antivirus_Controlled_Folder_Access_Folders_Entity antivirus_controlled_folder_access_folders_entity = new Antivirus_Controlled_Folder_Access_Folders_Entity
                    {
                        folder = _object["folder"].ToString(),
                        date = _object["date"].ToString(),
                        description = _object["description"].ToString(),
                    };

                antivirus_controlled_folder_access_folders_mysql_data.Add(antivirus_controlled_folder_access_folders_entity);
            }
        }
        catch (Exception ex)
        {
            Logging.Handler.Error("/policy_settings -> Antivirus_Controlled_Folder_Access_Folders_Load", "Result", ex.Message);
        }
    }

    public List<string> antivirus_controlled_folder_access_rulesets = new List<string> { };

    private async Task Get_Antivirus_Controlled_Folder_Access_Rulesets()
    {
        MySqlConnection conn = new MySqlConnection(Application_Settings.connectionString);

        try
        {
            await conn.OpenAsync();

            MySqlCommand command = new MySqlCommand("SELECT * FROM antivirus_controlled_folder_access_rulesets;", conn);
            using (DbDataReader reader = await command.ExecuteReaderAsync())
            {
                if (reader.HasRows)
                {
                    while (await reader.ReadAsync())
                    {
                       antivirus_controlled_folder_access_rulesets.Add(reader["name"].ToString());
                    }
                }
            }
        }
        catch (Exception ex)
        {
            Logging.Handler.Error("/policy_settings -> Get_Antivirus_Controlled_Folder_Access_Rulesets", "Result", ex.Message);
        }
        finally
        {
            conn.Close();
        }
    }
    
    private async Task Antivirus_Controlled_Folder_Access_Folders_Export_Table_Dialog()
    {
        //await Show_Export_Table_Dialog("applications_installed");
    }

    private async Task Antivirus_Controlled_Folder_Access_Folders_Add_Dialog()
    {
        await localStorage.SetItemAsync("temp_antivirus_controlled_folder_access_folders_json", antivirus_controlled_folder_access_folders_json);

        var options = new DialogOptions
            {
                DisableBackdropClick = false,
                MaxWidth = MaxWidth.Small,
                ClassBackground = "dialog-blurring",
            };

        var result = await this.DialogService.Show<Pages.Policy_Management.Antivirus.Controlled_Folder_Access_Folders.Add_Controlled_Folder_Access_Folders_Dialog>(string.Empty, new DialogParameters(), options).Result;

        if (result.Cancelled)
            return;

        Logging.Handler.Debug("/policy_settings -> Add_Controlled_Folder_Access_Folders_Dialog", "Result", result.Data.ToString());

        if (String.IsNullOrEmpty(result.Data.ToString()) == false && result.Data.ToString() != "error")
        {
            antivirus_controlled_folder_access_folders_json = result.Data.ToString();

            await Antivirus_Controlled_Folder_Access_Folders_Load();
        }
    }

    private async Task Antivirus_Controlled_Folder_Access_Folders_Edit_Dialog(string folder)
    {
        await localStorage.SetItemAsync("temp_antivirus_controlled_folder_access_folder", folder);
        await localStorage.SetItemAsync("temp_antivirus_controlled_folder_access_folders_json", antivirus_controlled_folder_access_folders_json);

        var options = new DialogOptions
            {
                DisableBackdropClick = false,
                MaxWidth = MaxWidth.Small,
                ClassBackground = "dialog-blurring",

            };

        var result = await this.DialogService.Show<Pages.Policy_Management.Antivirus.Controlled_Folder_Access_Folders.Edit_Controlled_Folder_Access_Folders_Dialog>(string.Empty, new DialogParameters(), options).Result;

        if (result.Cancelled)
            return;

        Logging.Handler.Debug("/policy_settings -> Edit_Controlled_Folder_Access_Folders_Dialog", "Result", result.Data.ToString() ?? String.Empty);

        if (String.IsNullOrEmpty(result.Data.ToString()) == false && result.Data.ToString() != "error")
        {
            antivirus_controlled_folder_access_folders_json = result.Data.ToString();

            await Antivirus_Controlled_Folder_Access_Folders_Load();
        }
    }

    private async Task Antivirus_Controlled_Folder_Access_Folders_Delete_Dialog(string folder)
    {
        await localStorage.SetItemAsync("temp_antivirus_controlled_folder_access_folder", folder);
        await localStorage.SetItemAsync("temp_antivirus_controlled_folder_access_folders_json", antivirus_controlled_folder_access_folders_json);

        var options = new DialogOptions
            {
                DisableBackdropClick = false,
                MaxWidth = MaxWidth.Small,
                ClassBackground = "dialog-blurring",

            };

        var result = await this.DialogService.Show<Pages.Policy_Management.Antivirus.Controlled_Folder_Access_Folders.Delete_Controlled_Folder_Access_Folders_Dialog>(string.Empty, new DialogParameters(), options).Result;

        if (result.Cancelled)
            return;

        Logging.Handler.Debug("/policy_settings -> Delete_Controlled_Folder_Access_Folders_Dialog", "Result", result.Data.ToString());

        if (String.IsNullOrEmpty(result.Data.ToString()) == false && result.Data.ToString() != "error")
        {
            antivirus_controlled_folder_access_folders_json = result.Data.ToString();

            await Antivirus_Controlled_Folder_Access_Folders_Load();
        }
    }
    #endregion

    #endregion

    #region Sensors
    private string sensors_json = "[ ]";

    public List<Sensors_Entity> sensors_mysql_data; //Datasource for table

    public class Sensors_Entity
    {
        public string id { get; set; } = String.Empty;
        public bool enabled { get; set; } = false;
        public string name { get; set; } = String.Empty;
        public string description { get; set; } = String.Empty;
        public string author { get; set; } = String.Empty;
        public string date { get; set; } = String.Empty;
        public string category { get; set; } = String.Empty;
        public string sub_category { get; set; } = String.Empty;
        public string severity { get; set; } = String.Empty;
    }

    public class Sensors_Activation_State
    {
        public string id { get; set; } = String.Empty;
    }

    public class Sensors_Activation_State_List
    {
        public List<Sensors_Activation_State> names { get; set; }
    }

    private string sensors_table_sorted_column;
    private string sensors_table_search_string = String.Empty;

    private bool Sensors_Table_Filter_Func(Sensors_Entity row)
    {
        if (string.IsNullOrEmpty(sensors_table_search_string))
            return true;

        //Search logic for each column
        return row.name.Contains(sensors_table_search_string, StringComparison.OrdinalIgnoreCase) ||
            row.description.Contains(sensors_table_search_string, StringComparison.OrdinalIgnoreCase) ||
            row.author.Contains(sensors_table_search_string, StringComparison.OrdinalIgnoreCase) ||
            row.date.Contains(sensors_table_search_string, StringComparison.OrdinalIgnoreCase) ||
            row.category.Contains(sensors_table_search_string, StringComparison.OrdinalIgnoreCase) ||
            row.sub_category.Contains(sensors_table_search_string, StringComparison.OrdinalIgnoreCase) ||
            row.severity.Contains(sensors_table_search_string, StringComparison.OrdinalIgnoreCase);
    }

    private string sensors_selectedRowContent = ""; // Saving content of selected row

    // Executes on row click
    private void Sensors_RowClickHandler(Sensors_Entity row)
    {
        sensors_selectedRowContent = row.name;
    }

    private string Sensors_GetRowClass(Sensors_Entity row)
    {
        return row.name == sensors_selectedRowContent ? "selected-row" : "";
    }

    private async Task Get_Sensors_Overview()
    {
        sensors_mysql_data = new List<Sensors_Entity>();

        MySqlConnection conn = new MySqlConnection(Application_Settings.connectionString);

        try
        {
            await conn.OpenAsync();

            MySqlCommand command = new MySqlCommand("SELECT * FROM sensors;", conn);
            using (DbDataReader reader = await command.ExecuteReaderAsync())
            {
                if (reader.HasRows)
                {
                    while (await reader.ReadAsync())
                    {
                        //convert computable to human readable
                        string severity_converted = String.Empty;
                        string category_converted = String.Empty;
                        string sub_category_converted = String.Empty;

                        //severity
                        if (reader["severity"].ToString() == "0")
                            severity_converted = "Niedrig";
                        else if (reader["severity"].ToString() == "1")
                            severity_converted = "Moderat";
                        else if (reader["severity"].ToString() == "2")
                            severity_converted = "Hoch";
                        else if (reader["severity"].ToString() == "3")
                            severity_converted = "Kritisch";

                        //category
                        if (reader["category"].ToString() == "0")
                            category_converted = "Auslastung";
                        else if (reader["category"].ToString() == "1")
                            category_converted = "Windows Eventlog";
                        else if (reader["category"].ToString() == "2")
                            category_converted = "PowerShell";

                        //sub_category
                        if (reader["sub_category"].ToString() == "0")
                            sub_category_converted = "Prozessor";
                        else if (reader["sub_category"].ToString() == "1")
                            sub_category_converted = "Arbeitsspeicher";
                        else if (reader["sub_category"].ToString() == "2")
                            sub_category_converted = "Laufwerk";

                        //clean categories for view
                        if (category_converted == "Windows Eventlog" || category_converted == "PowerShell")
                            sub_category_converted = "-";

                        Sensors_Entity entity = new Sensors_Entity
                        {
                            id = reader["id"].ToString() ?? String.Empty,
                            name = reader["name"].ToString() ?? String.Empty,
                            description = reader["description"].ToString() ?? String.Empty,
                            author = reader["author"].ToString() ?? String.Empty,
                            date = reader["date"].ToString() ?? String.Empty,
                            category = category_converted,
                            sub_category = sub_category_converted,
                            severity = severity_converted,
                        };

                        sensors_mysql_data.Add(entity);
                    }
                }
            }
        }
        catch (Exception ex)
        {
            Logging.Handler.Error("/policy_settings -> Get_Sensors_Overview", "Result", ex.Message);
        }
        finally
        {
            conn.Close();
        }

        //Set the activation state for the sensors
        List<Sensors_Activation_State> policy_sensors_list = JsonSerializer.Deserialize<List<Sensors_Activation_State>>(sensors_json);

        foreach (var sensor in sensors_mysql_data)
        {
            Logging.Handler.Debug("/policy_settings -> Get_Sensors_Overview", "sensor_activation_state (sensors)", sensor.id);

            foreach (var policy_sensor in policy_sensors_list)
            {
                Logging.Handler.Debug("/policy_settings -> Get_Sensors_Overview", "sensor_activation_state (policy)", policy_sensor.id);

                if (policy_sensor.id == sensor.id)
                {
                    Logging.Handler.Debug("/policy_settings -> Get_Sensors_Overview", "sensor_activation_state (enable)", policy_sensor.id);

                    sensor.enabled = true;
                }
            }
        }
    }

    private async Task Export_Sensors_Table_Dialog()
    {
        //await Show_Export_Table_Dialog("sensors");
    }

    #endregion

    #region Jobs

    private string jobs_json = "[ ]";

    public List<Jobs_Entity> jobs_mysql_data; //Datasource for table

    public class Jobs_Entity
    {
        public string id { get; set; } = String.Empty;
        public bool enabled { get; set; } = false;
        public string name { get; set; } = String.Empty;
        public string description { get; set; } = String.Empty;
        public string author { get; set; } = String.Empty;
        public string date { get; set; } = String.Empty;
        public string type { get; set; } = String.Empty;
    }

    public class Jobs_Activation_State
    {
        public string id { get; set; } = String.Empty;
    }

    public class Jobs_Activation_State_List
    {
        public List<Jobs_Activation_State> names { get; set; }
    }

    private string jobs_table_sorted_column;
    private string jobs_table_search_string = String.Empty;

    private bool Jobs_Table_Filter_Func(Jobs_Entity row)
    {
        if (string.IsNullOrEmpty(jobs_table_search_string))
            return true;

        //Search logic for each column
        return row.name.Contains(jobs_table_search_string, StringComparison.OrdinalIgnoreCase) ||
            row.description.Contains(jobs_table_search_string, StringComparison.OrdinalIgnoreCase) ||
            row.author.Contains(jobs_table_search_string, StringComparison.OrdinalIgnoreCase) ||
            row.date.Contains(jobs_table_search_string, StringComparison.OrdinalIgnoreCase) ||
            row.type.Contains(jobs_table_search_string, StringComparison.OrdinalIgnoreCase);
    }

    private string jobs_selectedRowContent = ""; // Saving content of selected row

    // Executes on row click
    private void Jobs_RowClickHandler(Jobs_Entity row)
    {
        jobs_selectedRowContent = row.name;
    }

    private string Jobs_GetRowClass(Jobs_Entity row)
    {
        return row.name == jobs_selectedRowContent ? "selected-row" : "";
    }

    private async Task Get_Jobs_Overview()
    {
        jobs_mysql_data = new List<Jobs_Entity>();

        MySqlConnection conn = new MySqlConnection(Application_Settings.connectionString);

        try
        {
            await conn.OpenAsync();

            MySqlCommand command = new MySqlCommand("SELECT * FROM jobs WHERE platform = 'Windows';", conn);
            using (DbDataReader reader = await command.ExecuteReaderAsync())
            {
                if (reader.HasRows)
                {
                    while (await reader.ReadAsync())
                    {
                        //convert computable to human readable
                        string type_converted = String.Empty;

                        //category
                        if (reader["type"].ToString() == "0")
                            type_converted = "PowerShell";

                        Jobs_Entity entity = new Jobs_Entity
                            {
                                id = reader["id"].ToString() ?? String.Empty,
                                name = reader["name"].ToString() ?? String.Empty,
                                description = reader["description"].ToString() ?? String.Empty,
                                author = reader["author"].ToString() ?? String.Empty,
                                date = reader["date"].ToString() ?? String.Empty,
                                type = type_converted,
                            };

                        jobs_mysql_data.Add(entity);
                    }
                }
            }
        }
        catch (Exception ex)
        {
            Logging.Handler.Error("/policy_settings -> Get_Jobs_Overview", "Result", ex.Message);
        }
        finally
        {
            conn.Close();
        }

        //Set the activation state for the jobs
        List<Jobs_Activation_State> policy_jobs_list = JsonSerializer.Deserialize<List<Jobs_Activation_State>>(jobs_json);

        foreach (var job in jobs_mysql_data)
        {
            Logging.Handler.Debug("/policy_settings -> Get_Jobs_Overview", "job_activation_state (jobs)", job.id);

            foreach (var policy_job in policy_jobs_list)
            {
                Logging.Handler.Debug("/policy_settings -> Get_Jobs_Overview", "job_activation_state (policy)", policy_job.id);

                if (policy_job.id == job.id)
                {
                    Logging.Handler.Debug("/policy_settings -> Get_Jobs_Overview", "job_activation_state (enable)", policy_job.id);

                    job.enabled = true;
                }
            }
        }
    }

    private async Task Export_Jobs_Table_Dialog()
    {
        //await Show_Export_Table_Dialog("jobs");
    }

    #endregion


    private async Task Show_Delete_Policy_Dialog()
    {
        var options = new DialogOptions
            {
                DisableBackdropClick = false,
                MaxWidth = MaxWidth.Small,
                ClassBackground = "dialog-blurring",
            };

        await this.DialogService.Show<Delete_Policy_Dialog>(string.Empty, new DialogParameters(), options).Result;
    }

}