@using MySqlConnector;
@using System.Data.Common;
@using System.Text.Json;

@inject NavigationManager NavigationManager
@inject ILocalStorageService localStorage
@inject IDialogService DialogService
@inject ISnackbar Snackbar
@inject IJSRuntime JSRuntime

<MudDialog Style="width: 600px;">
    <TitleContent>
        <MudText Typo="Typo.h5">Job hinzufügen</MudText>
    </TitleContent>
    <DialogContent>

        <MudTextField Label="Name" T="string" @bind-Value="@job_name" Required="true" RequiredError="Erforderlich" Immediate="@true" />
        <MudTextField Label="Beschreibung" T="string" @bind-Value="@description" Required="true" RequiredError="Erforderlich" Immediate="@true" />

        <MudSelect Class="mt-3" T="string" @bind-Value="time_scheduler_type" Label="Zeitplan" AnchorOrigin="Origin.BottomCenter">
            <MudSelectItem Value="@("Systemstart")" />
            <MudSelectItem Value="@("Datum & Uhrzeit")" />
            <MudSelectItem Value="@("Alle X Sekunden")" />
            <MudSelectItem Value="@("Alle X Minuten")" />
            <MudSelectItem Value="@("Alle X Stunden")" />
            <MudSelectItem Value="@("Datum, alle X Sekunden")" />
            <MudSelectItem Value="@("Datum, alle X Minuten")" />
            <MudSelectItem Value="@("Datum, alle X Stunden")" />
            <MudSelectItem Value="@("An den folgenden Tagen um X Uhr")" />
            <MudSelectItem Value="@("An den folgenden Tagen, alle X Sekunden")" />
            <MudSelectItem Value="@("An den folgenden Tagen, alle X Minuten")" />
            <MudSelectItem Value="@("An den folgenden Tagen, alle X Stunden")" />
        </MudSelect>

    @{
            
        if (time_scheduler_type == "Datum & Uhrzeit")
        {
            <div style="display: flex; align-items: center;">
                <MudDatePicker PickerVariant="PickerVariant.Dialog" Label="Datum" DateFormat="dd/MM/yyyy" @bind-Date="time_scheduler_date" />

                <MudTimePicker Class="ml-2" Label="Uhrzeit" @bind-Time="time_scheduler_time" />
            </div>
        }
        else if (time_scheduler_type == "Alle X Sekunden")
        {
            <MudNumericField Class="mt-3" @bind-Value="time_scheduler_seconds" Label="Sekunden" Variant="Variant.Text" Min="1" Max="9999" />
        }
        else if (time_scheduler_type == "Alle X Minuten")
        {
            <MudNumericField Class="mt-3" @bind-Value="time_scheduler_minutes" Label="Minuten" Variant="Variant.Text" Min="1" Max="9999" />
        }
        else if (time_scheduler_type == "Alle X Stunden")
        {
            <MudNumericField Class="mt-3" @bind-Value="time_scheduler_hours" Label="Stunden" Variant="Variant.Text" Min="1" Max="9999" />
        }
        else if (time_scheduler_type == "Datum, alle X Sekunden")
        {
            <div style="display: flex; align-items: center;">
                <MudDatePicker PickerVariant="PickerVariant.Dialog" Label="Datum" DateFormat="dd/MM/yyyy" @bind-Date="time_scheduler_date" />

                <MudNumericField Class="ml-2" @bind-Value="time_scheduler_seconds" Label="Sekunden" Variant="Variant.Text" Min="1" Max="9999" />
            </div>
        }
        else if (time_scheduler_type == "Datum, alle X Minuten")
        {
            <div style="display: flex; align-items: center;">
                <MudDatePicker PickerVariant="PickerVariant.Dialog" Label="Datum" DateFormat="dd/MM/yyyy" @bind-Date="time_scheduler_date" />

                <MudNumericField Class="ml-2" @bind-Value="time_scheduler_minutes" Label="Minuten" Variant="Variant.Text" Min="1" Max="9999" />
            </div>
        }
        else if (time_scheduler_type == "Datum, alle X Stunden")
        {
            <div style="display: flex; align-items: center;">
                <MudDatePicker PickerVariant="PickerVariant.Dialog" Label="Datum" DateFormat="dd/MM/yyyy" @bind-Date="time_scheduler_date" />

                <MudNumericField Class="ml-2" @bind-Value="time_scheduler_hours" Label="Stunden" Variant="Variant.Text" Min="1" Max="9999" />
            </div>
        }
        else if (time_scheduler_type == "An den folgenden Tagen um X Uhr")
        {
            <MudTimePicker Label="Uhrzeit" @bind-Time="time_scheduler_time" />

            <MudCheckBox T="bool" @bind-Value="time_scheduler_monday" Label="Montag" Color="Color.Primary" />
            <MudCheckBox T="bool" @bind-Value="time_scheduler_tuesday" Label="Dienstag" Color="Color.Primary" />
            <MudCheckBox T="bool" @bind-Value="time_scheduler_wednesday" Label="Mittwoch" Color="Color.Primary" />
            <MudCheckBox T="bool" @bind-Value="time_scheduler_thursday" Label="Donnerstag" Color="Color.Primary" />
            <MudCheckBox T="bool" @bind-Value="time_scheduler_friday" Label="Freitag" Color="Color.Primary" />
            <MudCheckBox T="bool" @bind-Value="time_scheduler_saturday" Label="Samstag" Color="Color.Primary" />
            <MudCheckBox T="bool" @bind-Value="time_scheduler_sunday" Label="Sonntag" Color="Color.Primary" />
        }
        else if (time_scheduler_type == "An den folgenden Tagen, alle X Sekunden")
        {
            <MudNumericField @bind-Value="time_scheduler_seconds" Label="Sekunden" Variant="Variant.Text" Min="1" Max="9999" />
            
            <MudCheckBox T="bool" @bind-Value="time_scheduler_monday" Label="Montag" Color="Color.Primary" />
            <MudCheckBox T="bool" @bind-Value="time_scheduler_tuesday" Label="Dienstag" Color="Color.Primary" />
            <MudCheckBox T="bool" @bind-Value="time_scheduler_wednesday" Label="Mittwoch" Color="Color.Primary" />
            <MudCheckBox T="bool" @bind-Value="time_scheduler_thursday" Label="Donnerstag" Color="Color.Primary" />
            <MudCheckBox T="bool" @bind-Value="time_scheduler_friday" Label="Freitag" Color="Color.Primary" />
            <MudCheckBox T="bool" @bind-Value="time_scheduler_saturday" Label="Samstag" Color="Color.Primary" />
            <MudCheckBox T="bool" @bind-Value="time_scheduler_sunday" Label="Sonntag" Color="Color.Primary" />
        }
        else if (time_scheduler_type == "An den folgenden Tagen, alle X Minuten")
        {
            <MudNumericField @bind-Value="time_scheduler_minutes" Label="Minuten" Variant="Variant.Text" Min="1" Max="9999" />
            
            <MudCheckBox T="bool" @bind-Value="time_scheduler_monday" Label="Montag" Color="Color.Primary" />
            <MudCheckBox T="bool" @bind-Value="time_scheduler_tuesday" Label="Dienstag" Color="Color.Primary" />
            <MudCheckBox T="bool" @bind-Value="time_scheduler_wednesday" Label="Mittwoch" Color="Color.Primary" />
            <MudCheckBox T="bool" @bind-Value="time_scheduler_thursday" Label="Donnerstag" Color="Color.Primary" />
            <MudCheckBox T="bool" @bind-Value="time_scheduler_friday" Label="Freitag" Color="Color.Primary" />
            <MudCheckBox T="bool" @bind-Value="time_scheduler_saturday" Label="Samstag" Color="Color.Primary" />
            <MudCheckBox T="bool" @bind-Value="time_scheduler_sunday" Label="Sonntag" Color="Color.Primary" />
        }
        else if (time_scheduler_type == "An den folgenden Tagen, alle X Stunden")
        {
            <MudNumericField @bind-Value="time_scheduler_hours" Label="Stunden" Variant="Variant.Text" Min="1" Max="9999" />
            
            <MudCheckBox T="bool" @bind-Value="time_scheduler_monday" Label="Montag" Color="Color.Primary" />
            <MudCheckBox T="bool" @bind-Value="time_scheduler_tuesday" Label="Dienstag" Color="Color.Primary" />
            <MudCheckBox T="bool" @bind-Value="time_scheduler_wednesday" Label="Mittwoch" Color="Color.Primary" />
            <MudCheckBox T="bool" @bind-Value="time_scheduler_thursday" Label="Donnerstag" Color="Color.Primary" />
            <MudCheckBox T="bool" @bind-Value="time_scheduler_friday" Label="Freitag" Color="Color.Primary" />
            <MudCheckBox T="bool" @bind-Value="time_scheduler_saturday" Label="Samstag" Color="Color.Primary" />
            <MudCheckBox T="bool" @bind-Value="time_scheduler_sunday" Label="Sonntag" Color="Color.Primary" />
        }

        <MudSelect Class="mt-3" T="string" @bind-Value="platform" @bind-Value:after="() => type = string.Empty" Label="Plattform" AnchorOrigin="Origin.BottomCenter">
            <MudSelectItem Value="@("Windows")" />
            <MudSelectItem Value="@("NetLock Server")" />
        </MudSelect>

        if (platform == "Windows")
        {
            <MudSelect Class="mt-3" T="string" @bind-Value="type" Label="Typ" AnchorOrigin="Origin.BottomCenter">
                <MudSelectItem Value="@("PowerShell")" />
            </MudSelect>

            if (type == "PowerShell")
            {
                <MudTextField Label="Code" T="string" Lines="15" @bind-Value="@script" Variant="Variant.Outlined" Required="false" RequiredError="Erforderlich" Immediate="@true" />   
            }        
        }
        else if (platform == "NetLock Server")
        {
            <MudSelect Class="mt-3" T="string" @bind-Value="type" Label="Typ" AnchorOrigin="Origin.BottomCenter">
                <MudSelectItem Value="@("MySQL")" />
            </MudSelect>

            if (type == "MySQL")
            {
                <MudTextField Label="Code" T="string" Lines="15" @bind-Value="@script" Variant="Variant.Outlined" Required="false" RequiredError="Erforderlich" Immediate="@true" />
            }
        }
        
    }

    </DialogContent>
    <DialogActions>
        <MudButton OnClick="Cancel">Abbrechen</MudButton>

        <MudButton Disabled="@Form_Valid()" OnClick="@this.OK" Variant="Variant.Filled" Size="@Size.Small" Color="@Color.Success">Bestätigen</MudButton>
    </DialogActions>
</MudDialog>

@code {

    protected override async Task OnInitializedAsync()
    {

    }

    private string updatedJson = String.Empty;

    private string job_name = String.Empty;
    private string description = String.Empty;
    private string platform = "Windows";
    private string type = String.Empty;
    private string script = String.Empty;

    private string time_scheduler_type = "Systemstart";
    private int time_scheduler_seconds = 10;
    private int time_scheduler_minutes = 5;
    private int time_scheduler_hours = 1;
    private TimeSpan? time_scheduler_time = new TimeSpan(12, 00, 00);
    private DateTime? time_scheduler_date = DateTime.Now;
    private bool time_scheduler_monday = false;
    private bool time_scheduler_tuesday = false;
    private bool time_scheduler_wednesday = false;
    private bool time_scheduler_thursday = false;
    private bool time_scheduler_friday = false;
    private bool time_scheduler_saturday = false;
    private bool time_scheduler_sunday = false;

    public class Job
    {
        public string name { get; set; }
        public string date { get; set; }
        public string author { get; set; }
        public string description { get; set; }
        public string platform { get; set; }
        public string type { get; set; }
        public string script { get; set; }

        public string time_scheduler_type { get; set; }
        public int time_scheduler_seconds { get; set; }
        public int time_scheduler_minutes { get; set; }
        public int time_scheduler_hours { get; set; }
        public string time_scheduler_time { get; set; }
        public string time_scheduler_date { get; set; }
        public bool time_scheduler_monday { get; set; }
        public bool time_scheduler_tuesday { get; set; }
        public bool time_scheduler_wednesday { get; set; }
        public bool time_scheduler_thursday { get; set; }
        public bool time_scheduler_friday { get; set; }
        public bool time_scheduler_saturday { get; set; }
        public bool time_scheduler_sunday { get; set; }
    }

    [CascadingParameter]
    private MudDialogInstance MudDialog { get; set; } = default!;

    private bool Form_Valid()
    {
        if (time_scheduler_type == "An den folgenden Tagen um X Uhr" || time_scheduler_type == "An den folgenden Tagen, alle X Sekunden" || time_scheduler_type == "An den folgenden Tagen, alle X Minuten" || time_scheduler_type == "An den folgenden Tagen, alle X Stunden")
        {
            if (time_scheduler_monday == false && time_scheduler_tuesday == false && time_scheduler_wednesday == false && time_scheduler_tuesday == false && time_scheduler_friday == false && time_scheduler_saturday == false && time_scheduler_sunday == false)
                return true;
        }

        if (String.IsNullOrEmpty(job_name) || String.IsNullOrEmpty(description) || String.IsNullOrEmpty(type))
            return true;
        else
            return false;
    }

    private async Task OK()
    {
        this.Snackbar.Configuration.ShowCloseIcon = true;
        this.Snackbar.Configuration.PositionClass = Defaults.Classes.Position.BottomRight;

        bool success = false;

        MySqlConnection conn = new MySqlConnection(Application_Settings.connectionString);

        try
        {
            Job job_json = new Job
                {
                    name = job_name,
                    date = DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss"),
                    author = "Placeholder",
                    description = description,
                    platform = platform,
                    type = type,
                    script = script,

                    time_scheduler_type = time_scheduler_type,
                    time_scheduler_seconds = time_scheduler_seconds,
                    time_scheduler_minutes = time_scheduler_minutes,
                    time_scheduler_hours = time_scheduler_hours,
                    time_scheduler_time = time_scheduler_time.ToString(),
                    time_scheduler_date = time_scheduler_date.ToString(),
                    time_scheduler_monday = time_scheduler_monday,
                    time_scheduler_tuesday = time_scheduler_tuesday,
                    time_scheduler_wednesday = time_scheduler_wednesday,
                    time_scheduler_thursday = time_scheduler_thursday,
                    time_scheduler_friday = time_scheduler_friday,
                    time_scheduler_saturday = time_scheduler_saturday,
                    time_scheduler_sunday = time_scheduler_sunday,
                };

            string scripts_json_string = JsonSerializer.Serialize(job_json, new JsonSerializerOptions { WriteIndented = true });

            //Save to MySQL
            await conn.OpenAsync();

            string execute_query = "INSERT INTO `jobs` (`name`, `date`, `author`, `description`, `platform`, `type`, `json`) VALUES (@name, @date, @author, @description, @platform, @type, @json);";

            MySqlCommand cmd = new MySqlCommand(execute_query, conn);

            cmd.Parameters.AddWithValue("@name", job_name);
            cmd.Parameters.AddWithValue("@date", DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss"));
            cmd.Parameters.AddWithValue("@author", await localStorage.GetItemAsync<string>("username"));
            cmd.Parameters.AddWithValue("@description", description);
            cmd.Parameters.AddWithValue("@platform", platform);
            cmd.Parameters.AddWithValue("@type", type);
            cmd.Parameters.AddWithValue("@json", scripts_json_string);

            cmd.ExecuteNonQuery();

            success = true;
        }
        catch (Exception ex)
        {
            Logging.Handler.Error("/manage_scripts (Add_Script_Dialog) -> OK", "Result", ex.Message);
        }
        finally
        {
            await conn.CloseAsync();
        }

        if (success)
        {
            this.MudDialog.Close(DialogResult.Ok("success"));
        }
        else
        {
            this.Snackbar.Add("Es ist ein Fehler aufgetreten.", Severity.Error);
            this.MudDialog.Close(DialogResult.Ok("error"));
        }
    }

    private void Cancel() => MudDialog.Cancel();
}