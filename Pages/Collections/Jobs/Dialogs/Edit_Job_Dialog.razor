@using MySqlConnector;
@using System.Data.Common;
@using System.Text.Json;

@inject NavigationManager NavigationManager
@inject ILocalStorageService localStorage
@inject IDialogService DialogService
@inject ISnackbar Snackbar
@inject IJSRuntime JSRuntime

<MudDialog Style="width: 600px;">
    <TitleContent>
        <MudText Typo="Typo.h5">Job bearbeiten</MudText>
    </TitleContent>
    <DialogContent>

        <MudTextField Label="Name" T="string" @bind-Value="@job_name" Required="true" RequiredError="Erforderlich" Immediate="@true" />
        <MudTextField Label="Beschreibung" T="string" @bind-Value="@description" Required="true" RequiredError="Erforderlich" Immediate="@true" />

        <MudSelect Class="mt-3" T="string" @bind-Value="time_scheduler_type_display" Label="Zeitplan" AnchorOrigin="Origin.BottomCenter">
            <MudSelectItem Value="@("Systemstart")" />
            <MudSelectItem Value="@("Datum & Uhrzeit")" />
            <MudSelectItem Value="@("Alle X Sekunden")" />
            <MudSelectItem Value="@("Alle X Minuten")" />
            <MudSelectItem Value="@("Alle X Stunden")" />
            <MudSelectItem Value="@("Datum, alle X Sekunden")" />
            <MudSelectItem Value="@("Datum, alle X Minuten")" />
            <MudSelectItem Value="@("Datum, alle X Stunden")" />
            <MudSelectItem Value="@("An den folgenden Tagen um X Uhr")" />
            <MudSelectItem Value="@("An den folgenden Tagen, alle X Sekunden")" />
            <MudSelectItem Value="@("An den folgenden Tagen, alle X Minuten")" />
            <MudSelectItem Value="@("An den folgenden Tagen, alle X Stunden")" />
        </MudSelect>

        @{

            if (time_scheduler_type_display == "Datum & Uhrzeit")
            {
                <div style="display: flex; align-items: center;">
                    <MudDatePicker PickerVariant="PickerVariant.Dialog" Label="Datum" DateFormat="dd/MM/yyyy" @bind-Date="time_scheduler_date" />

                    <MudTimePicker Class="ml-2" Label="Uhrzeit" @bind-Time="time_scheduler_time" />
                </div>
            }
            else if (time_scheduler_type_display == "Alle X Sekunden")
            {
                <MudNumericField Class="mt-3" @bind-Value="time_scheduler_seconds" Label="Sekunden" Variant="Variant.Text" Min="1" Max="9999" />
            }
            else if (time_scheduler_type_display == "Alle X Minuten")
            {
                <MudNumericField Class="mt-3" @bind-Value="time_scheduler_minutes" Label="Minuten" Variant="Variant.Text" Min="1" Max="9999" />
            }
            else if (time_scheduler_type_display == "Alle X Stunden")
            {
                <MudNumericField Class="mt-3" @bind-Value="time_scheduler_hours" Label="Stunden" Variant="Variant.Text" Min="1" Max="9999" />
            }
            else if (time_scheduler_type_display == "Datum, alle X Sekunden")
            {
                <div style="display: flex; align-items: center;">
                    <MudDatePicker PickerVariant="PickerVariant.Dialog" Label="Datum" DateFormat="dd/MM/yyyy" @bind-Date="time_scheduler_date" />

                    <MudNumericField Class="ml-2" @bind-Value="time_scheduler_seconds" Label="Sekunden" Variant="Variant.Text" Min="1" Max="9999" />
                </div>
            }
            else if (time_scheduler_type_display == "Datum, alle X Minuten")
            {
                <div style="display: flex; align-items: center;">
                    <MudDatePicker PickerVariant="PickerVariant.Dialog" Label="Datum" DateFormat="dd/MM/yyyy" @bind-Date="time_scheduler_date" />

                    <MudNumericField Class="ml-2" @bind-Value="time_scheduler_minutes" Label="Minuten" Variant="Variant.Text" Min="1" Max="9999" />
                </div>
            }
            else if (time_scheduler_type_display == "Datum, alle X Stunden")
            {
                <div style="display: flex; align-items: center;">
                    <MudDatePicker PickerVariant="PickerVariant.Dialog" Label="Datum" DateFormat="dd/MM/yyyy" @bind-Date="time_scheduler_date" />

                    <MudNumericField Class="ml-2" @bind-Value="time_scheduler_hours" Label="Stunden" Variant="Variant.Text" Min="1" Max="9999" />
                </div>
            }
            else if (time_scheduler_type_display == "An den folgenden Tagen um X Uhr")
            {
                <MudTimePicker Label="Uhrzeit" @bind-Time="time_scheduler_time" />

                <MudCheckBox T="bool" @bind-Value="time_scheduler_monday" Label="Montag" Color="Color.Primary" />
                <MudCheckBox T="bool" @bind-Value="time_scheduler_tuesday" Label="Dienstag" Color="Color.Primary" />
                <MudCheckBox T="bool" @bind-Value="time_scheduler_wednesday" Label="Mittwoch" Color="Color.Primary" />
                <MudCheckBox T="bool" @bind-Value="time_scheduler_thursday" Label="Donnerstag" Color="Color.Primary" />
                <MudCheckBox T="bool" @bind-Value="time_scheduler_friday" Label="Freitag" Color="Color.Primary" />
                <MudCheckBox T="bool" @bind-Value="time_scheduler_saturday" Label="Samstag" Color="Color.Primary" />
                <MudCheckBox T="bool" @bind-Value="time_scheduler_sunday" Label="Sonntag" Color="Color.Primary" />
            }
            else if (time_scheduler_type_display == "An den folgenden Tagen, alle X Sekunden")
            {
                <MudNumericField @bind-Value="time_scheduler_seconds" Label="Sekunden" Variant="Variant.Text" Min="1" Max="9999" />

                <MudCheckBox T="bool" @bind-Value="time_scheduler_monday" Label="Montag" Color="Color.Primary" />
                <MudCheckBox T="bool" @bind-Value="time_scheduler_tuesday" Label="Dienstag" Color="Color.Primary" />
                <MudCheckBox T="bool" @bind-Value="time_scheduler_wednesday" Label="Mittwoch" Color="Color.Primary" />
                <MudCheckBox T="bool" @bind-Value="time_scheduler_thursday" Label="Donnerstag" Color="Color.Primary" />
                <MudCheckBox T="bool" @bind-Value="time_scheduler_friday" Label="Freitag" Color="Color.Primary" />
                <MudCheckBox T="bool" @bind-Value="time_scheduler_saturday" Label="Samstag" Color="Color.Primary" />
                <MudCheckBox T="bool" @bind-Value="time_scheduler_sunday" Label="Sonntag" Color="Color.Primary" />
            }
            else if (time_scheduler_type_display == "An den folgenden Tagen, alle X Minuten")
            {
                <MudNumericField @bind-Value="time_scheduler_minutes" Label="Minuten" Variant="Variant.Text" Min="1" Max="9999" />

                <MudCheckBox T="bool" @bind-Value="time_scheduler_monday" Label="Montag" Color="Color.Primary" />
                <MudCheckBox T="bool" @bind-Value="time_scheduler_tuesday" Label="Dienstag" Color="Color.Primary" />
                <MudCheckBox T="bool" @bind-Value="time_scheduler_wednesday" Label="Mittwoch" Color="Color.Primary" />
                <MudCheckBox T="bool" @bind-Value="time_scheduler_thursday" Label="Donnerstag" Color="Color.Primary" />
                <MudCheckBox T="bool" @bind-Value="time_scheduler_friday" Label="Freitag" Color="Color.Primary" />
                <MudCheckBox T="bool" @bind-Value="time_scheduler_saturday" Label="Samstag" Color="Color.Primary" />
                <MudCheckBox T="bool" @bind-Value="time_scheduler_sunday" Label="Sonntag" Color="Color.Primary" />
            }
            else if (time_scheduler_type_display == "An den folgenden Tagen, alle X Stunden")
            {
                <MudNumericField @bind-Value="time_scheduler_hours" Label="Stunden" Variant="Variant.Text" Min="1" Max="9999" />

                <MudCheckBox T="bool" @bind-Value="time_scheduler_monday" Label="Montag" Color="Color.Primary" />
                <MudCheckBox T="bool" @bind-Value="time_scheduler_tuesday" Label="Dienstag" Color="Color.Primary" />
                <MudCheckBox T="bool" @bind-Value="time_scheduler_wednesday" Label="Mittwoch" Color="Color.Primary" />
                <MudCheckBox T="bool" @bind-Value="time_scheduler_thursday" Label="Donnerstag" Color="Color.Primary" />
                <MudCheckBox T="bool" @bind-Value="time_scheduler_friday" Label="Freitag" Color="Color.Primary" />
                <MudCheckBox T="bool" @bind-Value="time_scheduler_saturday" Label="Samstag" Color="Color.Primary" />
                <MudCheckBox T="bool" @bind-Value="time_scheduler_sunday" Label="Sonntag" Color="Color.Primary" />
            }

            <MudSelect Class="mt-3" T="string" @bind-Value="platform" @bind-Value:after="async () => { await Get_Scripts(); }" Label="Plattform" AnchorOrigin="Origin.BottomCenter" Immediate=@true>
                <MudSelectItem Value="@("Windows")" />
                <MudSelectItem Value="@("System")" />
            </MudSelect>

            <MudSelect Class="mt-3" T="string" @bind-Value="type_display" Label="Typ" AnchorOrigin="Origin.BottomCenter" Immediate=@true>
                @if (platform == "Windows")
                {
                    type_display = "PowerShell";
                    <MudSelectItem Value="@("PowerShell")" />
                }
                else if (platform == "System")
                {
                    type_display = "MySQL";
                    <MudSelectItem Value="@("MySQL")" />
                }
            </MudSelect>

            if (type_display == "PowerShell" || type_display == "MySQL")
            {
                <MudSelect Class="mt-3" T="string" @bind-Value="script" Label="Skript" AnchorOrigin="Origin.BottomCenter" Immediate=@true>
                    @{
                        foreach (var script in scripts_list)
                        {
                            <MudSelectItem Value="@(script.name)" />
                        }
                    }
                </MudSelect>
            }

        }

    </DialogContent>
    <DialogActions>
        <MudButton OnClick="Cancel">Abbrechen</MudButton>

        <MudButton Disabled="@Form_Valid()" OnClick="@this.OK" Variant="Variant.Filled" Size="@Size.Small" Color="@Color.Success">Bestätigen</MudButton>
    </DialogActions>
</MudDialog>

@code {

    protected override async Task OnInitializedAsync()
    {
        job_name = await localStorage.GetItemAsync<string>("temp_job_name");
        old_job_name = job_name;
        job_json = await localStorage.GetItemAsync<string>("temp_job_json");
                
        await Get_Scripts();
        await Extract_Job();
    }

    public List<Script> scripts_list;

    private string job_json = String.Empty;
    private string updatedJson = String.Empty;

    private string job_name = String.Empty;
    private string old_job_name = String.Empty;

    private string description = String.Empty;
    private string platform = "Windows";
    //private string type = String.Empty;
    private string type_display = String.Empty;
    private int script_id = 0;
    private string script = String.Empty;

    private int time_scheduler_type = 0;
    private string time_scheduler_type_display = "Systemstart";
    private int time_scheduler_seconds = 10;
    private int time_scheduler_minutes = 5;
    private int time_scheduler_hours = 1;
    private TimeSpan? time_scheduler_time = new TimeSpan(12, 00, 00);
    private DateTime? time_scheduler_date = DateTime.Now;
    private bool time_scheduler_monday = false;
    private bool time_scheduler_tuesday = false;
    private bool time_scheduler_wednesday = false;
    private bool time_scheduler_thursday = false;
    private bool time_scheduler_friday = false;
    private bool time_scheduler_saturday = false;
    private bool time_scheduler_sunday = false;

    public class Job
    {
        public string id { get; set; }
        public string name { get; set; }
        public string date { get; set; }
        public string last_run { get; set; }
        public string author { get; set; }
        public string description { get; set; }
        public string platform { get; set; }
        public string type { get; set; }
        public int script_id { get; set; }
        public string script { get; set; }

        public int time_scheduler_type { get; set; }
        public int time_scheduler_seconds { get; set; }
        public int time_scheduler_minutes { get; set; }
        public int time_scheduler_hours { get; set; }
        public string time_scheduler_time { get; set; }
        public string time_scheduler_date { get; set; }
        public bool time_scheduler_monday { get; set; }
        public bool time_scheduler_tuesday { get; set; }
        public bool time_scheduler_wednesday { get; set; }
        public bool time_scheduler_thursday { get; set; }
        public bool time_scheduler_friday { get; set; }
        public bool time_scheduler_saturday { get; set; }
        public bool time_scheduler_sunday { get; set; }
    }

    public class Script
    {
        public int id { get; set; }
        public string name { get; set; }
        public string date { get; set; }
        public string author { get; set; }
        public string description { get; set; }
        public string platform { get; set; }
        public string shell { get; set; }
        public string script { get; set; }
    }

    [CascadingParameter]
    private MudDialogInstance MudDialog { get; set; } = default!;

    private bool Form_Valid()
    {
        //human to computable time scheduler
        if (time_scheduler_type_display == "Systemstart")
            time_scheduler_type = 0;
        else if (time_scheduler_type_display == "Datum & Uhrzeit")
            time_scheduler_type = 1;
        else if (time_scheduler_type_display == "Alle X Sekunden")
            time_scheduler_type = 2;
        else if (time_scheduler_type_display == "Alle X Minuten")
            time_scheduler_type = 3;
        else if (time_scheduler_type_display == "Alle X Stunden")
            time_scheduler_type = 4;
        else if (time_scheduler_type_display == "Datum, alle X Sekunden")
            time_scheduler_type = 5;
        else if (time_scheduler_type_display == "Datum, alle X Minuten")
            time_scheduler_type = 6;
        else if (time_scheduler_type_display == "Datum, alle X Stunden")
            time_scheduler_type = 7;
        else if (time_scheduler_type_display == "An den folgenden Tagen um X Uhr")
        {
            time_scheduler_type = 8;

            if (!time_scheduler_monday && !time_scheduler_tuesday && !time_scheduler_wednesday && !time_scheduler_tuesday && !time_scheduler_friday && !time_scheduler_saturday && !time_scheduler_sunday)
                return true;
        }
        else if (time_scheduler_type_display == "An den folgenden Tagen, alle X Sekunden")
        {
            time_scheduler_type = 9;

            if (!time_scheduler_monday && !time_scheduler_tuesday && !time_scheduler_wednesday && !time_scheduler_tuesday && !time_scheduler_friday && !time_scheduler_saturday && !time_scheduler_sunday)
                return true;
        }
        else if (time_scheduler_type_display == "An den folgenden Tagen, alle X Minuten")
        {
            time_scheduler_type = 10;

            if (!time_scheduler_monday && !time_scheduler_tuesday && !time_scheduler_wednesday && !time_scheduler_tuesday && !time_scheduler_friday && !time_scheduler_saturday && !time_scheduler_sunday)
                return true;
        }
        else if (time_scheduler_type_display == "An den folgenden Tagen, alle X Stunden")
        {
            time_scheduler_type = 11;

            if (!time_scheduler_monday && !time_scheduler_tuesday && !time_scheduler_wednesday && !time_scheduler_tuesday && !time_scheduler_friday && !time_scheduler_saturday && !time_scheduler_sunday)
                return true;
        }

        if (String.IsNullOrEmpty(job_name) || String.IsNullOrEmpty(description) || String.IsNullOrEmpty(type_display))
            return true;
        else
            return false;
    }

    private async Task Extract_Job()
    {
        try
        {
            Job _object = JsonSerializer.Deserialize<Job>(job_json);

            job_name = _object.name;
            description = _object.description;
            platform = _object.platform;
            type_display = _object.type;
            script_id = _object.script_id;
            script = await Get_Script_Name(_object.script_id);
            
            //time schedule
            time_scheduler_type = _object.time_scheduler_type;
            time_scheduler_seconds = _object.time_scheduler_seconds;
            time_scheduler_minutes = _object.time_scheduler_minutes;
            time_scheduler_hours = _object.time_scheduler_hours;

            if (TimeSpan.TryParse(_object.time_scheduler_time, out TimeSpan parsedTime))
                time_scheduler_time = parsedTime;

            if (DateTime.TryParse(_object.time_scheduler_date, out DateTime parsedDate))
                time_scheduler_date = parsedDate;

            time_scheduler_monday = _object.time_scheduler_monday;
            time_scheduler_tuesday = _object.time_scheduler_tuesday;
            time_scheduler_wednesday = _object.time_scheduler_wednesday;
            time_scheduler_thursday = _object.time_scheduler_thursday;
            time_scheduler_friday = _object.time_scheduler_friday;
            time_scheduler_saturday = _object.time_scheduler_saturday;
            time_scheduler_sunday = _object.time_scheduler_sunday;

            //convert time schedule to human readable
            if (_object.time_scheduler_type == 0)
                time_scheduler_type_display = "Systemstart";
            else if (_object.time_scheduler_type == 1)
                time_scheduler_type_display = "Datum & Uhrzeit";
            else if (_object.time_scheduler_type == 2)
                time_scheduler_type_display = "Alle X Sekunden";
            else if (_object.time_scheduler_type == 3)
                time_scheduler_type_display = "Alle X Minuten";
            else if (_object.time_scheduler_type == 4)
                time_scheduler_type_display = "Alle X Stunden";
            else if (_object.time_scheduler_type == 5)
                time_scheduler_type_display = "Datum, alle X Sekunden";
            else if (_object.time_scheduler_type == 6)
                time_scheduler_type_display = "Datum, alle X Minuten";
            else if (_object.time_scheduler_type == 7)
                time_scheduler_type_display = "Datum, alle X Stunden";
            else if (_object.time_scheduler_type == 8)
                time_scheduler_type_display = "An den folgenden Tagen um X Uhr";
            else if (_object.time_scheduler_type == 9)
                time_scheduler_type_display = "An den folgenden Tagen, alle X Sekunden";
            else if (_object.time_scheduler_type == 10)
                time_scheduler_type_display = "An den folgenden Tagen, alle X Minuten";
            else if (_object.time_scheduler_type == 11)
                time_scheduler_type_display = "An den folgenden Tagen, alle X Stunden";

            if (type_display == "Script")
                type_display = "Skript";
        }
        catch (Exception ex)
        {
            Logging.Handler.Error("/manage_scripts -> Extract_Sensor", "Result", ex.Message);
        }
    }

    private async Task Get_Scripts()
    {
        scripts_list = new List<Script>();

        script = String.Empty;
        scripts_list.Clear();
        string query = "SELECT * FROM scripts WHERE platform = @platform;";

        MySqlConnection conn = new MySqlConnection(Application_Settings.connectionString);

        try
        {
            await conn.OpenAsync();

            MySqlCommand command = new MySqlCommand(query, conn);
            command.Parameters.AddWithValue("@platform", platform);

            Logging.Handler.Debug("/manage_jobs Edit_Job_Dialog) -> Get_Scripts", "MySQL_Prepared_Query", query); //Output prepared query

            using (DbDataReader reader = await command.ExecuteReaderAsync())
            {
                if (reader.HasRows)
                {
                    while (await reader.ReadAsync())
                    {
                        Logging.Handler.Debug("/manage_jobs Edit_Job_Dialog) -> Get_Scripts", "MySQL_Result", reader["json"].ToString() ?? String.Empty); //Output the JSON

                        Script script = new Script
                        {
                            id = Convert.ToInt32(reader["id"].ToString()),
                            name = reader["name"].ToString() ?? String.Empty,
                            date = reader["date"].ToString() ?? String.Empty,
                            author = reader["author"].ToString() ?? String.Empty,
                            description = reader["description"].ToString() ?? String.Empty,
                            platform = reader["platform"].ToString() ?? String.Empty,
                            shell = reader["shell"].ToString() ?? String.Empty,
                            script = reader["script"].ToString() ?? String.Empty,
                        };

                        scripts_list.Add(script);
                    }
                }
            }
        }
        catch (Exception ex)
        {
            Logging.Handler.Error("/manage_jobs Edit_Job_Dialog) -> Get_Scripts", "MySQL_Query", ex.Message);
        }
        finally
        {
            conn.Close();
            StateHasChanged();
        }
    }

    private async Task<int> Get_Script_ID(string name)
    {
        int id = 0;

        foreach (var _object in scripts_list)
        {
            if (_object.name == name)
            {
                id = _object.id;
                break;
            }
        }

        return id;
    }

    private async Task<string> Get_Script_Name(int id)
    {
        string name = String.Empty;

        foreach (var _object in scripts_list)
        {
            if (_object.id == id)
            {
                name = _object.name;
                break;
            }
        }

        return name;
    }

    private async Task<string> Get_Script_Code(int id)
    {
        string script = String.Empty;

        foreach (var _object in scripts_list)
        {
            if (_object.id == id)
            {
                script = _object.script;
                break;
            }
        }

        return script;
    }

    private async Task OK()
    {
        Form_Valid();

        this.Snackbar.Configuration.ShowCloseIcon = true;
        this.Snackbar.Configuration.PositionClass = Defaults.Classes.Position.BottomRight;

        bool success = false;

        MySqlConnection conn = new MySqlConnection(Application_Settings.connectionString);

        try
        {
            string type_converted = String.Empty;

            if (type_display == "Skript")
                type_converted = "Script";
            else
                type_converted = type_display;

            script_id = await Get_Script_ID(script);

            Job job_json = new Job
            {
                id = Randomizer.Handler.Standard(6),
                name = job_name,
                date = DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss"),
                author = "Placeholder",
                description = description,
                platform = platform,
                type = type_display,
                script_id = script_id,
                script = await Base64.Handler.Encode(await Get_Script_Code(script_id)),

                time_scheduler_type = time_scheduler_type,
                time_scheduler_seconds = time_scheduler_seconds,
                time_scheduler_minutes = time_scheduler_minutes,
                time_scheduler_hours = time_scheduler_hours,
                time_scheduler_time = time_scheduler_time.ToString(),
                time_scheduler_date = time_scheduler_date.ToString(),
                time_scheduler_monday = time_scheduler_monday,
                time_scheduler_tuesday = time_scheduler_tuesday,
                time_scheduler_wednesday = time_scheduler_wednesday,
                time_scheduler_thursday = time_scheduler_thursday,
                time_scheduler_friday = time_scheduler_friday,
                time_scheduler_saturday = time_scheduler_saturday,
                time_scheduler_sunday = time_scheduler_sunday,
            };

            string scripts_json_string = JsonSerializer.Serialize(job_json, new JsonSerializerOptions { WriteIndented = true });

            //Save to MySQL
            await conn.OpenAsync();

            string execute_query = "UPDATE jobs SET name = @name, description = @description, platform = @platform, type = @type, script_id = @script_id, json = @json WHERE name = @old_name;";

            MySqlCommand cmd = new MySqlCommand(execute_query, conn);

            cmd.Parameters.AddWithValue("@name", job_name);
            cmd.Parameters.AddWithValue("@old_name", old_job_name);
            cmd.Parameters.AddWithValue("@date", DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss"));
            cmd.Parameters.AddWithValue("@author", await localStorage.GetItemAsync<string>("username"));
            cmd.Parameters.AddWithValue("@description", description);
            cmd.Parameters.AddWithValue("@platform", platform);
            cmd.Parameters.AddWithValue("@type", type_converted);
            cmd.Parameters.AddWithValue("@script_id", script_id);
            cmd.Parameters.AddWithValue("@json", scripts_json_string);

            cmd.ExecuteNonQuery();

            success = true;
        }
        catch (Exception ex)
        {
            Logging.Handler.Error("/manage_scripts (Edit_Job_Dialog) -> OK", "Result", ex.Message);
        }
        finally
        {
            await conn.CloseAsync();
        }

        if (success)
        {
            this.MudDialog.Close(DialogResult.Ok("success"));
        }
        else
        {
            this.Snackbar.Add("Es ist ein Fehler aufgetreten.", Severity.Error);
            this.MudDialog.Close(DialogResult.Ok("error"));
        }
    }

    private void Cancel() => MudDialog.Cancel();
}