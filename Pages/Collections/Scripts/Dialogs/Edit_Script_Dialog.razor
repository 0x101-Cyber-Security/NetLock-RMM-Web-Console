@using MySqlConnector;
@using System.Data.Common;
@using System.Text.Json;

@inject NavigationManager NavigationManager
@inject ILocalStorageService localStorage
@inject IDialogService DialogService
@inject ISnackbar Snackbar

<MudDialog Style="width: 600px;">
    <TitleContent>
        <MudText Typo="Typo.h5">Script hinzufügen</MudText>
    </TitleContent>
    <DialogContent>

        <MudTextField Label="Name" T="string" @bind-Value="@script_name" Required="true" RequiredError="Erforderlich" Immediate="@true" />
        <MudTextField Label="Beschreibung" T="string" @bind-Value="@description" Required="true" RequiredError="Erforderlich" Immediate="@true" />

        <MudSelect Class="mt-3" T="string" @bind-Value="platform" Label="Plattform" AnchorOrigin="Origin.BottomCenter">
            <MudSelectItem Value="@("Windows")" />
        </MudSelect>

        <MudSelect Class="mt-3" T="string" @bind-Value="shell" Label="PowerShell" AnchorOrigin="Origin.BottomCenter">
            <MudSelectItem Value="@("PowerShell")" />
        </MudSelect>

        @{
            if (platform == "Windows")
            {
                if (shell == "PowerShell")
                {
                    <MudTextField Label="Skript" T="string" Lines="15" @bind-Value="@script" Variant="Variant.Outlined" Required="false" RequiredError="Erforderlich" Immediate="@true" />
                }
            }
        }

    </DialogContent>
    <DialogActions>
        <MudButton OnClick="Cancel">Abbrechen</MudButton>

        <MudButton Disabled="@Form_Valid()" OnClick="@this.OK" Variant="Variant.Filled" Size="@Size.Small" Color="@Color.Success">Bestätigen</MudButton>
    </DialogActions>
</MudDialog>

@code {

    protected override async Task OnInitializedAsync()
    {
        script_name = await localStorage.GetItemAsync<string>("temp_script_name");
        old_script_name = script_name;
        script_json = await localStorage.GetItemAsync<string>("temp_script_json");

        await Extract_Script();
    }

    private string updatedJson = String.Empty;

    private string script_name = String.Empty;
    private string old_script_name = String.Empty;
    private string description = String.Empty;
    private string platform = "Windows";
    private string shell = "PowerShell";
    private string script = String.Empty;
    private string script_json = String.Empty;

    public class Script
    {
        public string name { get; set; }
        public string date { get; set; }
        public string author { get; set; }
        public string description { get; set; }
        public string platform { get; set; }
        public string shell { get; set; }
        public string script { get; set; }
    }

    [CascadingParameter]
    private MudDialogInstance MudDialog { get; set; } = default!;

    private bool Form_Valid()
    {
        if (String.IsNullOrEmpty(script_name) || String.IsNullOrEmpty(description))
            return true;
        else
            return false;
    }

    private async Task Extract_Script()
    {
        try
        {
            Script _object = JsonSerializer.Deserialize<Script>(script_json);

            script_name = _object.name;
            description = _object.description;
            platform = _object.platform;
            shell = _object.shell;
            script = _object.script;
        }
        catch (Exception ex)
        {
            Logging.Handler.Error("/manage_scripts -> Extract_Sensor", "Result", ex.Message);
        }
    }

    private async Task OK()
    {
        this.Snackbar.Configuration.ShowCloseIcon = true;
        this.Snackbar.Configuration.PositionClass = Defaults.Classes.Position.BottomRight;

        bool success = false;

        MySqlConnection conn = new MySqlConnection(Application_Settings.connectionString);

        try
        {
            Script script_json = new Script
                {
                    name = script_name,
                    date = DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss"),
                    author = "Placeholder",
                    description = description,
                    platform = platform,
                    shell = shell,
                    script = script,
                };

            string scripts_json_string = JsonSerializer.Serialize(script_json, new JsonSerializerOptions { WriteIndented = true });

            //Save to MySQL
            await conn.OpenAsync();

            string execute_query = "UPDATE jobs SET name = @name, description = @description, platform = @platform, shell = @shell, json = @json WHERE name = @old_script_name;";

            MySqlCommand cmd = new MySqlCommand(execute_query, conn);

            cmd.Parameters.AddWithValue("@name", script_name);
            cmd.Parameters.AddWithValue("@old_name", old_script_name);
            cmd.Parameters.AddWithValue("@date", DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss"));
            cmd.Parameters.AddWithValue("@author", await localStorage.GetItemAsync<string>("username"));
            cmd.Parameters.AddWithValue("@description", description);
            cmd.Parameters.AddWithValue("@platform", platform);
            cmd.Parameters.AddWithValue("@shell", shell);
            cmd.Parameters.AddWithValue("@json", scripts_json_string);

            cmd.ExecuteNonQuery();

            success = true;
        }
        catch (Exception ex)
        {
            Logging.Handler.Error("/manage_scripts (Add_Script_Dialog) -> OK", "Result", ex.Message);
        }
        finally
        {
            await conn.CloseAsync();
        }

        if (success)
        {
            this.MudDialog.Close(DialogResult.Ok("success"));
        }
        else
        {
            this.Snackbar.Add("Es ist ein Fehler aufgetreten.", Severity.Error);
            this.MudDialog.Close(DialogResult.Ok("error"));
        }
    }

    private void Cancel() => MudDialog.Cancel();
}