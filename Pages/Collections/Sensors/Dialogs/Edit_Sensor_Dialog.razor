@using MySqlConnector;
@using System.Data.Common;
@using System.Text.Json;

@inject NavigationManager NavigationManager
@inject ILocalStorageService localStorage
@inject IDialogService DialogService
@inject ISnackbar Snackbar

<MudDialog Style="width: 600px;">
    <TitleContent>
        <MudText Typo="Typo.h5">Sensor hinzufügen</MudText>
    </TitleContent>
    <DialogContent>

        <MudTextField Label="Name" T="string" @bind-Value="@sensor_name" Required="true" RequiredError="Erforderlich" Immediate="@true" />
        <MudTextField Label="Beschreibung" T="string" @bind-Value="@description" Required="false" RequiredError="Erforderlich" Immediate="@true" />

        <MudSelect Class="mt-3" T="string" @bind-Value="severity" Label="Priorität" AnchorOrigin="Origin.BottomCenter">
            <MudSelectItem Value="@("Kritisch")" />
            <MudSelectItem Value="@("Hoch")" />
            <MudSelectItem Value="@("Moderat")" />
            <MudSelectItem Value="@("Niedrig")" />
        </MudSelect>

        <MudSelect Class="mt-3" T="string" @bind-Value="time_scheduler_type_display" Label="Zeitplan" AnchorOrigin="Origin.BottomCenter">
            <MudSelectItem Value="@("Systemstart")" />
            <MudSelectItem Value="@("Datum & Uhrzeit")" />
            <MudSelectItem Value="@("Alle X Sekunden")" />
            <MudSelectItem Value="@("Alle X Minuten")" />
            <MudSelectItem Value="@("Alle X Stunden")" />
            <MudSelectItem Value="@("Datum, alle X Sekunden")" />
            <MudSelectItem Value="@("Datum, alle X Minuten")" />
            <MudSelectItem Value="@("Datum, alle X Stunden")" />
            <MudSelectItem Value="@("An den folgenden Tagen um X Uhr")" />
            <MudSelectItem Value="@("An den folgenden Tagen, alle X Sekunden")" />
            <MudSelectItem Value="@("An den folgenden Tagen, alle X Minuten")" />
            <MudSelectItem Value="@("An den folgenden Tagen, alle X Stunden")" />
        </MudSelect>

        @{
            if (time_scheduler_type_display == "Datum & Uhrzeit")
            {
                <div style="display: flex; align-items: center;">
                    <MudDatePicker PickerVariant="PickerVariant.Dialog" Label="Datum" DateFormat="dd/MM/yyyy" @bind-Date="time_scheduler_date" />

                    <MudTimePicker Class="ml-2" Label="Uhrzeit" @bind-Time="time_scheduler_time" />
                </div>
            }
            else if (time_scheduler_type_display == "Alle X Sekunden")
            {
                <MudNumericField Class="mt-3" @bind-Value="time_scheduler_seconds" Label="Sekunden" Variant="Variant.Text" Min="1" Max="9999" />
            }
            else if (time_scheduler_type_display == "Alle X Minuten")
            {
                <MudNumericField Class="mt-3" @bind-Value="time_scheduler_minutes" Label="Minuten" Variant="Variant.Text" Min="1" Max="9999" />
            }
            else if (time_scheduler_type_display == "Alle X Stunden")
            {
                <MudNumericField Class="mt-3" @bind-Value="time_scheduler_hours" Label="Stunden" Variant="Variant.Text" Min="1" Max="9999" />
            }
            else if (time_scheduler_type_display == "Datum, alle X Sekunden")
            {
                <div style="display: flex; align-items: center;">
                    <MudDatePicker PickerVariant="PickerVariant.Dialog" Label="Datum" DateFormat="dd/MM/yyyy" @bind-Date="time_scheduler_date" />

                    <MudNumericField Class="ml-2" @bind-Value="time_scheduler_seconds" Label="Sekunden" Variant="Variant.Text" Min="1" Max="9999" />
                </div>
            }
            else if (time_scheduler_type_display == "Datum, alle X Minuten")
            {
                <div style="display: flex; align-items: center;">
                    <MudDatePicker PickerVariant="PickerVariant.Dialog" Label="Datum" DateFormat="dd/MM/yyyy" @bind-Date="time_scheduler_date" />

                    <MudNumericField Class="ml-2" @bind-Value="time_scheduler_minutes" Label="Minuten" Variant="Variant.Text" Min="1" Max="9999" />
                </div>
            }
            else if (time_scheduler_type_display == "Datum, alle X Stunden")
            {
                <div style="display: flex; align-items: center;">
                    <MudDatePicker PickerVariant="PickerVariant.Dialog" Label="Datum" DateFormat="dd/MM/yyyy" @bind-Date="time_scheduler_date" />

                    <MudNumericField Class="ml-2" @bind-Value="time_scheduler_hours" Label="Stunden" Variant="Variant.Text" Min="1" Max="9999" />
                </div>
            }
            else if (time_scheduler_type_display == "An den folgenden Tagen um X Uhr")
            {
                <MudTimePicker Label="Uhrzeit" @bind-Time="time_scheduler_time" />

                <MudCheckBox T="bool" @bind-Value="time_scheduler_monday" Label="Montag" Color="Color.Primary" />
                <MudCheckBox T="bool" @bind-Value="time_scheduler_tuesday" Label="Dienstag" Color="Color.Primary" />
                <MudCheckBox T="bool" @bind-Value="time_scheduler_wednesday" Label="Mittwoch" Color="Color.Primary" />
                <MudCheckBox T="bool" @bind-Value="time_scheduler_thursday" Label="Donnerstag" Color="Color.Primary" />
                <MudCheckBox T="bool" @bind-Value="time_scheduler_friday" Label="Freitag" Color="Color.Primary" />
                <MudCheckBox T="bool" @bind-Value="time_scheduler_saturday" Label="Samstag" Color="Color.Primary" />
                <MudCheckBox T="bool" @bind-Value="time_scheduler_sunday" Label="Sonntag" Color="Color.Primary" />
            }
            else if (time_scheduler_type_display == "An den folgenden Tagen, alle X Sekunden")
            {
                <MudNumericField @bind-Value="time_scheduler_seconds" Label="Sekunden" Variant="Variant.Text" Min="1" Max="9999" />

                <MudCheckBox T="bool" @bind-Value="time_scheduler_monday" Label="Montag" Color="Color.Primary" />
                <MudCheckBox T="bool" @bind-Value="time_scheduler_tuesday" Label="Dienstag" Color="Color.Primary" />
                <MudCheckBox T="bool" @bind-Value="time_scheduler_wednesday" Label="Mittwoch" Color="Color.Primary" />
                <MudCheckBox T="bool" @bind-Value="time_scheduler_thursday" Label="Donnerstag" Color="Color.Primary" />
                <MudCheckBox T="bool" @bind-Value="time_scheduler_friday" Label="Freitag" Color="Color.Primary" />
                <MudCheckBox T="bool" @bind-Value="time_scheduler_saturday" Label="Samstag" Color="Color.Primary" />
                <MudCheckBox T="bool" @bind-Value="time_scheduler_sunday" Label="Sonntag" Color="Color.Primary" />
            }
            else if (time_scheduler_type_display == "An den folgenden Tagen, alle X Minuten")
            {
                <MudNumericField @bind-Value="time_scheduler_minutes" Label="Minuten" Variant="Variant.Text" Min="1" Max="9999" />

                <MudCheckBox T="bool" @bind-Value="time_scheduler_monday" Label="Montag" Color="Color.Primary" />
                <MudCheckBox T="bool" @bind-Value="time_scheduler_tuesday" Label="Dienstag" Color="Color.Primary" />
                <MudCheckBox T="bool" @bind-Value="time_scheduler_wednesday" Label="Mittwoch" Color="Color.Primary" />
                <MudCheckBox T="bool" @bind-Value="time_scheduler_thursday" Label="Donnerstag" Color="Color.Primary" />
                <MudCheckBox T="bool" @bind-Value="time_scheduler_friday" Label="Freitag" Color="Color.Primary" />
                <MudCheckBox T="bool" @bind-Value="time_scheduler_saturday" Label="Samstag" Color="Color.Primary" />
                <MudCheckBox T="bool" @bind-Value="time_scheduler_sunday" Label="Sonntag" Color="Color.Primary" />
            }
            else if (time_scheduler_type_display == "An den folgenden Tagen, alle X Stunden")
            {
                <MudNumericField @bind-Value="time_scheduler_hours" Label="Stunden" Variant="Variant.Text" Min="1" Max="9999" />

                <MudCheckBox T="bool" @bind-Value="time_scheduler_monday" Label="Montag" Color="Color.Primary" />
                <MudCheckBox T="bool" @bind-Value="time_scheduler_tuesday" Label="Dienstag" Color="Color.Primary" />
                <MudCheckBox T="bool" @bind-Value="time_scheduler_wednesday" Label="Mittwoch" Color="Color.Primary" />
                <MudCheckBox T="bool" @bind-Value="time_scheduler_thursday" Label="Donnerstag" Color="Color.Primary" />
                <MudCheckBox T="bool" @bind-Value="time_scheduler_friday" Label="Freitag" Color="Color.Primary" />
                <MudCheckBox T="bool" @bind-Value="time_scheduler_saturday" Label="Samstag" Color="Color.Primary" />
                <MudCheckBox T="bool" @bind-Value="time_scheduler_sunday" Label="Sonntag" Color="Color.Primary" />
            }

        }

        <MudSelect Class="mt-3" T="string" @bind-Value="category" Label="Kategorie" AnchorOrigin="Origin.BottomCenter">
            <MudSelectItem Value="@("Auslastung")" />
            <MudSelectItem Value="@("Windows Eventlog")" />
            <MudSelectItem Value="@("PowerShell")" />
            <MudSelectItem Value="@("Dienst")" />
            <MudSelectItem Value="@("Ping")" />
        </MudSelect>

        @{
            if (category == "Auslastung")
            {
                <MudSelect Class="mt-3" T="string" @bind-Value="sub_category" Label="Unterkategorie" AnchorOrigin="Origin.BottomCenter">
                    <MudSelectItem Value="@("Prozessor")" />
                    <MudSelectItem Value="@("Arbeitsspeicher")" />
                    <MudSelectItem Value="@("Laufwerk")" />
                    <MudSelectItem Value="@("Prozess-CPU-Nutzung (%)")" />
                    <MudSelectItem Value="@("Prozess-RAM-Nutzung (%)")" />
                    <MudSelectItem Value="@("Prozess-RAM-Nutzung (MB)")" />
                </MudSelect>

                if (sub_category == "Prozessor")
                {
                    <MudText Class="mt-5" Typo="Typo.h6">Regel</MudText>

                    <MudSlider Class="mt-3" @bind-Value="cpu_usage" ValueLabel="true" Min="5" Step="5" Style="width: 97%;">Auslastung (@cpu_usage%)</MudSlider>

                    <div style="display: flex; align-items: center;">
                        <MudNumericField Class="mt-3" @bind-Value="notification_treshold_max" Label="Benachrichtigung ab X Schwellenwert Überschreitungen." Variant="Variant.Text" Min="0" Max="9999" />

                        <MudTooltip Text="Wie viele Schwellenwert Überschreitungen erforderlich sind, bis eine Benachrichtung versendet wird.">
                            <MudIconButton Class="ml-2 mt-5" Icon="@Icons.Material.Filled.Info" Variant="Variant.Text" Size="Size.Small" Color="Color.Default"></MudIconButton>
                        </MudTooltip>
                    </div>

                    <MudText Class="mt-5" Typo="Typo.h6">Aktion</MudText>

                    <MudSelect Class="mt-3" T="string" @bind-Value="script_action" Label="Skript" AnchorOrigin="Origin.BottomCenter" Immediate=@true>
                        @{
                            foreach (var script in scripts_list)
                            {
                                <MudSelectItem Value="@(script.name)" />
                            }
                        }
                    </MudSelect>

                    <div style="display: flex; align-items: center;">
                        <MudNumericField Class="mt-3" @bind-Value="action_treshold_max" Label="Aktion ab X Schwellenwert Überschreitungen." Variant="Variant.Text" Min="0" Max="9999" />

                        <MudTooltip Text="Wie viele aufeinanderfolgende Schwellenwert Überschreitungen erforderlich sind, bis die PowerShell Code Aktion ausgeführt wird.">
                            <MudIconButton Class="ml-2 mt-5" Icon="@Icons.Material.Filled.Info" Variant="Variant.Text" Size="Size.Small" Color="Color.Default"></MudIconButton>
                        </MudTooltip>
                    </div>
                }
                else if (sub_category == "Prozess-CPU-Nutzung (%)")
                {
                    <MudText Class="mt-5" Typo="Typo.h6">Regel</MudText>

                    <div style="display: flex; align-items: center;">
                        <MudTextField Label="Prozess Name" T="string" @bind-Value="@process_name" Required="true" RequiredError="Erforderlich" Immediate="@true" />

                        <MudTooltip Text="Beispiel: explorer.exe">
                            <MudIconButton Class="ml-2 mt-5" Icon="@Icons.Material.Filled.Info" Variant="Variant.Text" Size="Size.Small" Color="Color.Default"></MudIconButton>
                        </MudTooltip>
                    </div>

                    <MudSlider Class="mt-3" @bind-Value="cpu_usage" ValueLabel="true" Min="5" Step="5" Style="width: 97%;">Auslastung (%)</MudSlider>

                    <div style="display: flex; align-items: center;">
                        <MudNumericField Class="mt-3" @bind-Value="notification_treshold_max" Label="Benachrichtigung ab X Schwellenwert Überschreitungen." Variant="Variant.Text" Min="0" Max="9999" />

                        <MudTooltip Text="Wie viele Schwellenwert Überschreitungen erforderlich sind, bis eine Benachrichtung versendet wird.">
                            <MudIconButton Class="ml-2 mt-5" Icon="@Icons.Material.Filled.Info" Variant="Variant.Text" Size="Size.Small" Color="Color.Default"></MudIconButton>
                        </MudTooltip>
                    </div>

                    <MudText Class="mt-5" Typo="Typo.h6">Aktion</MudText>

                    <MudSelect Class="mt-3" T="string" @bind-Value="script_action" Label="Skript" AnchorOrigin="Origin.BottomCenter" Immediate=@true>
                        @{
                            foreach (var script in scripts_list)
                            {
                                <MudSelectItem Value="@(script.name)" />
                            }
                        }
                    </MudSelect>

                    <div style="display: flex; align-items: center;">
                        <MudNumericField Class="mt-3" @bind-Value="action_treshold_max" Label="Aktion ab X Schwellenwert Überschreitungen." Variant="Variant.Text" Min="0" Max="9999" />

                        <MudTooltip Text="Wie viele aufeinanderfolgende Schwellenwert Überschreitungen erforderlich sind, bis die PowerShell Code Aktion ausgeführt wird.">
                            <MudIconButton Class="ml-2 mt-5" Icon="@Icons.Material.Filled.Info" Variant="Variant.Text" Size="Size.Small" Color="Color.Default"></MudIconButton>
                        </MudTooltip>
                    </div>
                }
                else if (sub_category == "Prozess-RAM-Nutzung (%)")
                {
                    <MudText Class="mt-5" Typo="Typo.h6">Regel</MudText>

                    <div style="display: flex; align-items: center;">
                        <MudTextField Label="Prozess Name" T="string" @bind-Value="@process_name" Required="true" RequiredError="Erforderlich" Immediate="@true" />

                        <MudTooltip Text="Beispiel: explorer.exe">
                            <MudIconButton Class="ml-2 mt-5" Icon="@Icons.Material.Filled.Info" Variant="Variant.Text" Size="Size.Small" Color="Color.Default"></MudIconButton>
                        </MudTooltip>
                    </div>

                    <MudSlider @bind-Value="ram_usage" ValueLabel="true" Min="5" Step="5" Style="width: 97%;">Auslastung (%)</MudSlider>

                    <div style="display: flex; align-items: center;">
                        <MudNumericField Class="mt-3" @bind-Value="notification_treshold_max" Label="Benachrichtigung ab X Schwellenwert Überschreitungen." Variant="Variant.Text" Min="0" Max="9999" />

                        <MudTooltip Text="Wie viele Schwellenwert Überschreitungen erforderlich sind, bis eine Benachrichtung versendet wird.">
                            <MudIconButton Class="ml-2 mt-5" Icon="@Icons.Material.Filled.Info" Variant="Variant.Text" Size="Size.Small" Color="Color.Default"></MudIconButton>
                        </MudTooltip>
                    </div>

                    <MudText Class="mt-5" Typo="Typo.h6">Aktion</MudText>

                    <MudSelect Class="mt-3" T="string" @bind-Value="script_action" Label="Skript" AnchorOrigin="Origin.BottomCenter" Immediate=@true>
                        @{
                            foreach (var script in scripts_list)
                            {
                                <MudSelectItem Value="@(script.name)" />
                            }
                        }
                    </MudSelect>

                    <div style="display: flex; align-items: center;">
                        <MudNumericField Class="mt-3" @bind-Value="action_treshold_max" Label="Aktion ab X Schwellenwert Überschreitungen." Variant="Variant.Text" Min="0" Max="9999" />

                        <MudTooltip Text="Wie viele aufeinanderfolgende Schwellenwert Überschreitungen erforderlich sind, bis die PowerShell Code Aktion ausgeführt wird.">
                            <MudIconButton Class="ml-2 mt-5" Icon="@Icons.Material.Filled.Info" Variant="Variant.Text" Size="Size.Small" Color="Color.Default"></MudIconButton>
                        </MudTooltip>
                    </div>
                }
                else if (sub_category == "Prozess-RAM-Nutzung (MB)")
                {
                    <MudText Class="mt-5" Typo="Typo.h6">Regel</MudText>

                    <div style="display: flex; align-items: center;">
                        <MudTextField Label="Prozess Name" T="string" @bind-Value="@process_name" Required="true" RequiredError="Erforderlich" Immediate="@true" />

                        <MudTooltip Text="Beispiel: explorer.exe">
                            <MudIconButton Class="ml-2 mt-5" Icon="@Icons.Material.Filled.Info" Variant="Variant.Text" Size="Size.Small" Color="Color.Default"></MudIconButton>
                        </MudTooltip>
                    </div>

                    <MudNumericField @bind-Value="ram_usage" Label="MB" Variant="Variant.Text" Min="1" Max="999999" />

                    <div style="display: flex; align-items: center;">
                        <MudNumericField Class="mt-3" @bind-Value="notification_treshold_max" Label="Benachrichtigung ab X Schwellenwert Überschreitungen." Variant="Variant.Text" Min="0" Max="9999" />

                        <MudTooltip Text="Wie viele Schwellenwert Überschreitungen erforderlich sind, bis eine Benachrichtung versendet wird.">
                            <MudIconButton Class="ml-2 mt-5" Icon="@Icons.Material.Filled.Info" Variant="Variant.Text" Size="Size.Small" Color="Color.Default"></MudIconButton>
                        </MudTooltip>
                    </div>

                    <MudText Class="mt-5" Typo="Typo.h6">Aktion</MudText>

                    <MudSelect Class="mt-3" T="string" @bind-Value="script_action" Label="Skript" AnchorOrigin="Origin.BottomCenter" Immediate=@true>
                        @{
                            foreach (var script in scripts_list)
                            {
                                <MudSelectItem Value="@(script.name)" />
                            }
                        }
                    </MudSelect>

                    <div style="display: flex; align-items: center;">
                        <MudNumericField Class="mt-3" @bind-Value="action_treshold_max" Label="Aktion ab X Schwellenwert Überschreitungen." Variant="Variant.Text" Min="0" Max="9999" />

                        <MudTooltip Text="Wie viele aufeinanderfolgende Schwellenwert Überschreitungen erforderlich sind, bis die PowerShell Code Aktion ausgeführt wird.">
                            <MudIconButton Class="ml-2 mt-5" Icon="@Icons.Material.Filled.Info" Variant="Variant.Text" Size="Size.Small" Color="Color.Default"></MudIconButton>
                        </MudTooltip>
                    </div>
                }
                else if (sub_category == "Arbeitsspeicher")
                {
                    <MudText Class="mt-5" Typo="Typo.h6">Regel</MudText>

                    <MudSlider @bind-Value="ram_usage" ValueLabel="true" Min="5" Step="5" Style="width: 97%;">Auslastung (%)</MudSlider>

                    <div style="display: flex; align-items: center;">
                        <MudNumericField Class="mt-3" @bind-Value="notification_treshold_max" Label="Benachrichtigung ab X Schwellenwert Überschreitungen." Variant="Variant.Text" Min="0" Max="9999" />

                        <MudTooltip Text="Wie viele Schwellenwert Überschreitungen erforderlich sind, bis eine Benachrichtung versendet wird.">
                            <MudIconButton Class="ml-2 mt-5" Icon="@Icons.Material.Filled.Info" Variant="Variant.Text" Size="Size.Small" Color="Color.Default"></MudIconButton>
                        </MudTooltip>
                    </div>

                    <MudText Class="mt-5" Typo="Typo.h6">Aktion</MudText>

                    <MudSelect Class="mt-3" T="string" @bind-Value="script_action" Label="Skript" AnchorOrigin="Origin.BottomCenter" Immediate=@true>
                        @{
                            foreach (var script in scripts_list)
                            {
                                <MudSelectItem Value="@(script.name)" />
                            }
                        }
                    </MudSelect>

                    <div style="display: flex; align-items: center;">
                        <MudNumericField Class="mt-3" @bind-Value="action_treshold_max" Label="Aktion ab X Schwellenwert Überschreitungen." Variant="Variant.Text" Min="0" Max="9999" />

                        <MudTooltip Text="Wie viele aufeinanderfolgende Schwellenwert Überschreitungen erforderlich sind, bis die PowerShell Code Aktion ausgeführt wird.">
                            <MudIconButton Class="ml-2 mt-5" Icon="@Icons.Material.Filled.Info" Variant="Variant.Text" Size="Size.Small" Color="Color.Default"></MudIconButton>
                        </MudTooltip>
                    </div>
                }
                else if (sub_category == "Laufwerk")
                {
                    <MudSelect Class="mt-3" T="string" @bind-Value="disk_category" Label="Wenn..." AnchorOrigin="Origin.BottomCenter">
                        <MudSelectItem Value="@("Mehr als X GB belegt")" />
                        <MudSelectItem Value="@("Weniger als X GB frei")" />
                        <MudSelectItem Value="@("Mehr als X Prozent belegt")" />
                        <MudSelectItem Value="@("Weniger als X Prozent frei")" />
                    </MudSelect>

                    if (!String.IsNullOrEmpty(disk_category))
                    {
                        <MudText Class="mt-5" Typo="Typo.h6">Regel</MudText>

                        <div style="display: flex; align-items: center;">
                            <MudTextField Label="Laufwerk Buchstaben" T="string" @bind-Value="@disk_letters" Variant="Variant.Text" Required="false" RequiredError="Erforderlich" Immediate="@true" />

                            <MudTooltip Text="Buchstaben werden durch Komma getrennt. Zum Beispiel: C,D,G Wird kein Buchstabe angegeben, werden alle Laufwerke überprüft.">
                                <MudIconButton Class="ml-2 mt-5" Icon="@Icons.Material.Filled.Info" Variant="Variant.Text" Size="Size.Small" Color="Color.Default"></MudIconButton>
                            </MudTooltip>
                        </div>

                        <div style="display: flex; align-items: center;">
                            <MudNumericField Class="mt-3" @bind-Value="disk_minimum_capacity" Label="Nur Laufwerke ab einer Kapazität von X Gigabyte prüfen." Variant="Variant.Text" Min="0" Max="9999" />

                            <MudTooltip Text="Bestimmt wie viel Kapazität ein Laufwerk (Partition) mindestens haben muss, damit es überwacht wird. 0 = egal.">
                                <MudIconButton Class="ml-2 mt-5" Icon="@Icons.Material.Filled.Info" Variant="Variant.Text" Size="Size.Small" Color="Color.Default"></MudIconButton>
                            </MudTooltip>
                        </div>

                        if (disk_category == "Mehr als X GB belegt")
                        {
                            <MudNumericField Class="mt-3" @bind-Value="disk_usage" Label="Auslösen wenn folgender Schwellwert (GB) überschritten wird." Variant="Variant.Text" Min="1" Max="9999" />
                        }
                        else if (disk_category == "Weniger als X GB frei")
                        {
                            <MudNumericField Class="mt-3" @bind-Value="disk_usage" Label="Auslösen wenn folgender Schwellwert (GB) überschritten wird." Variant="Variant.Text" Min="1" Max="9999" />
                        }
                        if (disk_category == "Mehr als X Prozent belegt")
                        {
                            <MudSlider @bind-Value="disk_usage" ValueLabel="true" Min="5" Step="5" Style="width: 97%;">Auslösen wenn folgender Schwellwert (Prozenzt) überschritten wird.</MudSlider>
                        }
                        else if (disk_category == "Weniger als X Prozent frei")
                        {
                            <MudSlider @bind-Value="disk_usage" ValueLabel="true" Min="5" Step="5" Style="width: 97%;">Auslösen wenn folgender Schwellwert (Prozenzt) überschritten wird.</MudSlider>
                        }

                        <div style="display: flex; align-items: center;">
                            <MudCheckBox T="bool" @bind-Value="@disk_include_network_disks" Label="Netzlaufwerke" Color="Color.Primary" />

                            <MudTooltip Text="Überprüft eingebundene Netzwlaufwerke.">
                                <MudIconButton Class="ml-2 mt-0" Icon="@Icons.Material.Filled.Info" Variant="Variant.Text" Size="Size.Small" Color="Color.Default"></MudIconButton>
                            </MudTooltip>
                        </div>

                        <div style="display: flex; align-items: center;">
                            <MudCheckBox T="bool" @bind-Value="@disk_include_removable_disks" Label="Wechseldatenträger" Color="Color.Primary" />

                            <MudTooltip Text="Überprüft eingesteckte Wechseldatenträger.">
                                <MudIconButton Class="ml-2 mt-0" Icon="@Icons.Material.Filled.Info" Variant="Variant.Text" Size="Size.Small" Color="Color.Default"></MudIconButton>
                            </MudTooltip>
                        </div>

                        <div style="display: flex; align-items: center;">
                            <MudNumericField Class="mt-3" @bind-Value="notification_treshold_max" Label="Benachrichtigung ab X Schwellenwert Überschreitungen." Variant="Variant.Text" Min="0" Max="9999" />

                            <MudTooltip Text="Wie viele Schwellenwert Überschreitungen erforderlich sind, bis eine Benachrichtung versendet wird.">
                                <MudIconButton Class="ml-2 mt-5" Icon="@Icons.Material.Filled.Info" Variant="Variant.Text" Size="Size.Small" Color="Color.Default"></MudIconButton>
                            </MudTooltip>
                        </div>

                        <MudText Class="mt-2" Typo="Typo.h6">Aktion</MudText>

                        <MudSelect Class="mt-3" T="string" @bind-Value="script_action" Label="Skript" AnchorOrigin="Origin.BottomCenter" Immediate=@true>
                            @{
                                foreach (var script in scripts_list)
                                {
                                    <MudSelectItem Value="@(script.name)" />
                                }
                            }
                        </MudSelect>

                        <div style="display: flex; align-items: center;">
                            <MudNumericField Class="mt-3" @bind-Value="action_treshold_max" Label="Aktion ab X Schwellenwert Überschreitungen." Variant="Variant.Text" Min="0" Max="9999" />

                            <MudTooltip Text="Wie viele aufeinanderfolgende Schwellenwert Überschreitungen erforderlich sind, bis die PowerShell Code Aktion ausgeführt wird.">
                                <MudIconButton Class="ml-2 mt-5" Icon="@Icons.Material.Filled.Info" Variant="Variant.Text" Size="Size.Small" Color="Color.Default"></MudIconButton>
                            </MudTooltip>
                        </div>
                    }
                }
            }
            else if (category == "PowerShell")
            {
                <MudText Class="mt-5" Typo="Typo.h6">Regel</MudText>

                <MudSelect Class="mt-3" T="string" @bind-Value="script" Label="Skript" AnchorOrigin="Origin.BottomCenter" Immediate=@true>
                    @{
                        foreach (var script in scripts_list)
                        {
                            <MudSelectItem Value="@(script.name)" />
                        }
                    }
                </MudSelect>

                <div style="display: flex; align-items: center;">
                    <MudTextField Label="Erwartetes Ergebnis" T="string" @bind-Value="@expected_result" Required="true" RequiredError="Erforderlich" Immediate="@true" />

                    <MudTooltip Text="Regulärer Ausdrücke (Regex) werden unterstützt.">
                        <MudIconButton Class="ml-2 mt-3" Icon="@Icons.Material.Filled.Info" Variant="Variant.Text" Size="Size.Small" Color="Color.Default"></MudIconButton>
                    </MudTooltip>
                </div>

                <div style="display: flex; align-items: center;">
                    <MudNumericField Class="mt-3" @bind-Value="notification_treshold_max" Label="Benachrichtigung ab X Treffer hintereinander" Variant="Variant.Text" Min="0" Max="9999" />

                    <MudTooltip Text="Wie viele aufeinanderfolgende Sensor Anschläge erforderlich sind, bis eine Benachrichtung versendet wird.">
                        <MudIconButton Class="ml-2 mt-5" Icon="@Icons.Material.Filled.Info" Variant="Variant.Text" Size="Size.Small" Color="Color.Default"></MudIconButton>
                    </MudTooltip>
                </div>

                <MudText Class="mt-5" Typo="Typo.h6">Aktion</MudText>

                <MudSelect Class="mt-3" T="string" @bind-Value="script_action" Label="Skript" AnchorOrigin="Origin.BottomCenter" Immediate=@true>
                    @{
                        foreach (var script in scripts_list)
                        {
                            <MudSelectItem Value="@(script.name)" />
                        }
                    }
                </MudSelect>

                <div style="display: flex; align-items: center;">
                    <MudNumericField Class="mt-3" @bind-Value="action_treshold_max" Label="Aktion ab X Treffer hintereinander" Variant="Variant.Text" Min="0" Max="9999" />

                    <MudTooltip Text="Wie viele aufeinanderfolgende Sensor Anschläge erforderlich sind, bis die PowerShell Code Aktion ausgeführt wird.">
                        <MudIconButton Class="ml-2 mt-5" Icon="@Icons.Material.Filled.Info" Variant="Variant.Text" Size="Size.Small" Color="Color.Default"></MudIconButton>
                    </MudTooltip>
                </div>
            }
            else if (category == "Windows Eventlog")
            {
                <MudText Class="mt-5" Typo="Typo.h6">Regel</MudText>

                <MudSelect Class="mt-3" T="string" @bind-Value="eventlog" Label="Eventlog" AnchorOrigin="Origin.BottomCenter">
                    <MudSelectItem Value="@("Anwendung")" />
                    <MudSelectItem Value="@("Sicherheit")" />
                    <MudSelectItem Value="@("Installation")" />
                    <MudSelectItem Value="@("System")" />
                    <MudSelectItem Value="@("Benutzerdefiniert")" />
                </MudSelect>

                if (eventlog_category == "Benutzerdefiniert")
                {
                    <MudTextField Class="mt-3" Label="Eventlog" T="string" @bind-Value="@eventlog" Variant="Variant.Text" Required="true" RequiredError="Erforderlich" Immediate="@true" />
                }

                <div style="display: flex; align-items: center;">
                    <MudTextField Label="Ereignis-ID" T="string" @bind-Value="@eventlog_event_id" Required="true" RequiredError="Erforderlich" Immediate="@true" />
                </div>

                <div style="display: flex; align-items: center;">
                    <MudTextField Label="Erwartetes Ergebnis" T="string" @bind-Value="@expected_result" Required="false" RequiredError="Erforderlich" Immediate="@false" />

                    <MudTooltip Text="Regulärer Ausdrücke (Regex) werden unterstützt. Bleibt das Feld leer, wird nur nach der Ereignis-ID geprüft.">
                        <MudIconButton Class="ml-2 mt-3" Icon="@Icons.Material.Filled.Info" Variant="Variant.Text" Size="Size.Small" Color="Color.Default"></MudIconButton>
                    </MudTooltip>
                </div>

                <div style="display: flex; align-items: center;">
                    <MudNumericField Class="mt-3" @bind-Value="notification_treshold_max" Label="Benachrichtigung ab X Treffer hintereinander" Variant="Variant.Text" Min="0" Max="9999" />

                    <MudTooltip Text="Wie viele aufeinanderfolgende Sensor Anschläge erforderlich sind, bis eine Benachrichtung versendet wird.">
                        <MudIconButton Class="ml-2 mt-5" Icon="@Icons.Material.Filled.Info" Variant="Variant.Text" Size="Size.Small" Color="Color.Default"></MudIconButton>
                    </MudTooltip>
                </div>

                <MudText Class="mt-5" Typo="Typo.h6">Aktion</MudText>

                <MudSelect Class="mt-3" T="string" @bind-Value="script_action" Label="Skript" AnchorOrigin="Origin.BottomCenter" Immediate=@true>
                    @{
                        foreach (var script in scripts_list)
                        {
                            <MudSelectItem Value="@(script.name)" />
                        }
                    }
                </MudSelect>

                <div style="display: flex; align-items: center;">
                    <MudNumericField Class="mt-3" @bind-Value="action_treshold_max" Label="Aktion ab X Treffer hintereinander" Variant="Variant.Text" Min="0" Max="9999" />

                    <MudTooltip Text="Wie viele aufeinanderfolgende Sensor Anschläge erforderlich sind, bis die PowerShell Code Aktion ausgeführt wird.">
                        <MudIconButton Class="ml-2 mt-5" Icon="@Icons.Material.Filled.Info" Variant="Variant.Text" Size="Size.Small" Color="Color.Default"></MudIconButton>
                    </MudTooltip>
                </div>
            }
            else if (category == "Dienst")
            {
                <MudText Class="mt-5" Typo="Typo.h6">Regel</MudText>

                <MudTextField Class="mt-0" Label="Dienst Name" T="string" @bind-Value="@service_name" Variant="Variant.Text" Required="true" RequiredError="Erforderlich" Immediate="@true" />

                <MudSelect Class="mt-2" T="string" @bind-Value="service_condition" Label="Dienst Status" AnchorOrigin="Origin.BottomCenter">
                    <MudSelectItem Value="@("Ausgeführt")" />
                    <MudSelectItem Value="@("Angehalten")" />
                    <MudSelectItem Value="@("Gestoppt")" />
                </MudSelect>

                <div style="display: flex; align-items: center;">
                    <MudNumericField Class="mt-3" @bind-Value="notification_treshold_max" Label="Benachrichtigung ab X Treffer hintereinander" Variant="Variant.Text" Min="0" Max="9999" />

                    <MudTooltip Text="Wie viele aufeinanderfolgende Sensor Anschläge erforderlich sind, bis eine Benachrichtung versendet wird.">
                        <MudIconButton Class="ml-2 mt-5" Icon="@Icons.Material.Filled.Info" Variant="Variant.Text" Size="Size.Small" Color="Color.Default"></MudIconButton>
                    </MudTooltip>
                </div>

                <MudText Class="mt-5" Typo="Typo.h6">Aktion</MudText>

                <MudSelect Class="mt-0" T="string" @bind-Value="service_action" Label="Dienst Aktion" AnchorOrigin="Origin.BottomCenter">
                    <MudSelectItem Value="@("Starten")" />
                    <MudSelectItem Value="@("Stoppen")" />
                    <MudSelectItem Value="@("Neustarten")" />
                </MudSelect>

                <MudSelect Class="mt-3" T="string" @bind-Value="script_action" Label="Skript" AnchorOrigin="Origin.BottomCenter" Immediate=@true>
                    @{
                        foreach (var script in scripts_list)
                        {
                            <MudSelectItem Value="@(script.name)" />
                        }
                    }
                </MudSelect>

                <div style="display: flex; align-items: center;">
                    <MudNumericField Class="mt-3" @bind-Value="action_treshold_max" Label="Aktion ab X Treffer hintereinander" Variant="Variant.Text" Min="0" Max="9999" />

                    <MudTooltip Text="Wie viele aufeinanderfolgende Sensor Anschläge erforderlich sind, bis die PowerShell Code Aktion ausgeführt wird.">
                        <MudIconButton Class="ml-2 mt-5" Icon="@Icons.Material.Filled.Info" Variant="Variant.Text" Size="Size.Small" Color="Color.Default"></MudIconButton>
                    </MudTooltip>
                </div>
            }
            else if (category == "Ping")
            {
                <MudText Class="mt-5" Typo="Typo.h6">Regel</MudText>

                <MudTextField Class="mt-3" Label="IP-Adresse/Hostname" T="string" @bind-Value="@ping_address" Variant="Variant.Text" Required="true" RequiredError="Erforderlich" Immediate="@true" />
                <MudNumericField Class="mt-3" Label="Timeout (Millisekunden)" @bind-Value="ping_timeout" Variant="Variant.Text" Min="1" Max="120" Required="true" RequiredError="Erforderlich" Immediate="@true" />

                <MudSelect Class="mt-2" T="string" @bind-Value="ping_condition" Label="Ping Status" AnchorOrigin="Origin.BottomCenter">
                    <MudSelectItem Value="@("Erfolgreich")" />
                    <MudSelectItem Value="@("Fehlgeschlagen")" />
                </MudSelect>

                <div style="display: flex; align-items: center;">
                    <MudNumericField Class="mt-3" @bind-Value="notification_treshold_max" Label="Benachrichtigung ab X Fehlschlägen hintereinander." Variant="Variant.Text" Min="0" Max="9999" />

                    <MudTooltip Text="Wie viele aufeinanderfolgende Sensor Anschläge erforderlich sind, bis eine Benachrichtung versendet wird.">
                        <MudIconButton Class="ml-2 mt-5" Icon="@Icons.Material.Filled.Info" Variant="Variant.Text" Size="Size.Small" Color="Color.Default"></MudIconButton>
                    </MudTooltip>
                </div>

                <MudText Class="mt-5" Typo="Typo.h6">Aktion</MudText>

                <MudSelect Class="mt-3" T="string" @bind-Value="script_action" Label="Skript" AnchorOrigin="Origin.BottomCenter" Immediate=@true>
                    @{
                        foreach (var script in scripts_list)
                        {
                            <MudSelectItem Value="@(script.name)" />
                        }
                    }
                </MudSelect>

                <div style="display: flex; align-items: center;">
                    <MudNumericField Class="mt-3" @bind-Value="action_treshold_max" Label="Aktion ab X Fehlschlägen hintereinander." Variant="Variant.Text" Min="0" Max="9999" />

                    <MudTooltip Text="Wie viele aufeinanderfolgende Sensor Anschläge erforderlich sind, bis die PowerShell Code Aktion ausgeführt wird.">
                        <MudIconButton Class="ml-2 mt-5" Icon="@Icons.Material.Filled.Info" Variant="Variant.Text" Size="Size.Small" Color="Color.Default"></MudIconButton>
                    </MudTooltip>
                </div>
            }

        }

        <div style="display: flex; align-items: center;">
            <MudCheckBox Class="mt-3" T="bool" @bind-Value="auto_reset" Label="Automatisch zurücksetzen" Color="Color.Primary" />

            <MudTooltip Text="Wenn der Sensor nicht anschlägt, wird der Benachrichtigungs- und Aktionszähler zurückgesetzt. Dadurch wird erreicht, dass eine Benachrichtigung oder Aktion nur ausgelöst wird, wenn der Sensor dem Schwellenwert entsprechend oft hintereinander anschlägt.">
                <MudIconButton Class="ml-2 mt-3" Icon="@Icons.Material.Filled.Info" Variant="Variant.Text" Size="Size.Small" Color="Color.Default"></MudIconButton>
            </MudTooltip>
        </div>

    </DialogContent>
    <DialogActions>
        <MudButton OnClick="Cancel">Abbrechen</MudButton>

        <MudButton Disabled="@Form_Valid()" OnClick="@this.OK" Variant="Variant.Filled" Size="@Size.Small" Color="@Color.Success">Bestätigen</MudButton>
    </DialogActions>
</MudDialog>

@code {

    protected override async Task OnInitializedAsync()
    {
        sensor_name = await localStorage.GetItemAsync<string>("temp_sensor_name");
        old_sensor_name = sensor_name;
        sensor_json = await localStorage.GetItemAsync<string>("temp_sensor_json");

        await Get_Scripts();
        await Extract_Sensor();
    }

    public List<Script> scripts_list;

    private string sensor_json = String.Empty;
    private string updatedJson = String.Empty;

    private string old_sensor_name = String.Empty;
    private string sensor_name = String.Empty;
    private string description = String.Empty;
    private string severity = "Moderat";
    private string category = "Auslastung";
    private string sub_category = String.Empty;
    private string utilization_category = String.Empty;

    private int script_id = 0;
    private string script = String.Empty;
    private int script_action_id = 0;
    private string script_action = String.Empty;
    private int notification_treshold_max = 0;
    private int action_treshold_max = 0;
    private bool auto_reset = false;

    //Utilization sensor
    private string disk_category = String.Empty;

    private int cpu_usage = 90;
    private string process_name = String.Empty;
    private int ram_usage = 90;
    private int disk_usage = 50;
    private int disk_minimum_capacity = 5;
    private string disk_letters = "C";

    private bool disk_include_network_disks = false;
    private bool disk_include_removable_disks = false;

    //Eventlog sensor
    private string eventlog = String.Empty;
    private string eventlog_category = "Anwendung";
    private string eventlog_event_id = String.Empty;
    private string expected_result = String.Empty;

    //service sensor
    private string service_name = String.Empty;
    private string service_condition = "Gestoppt";
    private string service_action = "Starten";

    //ping sensor
    private string ping_address = String.Empty;
    private int ping_timeout = 5;
    private string ping_condition = String.Empty;

    //time schedule
    private int time_scheduler_type = 0;
    private string time_scheduler_type_display = "Systemstart";
    private int time_scheduler_seconds = 10;
    private int time_scheduler_minutes = 5;
    private int time_scheduler_hours = 1;
    private TimeSpan? time_scheduler_time = new TimeSpan(12, 00, 00);
    private DateTime? time_scheduler_date = DateTime.Now;
    private bool time_scheduler_monday = false;
    private bool time_scheduler_tuesday = false;
    private bool time_scheduler_wednesday = false;
    private bool time_scheduler_thursday = false;
    private bool time_scheduler_friday = false;
    private bool time_scheduler_saturday = false;
    private bool time_scheduler_sunday = false;

    public class Sensor
    {
        public string id { get; set; }
        public string name { get; set; }
        public string date { get; set; }
        public string last_run { get; set; }
        public string author { get; set; }
        public string description { get; set; }
        public int severity { get; set; }
        public int category { get; set; }
        public int sub_category { get; set; }
        public int utilization_category { get; set; }
        public int notification_treshold_count { get; set; }
        public int notification_treshold_max { get; set; }
        public string notification_history { get; set; }
        public int action_treshold_count { get; set; }
        public int action_treshold_max { get; set; }
        public string action_history { get; set; }
        public bool auto_reset { get; set; }
        public int script_id { get; set; }
        public string script { get; set; }
        public int script_action_id { get; set; }
        public string script_action { get; set; }
        public int cpu_usage { get; set; }
        public string process_name { get; set; }
        public int ram_usage { get; set; }
        public int disk_usage { get; set; }
        public int disk_minimum_capacity { get; set; }
        public int disk_category { get; set; }
        public string disk_letters { get; set; }
        public bool disk_include_network_disks { get; set; }
        public bool disk_include_removable_disks { get; set; }
        public string eventlog { get; set; }
        public string eventlog_category { get; set; }
        public string eventlog_event_id { get; set; }
        public string expected_result { get; set; }

        //service sensor
        public string service_name { get; set; }
        public int service_condition { get; set; }
        public int service_action { get; set; }

        //ping sensor
        public string ping_address { get; set; }
        public int ping_timeout { get; set; }
        public int ping_condition { get; set; }

        //time schedule
        public int time_scheduler_type { get; set; }
        public int time_scheduler_seconds { get; set; }
        public int time_scheduler_minutes { get; set; }
        public int time_scheduler_hours { get; set; }
        public string time_scheduler_time { get; set; }
        public string time_scheduler_date { get; set; }
        public bool time_scheduler_monday { get; set; }
        public bool time_scheduler_tuesday { get; set; }
        public bool time_scheduler_wednesday { get; set; }
        public bool time_scheduler_thursday { get; set; }
        public bool time_scheduler_friday { get; set; }
        public bool time_scheduler_saturday { get; set; }
        public bool time_scheduler_sunday { get; set; }
    }

    public class Script
    {
        public int id { get; set; }
        public string name { get; set; }
        public string date { get; set; }
        public string author { get; set; }
        public string description { get; set; }
        public string platform { get; set; }
        public string shell { get; set; }
        public string script { get; set; }
    }

    [CascadingParameter]
    private MudDialogInstance MudDialog { get; set; } = default!;

    private bool Form_Valid()
    {
        //human to computable time scheduler
        if (time_scheduler_type_display == "Systemstart")
            time_scheduler_type = 0;
        else if (time_scheduler_type_display == "Datum & Uhrzeit")
            time_scheduler_type = 1;
        else if (time_scheduler_type_display == "Alle X Sekunden")
            time_scheduler_type = 2;
        else if (time_scheduler_type_display == "Alle X Minuten")
            time_scheduler_type = 3;
        else if (time_scheduler_type_display == "Alle X Stunden")
            time_scheduler_type = 4;
        else if (time_scheduler_type_display == "Datum, alle X Sekunden")
            time_scheduler_type = 5;
        else if (time_scheduler_type_display == "Datum, alle X Minuten")
            time_scheduler_type = 6;
        else if (time_scheduler_type_display == "Datum, alle X Stunden")
            time_scheduler_type = 7;
        else if (time_scheduler_type_display == "An den folgenden Tagen um X Uhr")
        {
            time_scheduler_type = 8;

            if (!time_scheduler_monday && !time_scheduler_tuesday && !time_scheduler_wednesday && !time_scheduler_tuesday && !time_scheduler_friday && !time_scheduler_saturday && !time_scheduler_sunday)
                return true;
        }
        else if (time_scheduler_type_display == "An den folgenden Tagen, alle X Sekunden")
        {
            time_scheduler_type = 9;

            if (!time_scheduler_monday && !time_scheduler_tuesday && !time_scheduler_wednesday && !time_scheduler_tuesday && !time_scheduler_friday && !time_scheduler_saturday && !time_scheduler_sunday)
                return true;
        }
        else if (time_scheduler_type_display == "An den folgenden Tagen, alle X Minuten")
        {
            time_scheduler_type = 10;

            if (!time_scheduler_monday && !time_scheduler_tuesday && !time_scheduler_wednesday && !time_scheduler_tuesday && !time_scheduler_friday && !time_scheduler_saturday && !time_scheduler_sunday)
                return true;
        }
        else if (time_scheduler_type_display == "An den folgenden Tagen, alle X Stunden")
        {
            time_scheduler_type = 11;

            if (!time_scheduler_monday && !time_scheduler_tuesday && !time_scheduler_wednesday && !time_scheduler_tuesday && !time_scheduler_friday && !time_scheduler_saturday && !time_scheduler_sunday)
                return true;
        }

        if (String.IsNullOrEmpty(sensor_name) || String.IsNullOrEmpty(category) || String.IsNullOrEmpty(description))
            return true;
        else
            return false;
    }

    private async Task Get_Scripts()
    {
        scripts_list = new List<Script>();
        scripts_list.Clear();
        string query = "SELECT * FROM scripts WHERE platform = @platform;";

        MySqlConnection conn = new MySqlConnection(Application_Settings.connectionString);

        try
        {
            await conn.OpenAsync();

            MySqlCommand command = new MySqlCommand(query, conn);
            command.Parameters.AddWithValue("@platform", "Windows");

            Logging.Handler.Debug("/manage_jobs Add_Sensor_Dialog) -> Get_Scripts", "MySQL_Prepared_Query", query); //Output prepared query

            using (DbDataReader reader = await command.ExecuteReaderAsync())
            {
                if (reader.HasRows)
                {
                    while (await reader.ReadAsync())
                    {
                        Logging.Handler.Debug("/manage_jobs Add_Sensor_Dialog) -> Get_Scripts", "MySQL_Result (json)", reader["json"].ToString() ?? String.Empty); //Output the JSON
                        Logging.Handler.Debug("/manage_jobs Add_Sensor_Dialog) -> Get_Scripts", "MySQL_Result (id)", reader["id"].ToString() ?? String.Empty); //Output the JSON

                        Script script = new Script
                        {
                            id = Convert.ToInt32(reader["id"].ToString()),
                            name = reader["name"].ToString() ?? String.Empty,
                            date = reader["date"].ToString() ?? String.Empty,
                            author = reader["author"].ToString() ?? String.Empty,
                            description = reader["description"].ToString() ?? String.Empty,
                            platform = reader["platform"].ToString() ?? String.Empty,
                            shell = reader["shell"].ToString() ?? String.Empty,
                            script = reader["script"].ToString() ?? String.Empty,
                        };

                        scripts_list.Add(script);
                    }
                }
            }
        }
        catch (Exception ex)
        {
            Logging.Handler.Error("/manage_jobs Add_Sensor_Dialog) -> Get_Scripts", "MySQL_Query", ex.Message);
        }
        finally
        {
            conn.Close();
            StateHasChanged();
        }
    }

    private async Task<int> Get_Script_ID(string name)
    {
        int id = 0;

        foreach (var _object in scripts_list)
        {
            if (_object.name == name)
            {
                id = _object.id;
                break;
            }
        }

        return id;
    }

    private async Task<string> Get_Script_Name(int id)
    {
        string name = String.Empty;

        foreach (var _object in scripts_list)
        {
            if (_object.id == id)
            {
                name = _object.name;
                break;
            }
        }

        return name;
    }

    private async Task<string> Get_Script_Code(int id)
    {
        string script = String.Empty;

        foreach (var _object in scripts_list)
        {
            if (_object.id == id)
            {
                script = _object.script;
                break;
            }
        }

        return script;
    }


    private async Task Extract_Sensor()
    {
        try
        {
            Sensor _object = JsonSerializer.Deserialize<Sensor>(sensor_json);

            sensor_name = _object.name;
            description = _object.description;
            severity = _object.severity.ToString();
            category = _object.category.ToString();
            sub_category = _object.sub_category.ToString();
            utilization_category = _object.utilization_category.ToString();
            notification_treshold_max = _object.notification_treshold_max;
            action_treshold_max = _object.action_treshold_max;
            auto_reset = _object.auto_reset;
            script_id = _object.script_id;
            script = await Get_Script_Name(_object.script_id);
            script_action_id = _object.script_action_id;
            script_action = await Get_Script_Name(_object.script_action_id);
            cpu_usage = _object.cpu_usage;
            process_name = _object.process_name;
            ram_usage = _object.ram_usage;
            disk_usage = _object.disk_usage;
            disk_minimum_capacity = _object.disk_minimum_capacity;
            disk_category = _object.disk_category.ToString();
            disk_letters = _object.disk_letters;
            disk_include_network_disks = _object.disk_include_network_disks;
            disk_include_removable_disks = _object.disk_include_removable_disks;
            eventlog = _object.eventlog;
            eventlog_event_id = _object.eventlog_event_id;
            expected_result = _object.expected_result;

            //service sensor
            service_name = _object.service_name;
            service_condition = _object.service_condition.ToString();
            service_action = _object.service_action.ToString();

            //ping sensor
            ping_address = _object.ping_address;
            ping_timeout = _object.ping_timeout;
            ping_condition = _object.ping_condition.ToString();

            //time schedule
            time_scheduler_type = _object.time_scheduler_type;
            time_scheduler_seconds = _object.time_scheduler_seconds;
            time_scheduler_minutes = _object.time_scheduler_minutes;
            time_scheduler_hours = _object.time_scheduler_hours;

            if (TimeSpan.TryParse(_object.time_scheduler_time, out TimeSpan parsedTime))
                time_scheduler_time = parsedTime;

            if (DateTime.TryParse(_object.time_scheduler_date, out DateTime parsedDate))
                time_scheduler_date = parsedDate;

            time_scheduler_monday = _object.time_scheduler_monday;
            time_scheduler_tuesday = _object.time_scheduler_tuesday;
            time_scheduler_wednesday = _object.time_scheduler_wednesday;
            time_scheduler_thursday = _object.time_scheduler_thursday;
            time_scheduler_friday = _object.time_scheduler_friday;
            time_scheduler_saturday = _object.time_scheduler_saturday;
            time_scheduler_sunday = _object.time_scheduler_sunday;

            //convert time schedule to human readable
            if (_object.time_scheduler_type == 0)
                time_scheduler_type_display = "Systemstart";
            else if (_object.time_scheduler_type == 1)
                time_scheduler_type_display = "Datum & Uhrzeit";
            else if (_object.time_scheduler_type == 2)
                time_scheduler_type_display = "Alle X Sekunden";
            else if (_object.time_scheduler_type == 3)
                time_scheduler_type_display = "Alle X Minuten";
            else if (_object.time_scheduler_type == 4)
                time_scheduler_type_display = "Alle X Stunden";
            else if (_object.time_scheduler_type == 5)
                time_scheduler_type_display = "Datum, alle X Sekunden";
            else if (_object.time_scheduler_type == 6)
                time_scheduler_type_display = "Datum, alle X Minuten";
            else if (_object.time_scheduler_type == 7)
                time_scheduler_type_display = "Datum, alle X Stunden";
            else if (_object.time_scheduler_type == 8)
                time_scheduler_type_display = "An den folgenden Tagen um X Uhr";
            else if (_object.time_scheduler_type == 9)
                time_scheduler_type_display = "An den folgenden Tagen, alle X Sekunden";
            else if (_object.time_scheduler_type == 10)
                time_scheduler_type_display = "An den folgenden Tagen, alle X Minuten";
            else if (_object.time_scheduler_type == 11)
                time_scheduler_type_display = "An den folgenden Tagen, alle X Stunden";

            //Computable to readable
            // severity
            if (severity == "3")
                severity = "Kritisch";
            else if (severity == "2")
                severity = "Hoch";
            else if (severity == "1")
                severity = "Moderat";
            else if (severity == "0")
                severity = "Niedrig";

            // category
            if (category == "0")
                category = "Auslastung";
            else if (category == "1")
                category = "Windows Eventlog";
            else if (category == "2")
                category = "PowerShell";
            else if (category == "3")
                category = "Dienst";
            else if (category == "4")
                category = "Ping";

            // sub_category
            if (sub_category == "0")
                sub_category = "Prozessor";
            else if (sub_category == "1")
                sub_category = "Arbeitsspeicher";
            else if (sub_category == "2")
                sub_category = "Laufwerk";
            else if (sub_category == "3")
                sub_category = "Prozess-CPU-Nutzung (%)";
            else if (sub_category == "4")
                sub_category = "Prozess-RAM-Nutzung (%)";
            else if (sub_category == "5")
                sub_category = "Prozess-RAM-Nutzung (MB)";

            // disk_category
            if (disk_category == "0")
                disk_category = "Mehr als X GB belegt";
            else if (disk_category == "1")
                disk_category = "Weniger als X GB frei";
            else if (disk_category == "2")
                disk_category = "Mehr als X Prozent belegt";
            else if (disk_category == "3")
                disk_category = "Weniger als X Prozent frei";

            //service condition
            if (service_condition == "0")
                service_condition = "Ausgeführt";
            else if (service_condition == "1")
                service_condition = "Angehalten";
            else if (service_condition == "2")
                service_condition = "Gestoppt";

            //service action
            if (service_action == "0")
                service_action = "Starten";
            else if (service_action == "1")
                service_action = "Stoppen";
            else if (service_action == "2")
                service_action = "Neustarten";

            // windows eventlog
            if (eventlog == "Application")
                eventlog_category = "Anwendung";
            else if (eventlog == "Security")
                eventlog_category = "Sicherheit";
            else if (eventlog == "Setup")
                eventlog_category = "Installation";
            else if (eventlog == "System")
                eventlog_category = "System";

            //ping
            if (ping_condition == "0")
                ping_condition = "Erfolgreich";
            else if (ping_condition == "1")
                ping_condition = "Fehlgeschlagen";
        }
        catch (Exception ex)
        {
            Logging.Handler.Error("/manage_sensors -> Extract_Sensor", "Result", ex.Message);
        }
    }

    private async Task OK()
    {
        Form_Valid();

        this.Snackbar.Configuration.ShowCloseIcon = true;
        this.Snackbar.Configuration.PositionClass = Defaults.Classes.Position.BottomRight;

        bool success = false;

        MySqlConnection conn = new MySqlConnection(Application_Settings.connectionString);

        try
        {
            int severity_converted = 0;
            int category_converted = 0;
            int sub_category_converted = 0;
            int disk_category_converted = 0;
            int service_condition_converted = 0;
            int service_action_converted = 0;
            int ping_condition_converted = 0;
            int script_id = await Get_Script_ID(script);
            int script_action_id = await Get_Script_ID(script_action);

            // Human readable to computable: severity
            if (severity == "Kritisch")
                severity_converted = 3;
            else if (severity == "Hoch")
                severity_converted = 2;
            else if (severity == "Moderat")
                severity_converted = 1;
            else if (severity == "Niedrig")
                severity_converted = 0;

            // category
            if (category == "Auslastung")
                category_converted = 0;
            else if (category == "Windows Eventlog")
                category_converted = 1;
            else if (category == "PowerShell")
                category_converted = 2;
            else if (category == "Dienst")
                category_converted = 3;
            else if (category == "Ping")
                category_converted = 4;

            // sub_category
            if (sub_category == "Prozessor")
                sub_category_converted = 0;
            else if (sub_category == "Arbeitsspeicher")
                sub_category_converted = 1;
            else if (sub_category == "Laufwerk")
                sub_category_converted = 2;
            else if (sub_category == "Prozess-CPU-Nutzung (%)")
                sub_category_converted = 3;
            else if (sub_category == "Prozess-RAM-Nutzung (%)")
                sub_category_converted = 4;
            else if (sub_category == "Prozess-RAM-Nutzung (MB)")
                sub_category_converted = 5;

            // disk_category
            if (disk_category == "Mehr als X GB belegt")
                disk_category_converted = 0;
            else if (disk_category == "Weniger als X GB frei")
                disk_category_converted = 1;
            else if (disk_category == "Mehr als X Prozent belegt")
                disk_category_converted = 2;
            else if (disk_category == "Weniger als X Prozent frei")
                disk_category_converted = 3;

            // service condition
            if (service_condition == "Ausgeführt")
                service_condition_converted = 0;
            else if (service_condition == "Angehalten")
                service_condition_converted = 1;
            else if (service_condition == "Gestoppt")
                service_condition_converted = 2;

            // service action
            if (service_action == "Starten")
                service_action_converted = 0;
            else if (service_action == "Stoppen")
                service_action_converted = 1;
            else if (service_action == "Neustarten")
                service_action_converted = 2;

            // windows event log
            if (eventlog_category == "Anwendung")
                eventlog = "Application";
            else if (eventlog_category == "Sicherheit")
                eventlog = "Security";
            else if (eventlog_category == "Installation")
                eventlog = "Setup";
            else if (eventlog_category == "System")
                eventlog = "System";

            // ping condition
            if (ping_condition == "Erfolgreich")
                ping_condition_converted = 0;
            else if (ping_condition == "Fehlgeschlagen")
                ping_condition_converted = 1;

            Sensor sensor_json = new Sensor
                {
                    id = Randomizer.Handler.Standard(6),
                    name = sensor_name,
                    date = DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss"),
                    author = "Placeholder",
                    description = description,
                    severity = severity_converted,
                    category = category_converted,
                    sub_category = sub_category_converted,
                    notification_treshold_max = notification_treshold_max,
                    action_treshold_max = action_treshold_max,
                    auto_reset = auto_reset,
                    script_id = script_id,
                    script = await Base64.Handler.Encode(await Get_Script_Code(script_id)),
                    script_action_id = script_action_id,
                    script_action = await Base64.Handler.Encode(await Get_Script_Code(script_action_id)),
                    cpu_usage = cpu_usage,
                    process_name = process_name,
                    ram_usage = ram_usage,
                    disk_usage = disk_usage,
                    disk_category = disk_category_converted,
                    disk_letters = disk_letters,
                    disk_include_network_disks = disk_include_network_disks,
                    disk_include_removable_disks = disk_include_removable_disks,
                    eventlog = eventlog,
                    eventlog_category = eventlog_category,
                    eventlog_event_id = eventlog_event_id,
                    expected_result = expected_result,

                    //service sensor
                    service_name = service_name,
                    service_condition = service_condition_converted,
                    service_action = service_action_converted,

                    //ping sensor
                    ping_address = ping_address,
                    ping_timeout = ping_timeout,
                    ping_condition = ping_condition_converted,

                    //time schedule
                    time_scheduler_type = time_scheduler_type,
                    time_scheduler_seconds = time_scheduler_seconds,
                    time_scheduler_minutes = time_scheduler_minutes,
                    time_scheduler_hours = time_scheduler_hours,
                    time_scheduler_time = time_scheduler_time.ToString(),
                    time_scheduler_date = time_scheduler_date.ToString(),
                    time_scheduler_monday = time_scheduler_monday,
                    time_scheduler_tuesday = time_scheduler_tuesday,
                    time_scheduler_wednesday = time_scheduler_wednesday,
                    time_scheduler_thursday = time_scheduler_thursday,
                    time_scheduler_friday = time_scheduler_friday,
                    time_scheduler_saturday = time_scheduler_saturday,
                    time_scheduler_sunday = time_scheduler_sunday,
                };

            string sensors_json_string = JsonSerializer.Serialize(sensor_json, new JsonSerializerOptions { WriteIndented = true });

            //Save to MySQL
            await conn.OpenAsync();

            string execute_query = "UPDATE `sensors` SET name = @name, description = @description, severity = @severity, category = @category, sub_category = @sub_category, script_id = @script_id, script_action_id = @script_action_id, json = @json WHERE name = @old_name;";

            MySqlCommand cmd = new MySqlCommand(execute_query, conn);

            cmd.Parameters.AddWithValue("@name", sensor_name);
            cmd.Parameters.AddWithValue("@old_name", old_sensor_name);
            cmd.Parameters.AddWithValue("@date", DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss"));
            cmd.Parameters.AddWithValue("@author", await localStorage.GetItemAsync<string>("username"));
            cmd.Parameters.AddWithValue("@description", description);
            cmd.Parameters.AddWithValue("@severity", severity_converted);
            cmd.Parameters.AddWithValue("@category", category_converted);
            cmd.Parameters.AddWithValue("@sub_category", sub_category_converted);
            cmd.Parameters.AddWithValue("@script_id", script_id);
            cmd.Parameters.AddWithValue("@script_action_id", script_action_id);
            cmd.Parameters.AddWithValue("@json", sensors_json_string);

            cmd.ExecuteNonQuery();

            success = true;
        }
        catch (Exception ex)
        {
            Logging.Handler.Error("/manage_sensors (Edit_Sensor_Dialog) -> OK", "Result", ex.Message);
        }
        finally
        {
            await conn.CloseAsync();
        }

        if (success)
        {
            this.MudDialog.Close(DialogResult.Ok("success"));
        }
        else
        {
            this.Snackbar.Add("Es ist ein Fehler aufgetreten.", Severity.Error);
            this.MudDialog.Close(DialogResult.Ok("error"));
        }
    }

    private void Cancel() => MudDialog.Cancel();
}