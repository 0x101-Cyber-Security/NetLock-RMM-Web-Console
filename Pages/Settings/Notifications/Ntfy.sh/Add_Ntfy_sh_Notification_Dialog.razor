@using MySqlConnector;
@using System.Data.Common;
@using System.Text.Json;
@using Microsoft.AspNetCore.Components.Server.ProtectedBrowserStorage
@using Microsoft.AspNetCore.DataProtection

@inject NavigationManager NavigationManager
@inject ILocalStorageService localStorage
@inject IDialogService DialogService
@inject ISnackbar Snackbar
@inject IJSRuntime JSRuntime
@inject IDataProtectionProvider DataProtectionProvider

<MudDialog>
    <TitleContent>
        <MudText Typo="Typo.h6">Hinzufügen</MudText>
    </TitleContent>
    <DialogContent>
        <MudTextField Label="Thema Name" T="string" @bind-Value="@topic_name" Immediate="@true" />
        <MudTextField Label="Thema URL" InputType="@PasswordInput" Adornment="Adornment.End" AdornmentIcon="@PasswordInputIcon" OnAdornmentClick="Show_Password" AdornmentAriaLabel="Kennwort anzeigen" @bind-Value="@topic_url" Immediate="@true" />
        <MudTextField Label="Zugriffstoken" InputType="@PasswordInput" AdornmentIcon="@PasswordInputIcon" OnAdornmentClick="Show_Password" AdornmentAriaLabel="Kennwort anzeigen" @bind-Value="@access_token" Adornment="Adornment.End" Immediate="@true" />
        <MudTextField Label="Beschreibung" T="string" @bind-Value="@description" Immediate="@true" />

        <MudSelect T="string" @bind-Value="severity" Label="Schweregrad" AnchorOrigin="Origin.BottomCenter">
            <MudSelectItem Value="@("Egal")" />
            <MudSelectItem Value="@("Kritisch")" />
            <MudSelectItem Value="@("Hoch")" />
            <MudSelectItem Value="@("Moderat")" />
            <MudSelectItem Value="@("Niedrig")" />
        </MudSelect>

        <MudDropContainer T="DropItem" Items="tenants" ItemsSelector="@((item,dropzone) => item.identifier == dropzone)" ItemDropped="ItemUpdated" Class="d-flex flex-wrap flex-grow-1" >
            <ChildContent>
                <MudDropZone T="DropItem" Identifier="drop_zone_one" Class="rounded mud-background-gray pa-6 ma-8 flex-grow-1">
                    <MudText Typo="Typo.h6" Class="mb-4">Mandanten</MudText>
                 </MudDropZone> 
               <MudDropZone T="DropItem" Identifier="drop_zone_two" Class="rounded mud-background-gray pa-6 ma-8 flex-grow-1">
                    <MudText Typo="Typo.h6" Class="mb-4">Ausgewählte Mandanten</MudText>
                </MudDropZone>
            </ChildContent>
            <ItemRenderer>
                <MudPaper Elevation="25" Class="pa-4 my-4">@context.id</MudPaper>
            </ItemRenderer>
        </MudDropContainer>

    </DialogContent>
    <DialogActions>
        <MudButton OnClick="Cancel">Abbrechen</MudButton>

        <MudButton Disabled="@Form_Valid()" OnClick="@this.OK" Variant="Variant.Filled" Size="@Size.Small" Color="@Color.Success">Bestätigen</MudButton>
    </DialogActions>
</MudDialog>

    @code {

    protected override async Task OnInitializedAsync()
    {
        await Get_Tenants();
    }

    private string topic_name = String.Empty;
    private string topic_url = String.Empty;
    private string access_token = String.Empty;
    private string description = String.Empty;
    private string severity = "Egal";
    private string tenants_json = String.Empty;

    private List<DropItem> tenants = new();

    public class DropItem
    {
        public string id { get; set; }
        public string identifier { get; set; }
    }

    private void ItemUpdated(MudItemDropInfo<DropItem> dropItem)
    {
        dropItem.Item.identifier = dropItem.DropzoneIdentifier;
    }

    [CascadingParameter]
    private MudDialogInstance MudDialog { get; set; } = default!;

    bool password_visible;
    InputType PasswordInput = InputType.Password;
    string PasswordInputIcon = Icons.Material.Filled.VisibilityOff;

    private void Show_Password()
    {
        @if (password_visible)
        {
            password_visible = false;
            PasswordInputIcon = Icons.Material.Filled.VisibilityOff;
            PasswordInput = InputType.Password;
        }
        else
        {
            password_visible = true;
            PasswordInputIcon = Icons.Material.Filled.Visibility;
            PasswordInput = InputType.Text;
        }
    }

    private bool Form_Valid()
    {
        if (String.IsNullOrEmpty(topic_name))
            return true;
        else
            return false;
    }

    private async Task Get_Tenants()
    {
        MySqlConnection conn = new MySqlConnection(await Classes.MySQL.Config.Get_Connection_String());

        try
        {
            await conn.OpenAsync();

            MySqlCommand command = new MySqlCommand("SELECT * FROM tenants;", conn);
            using (DbDataReader reader = await command.ExecuteReaderAsync())
            {
                if (reader.HasRows)
                {
                    while (await reader.ReadAsync())
                    {
                        tenants.Add(new DropItem { id = reader["name"].ToString() ?? String.Empty, identifier = "drop_zone_one" });
                    }
                }
            }
        }
        catch (Exception ex)
        {
            Logging.Handler.Error("Add_Ntfy_sh_Notification_Dialog", "Get_Tenants", ex.Message);
        }
        finally
        {
            conn.Close();
        }
    }

    private async Task OK()
    {
        this.Snackbar.Configuration.ShowCloseIcon = true;
        this.Snackbar.Configuration.PositionClass = Defaults.Classes.Position.BottomRight;

        bool success = false;

        //Get all tenants from drop zone two
        var filtered_tenants = tenants.Where(item => item.identifier == "drop_zone_two").ToList();

        // foreach filtered tenant, get tenant_id
        foreach (var tenant in filtered_tenants)
        {
            int tenant_id = await Classes.MySQL.Database.Get_Tenant_Id(tenant.id);

            // replace name with id
            tenant.id = tenant_id.ToString();
        }

        tenants_json = JsonSerializer.Serialize(filtered_tenants);

        Logging.Handler.Debug("Add_Ntfy_sh_Notification_Dialog", "tenants_json", tenants_json);

        if (tenants_json.Count() != 0)
        {
            // Add mail notification to database
            MySqlConnection conn = new MySqlConnection(await Classes.MySQL.Config.Get_Connection_String());

            try
            {
                var sessionStorage = new ProtectedSessionStorage(JSRuntime, DataProtectionProvider);
                var username = await sessionStorage.GetAsync<string>("username");

                // convert severity
                string sevirity_converted = String.Empty;

                if (severity == "Niedrig")
                    sevirity_converted = "0";
                else if (severity == "Moderat")
                    sevirity_converted = "1";
                else if (severity == "Hoch")
                    sevirity_converted = "2";
                else if (severity == "Kritisch")
                    sevirity_converted = "3";
                else if (severity == "Egal")
                    sevirity_converted = "4";

                await conn.OpenAsync();

                string execute_query = "INSERT INTO `ntfy_sh_notifications` (`topic_name`, `topic_url`, `access_token`, `date`, `author`, `description`, `severity`, `tenants`) VALUES (@topic_name, @topic_url, @access_token, @date, @author, @description, @severity, @tenants);";

                MySqlCommand cmd = new MySqlCommand(execute_query, conn);
                cmd.Parameters.AddWithValue("@topic_name", topic_name);
                cmd.Parameters.AddWithValue("@topic_url", topic_url);
                cmd.Parameters.AddWithValue("@access_token", access_token);
                cmd.Parameters.AddWithValue("@date", DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss"));
                cmd.Parameters.AddWithValue("@author", username.Value);
                cmd.Parameters.AddWithValue("@description", description);
                cmd.Parameters.AddWithValue("@severity", sevirity_converted);
                cmd.Parameters.AddWithValue("@tenants", tenants_json);

                cmd.ExecuteNonQuery();

                success = true;
            }
            catch (Exception ex)
            {
                Logging.Handler.Error("Add_Ntfy_sh_Notification_Dialog", "General error", ex.ToString());
            }
            finally
            {
                await conn.CloseAsync();
            }

            if (success)
            {
                MudDialog.Close(DialogResult.Ok("success"));
            }
            else
            {
                Snackbar.Add("Es ist ein Fehler aufgetreten.", Severity.Error);
            }
        }
        else
        {
            Snackbar.Add("Es sind keine Mandanten ausgewählt.", Severity.Error);
        }
    }

    private void Cancel() => MudDialog.Cancel();
}