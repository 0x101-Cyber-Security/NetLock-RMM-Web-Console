@page "/manage_notifications"
@using MySqlConnector;
@using System.Data.Common;
@using System.Text.Json;
@using OfficeOpenXml;
@using System.Xml.Serialization;
@using System.Text;
@using Microsoft.AspNetCore.Components.Server.ProtectedBrowserStorage;
@using Microsoft.AspNetCore.DataProtection;

@inject NavigationManager NavigationManager
@inject ILocalStorageService localStorage
@inject IDialogService DialogService
@inject ISnackbar Snackbar
@inject IJSRuntime JSRuntime
@inject IDataProtectionProvider DataProtectionProvider

<style>
    .selected-row {
        background-color: lightgray; /* Ändern Sie dies entsprechend Ihren Bedürfnissen */
    }

    .custom-expansion-panel {
        background-color: transparent; /* Ändern Sie dies entsprechend Ihren Bedürfnissen */
    }

    @@media only screen and (max-width: 768px) {
        .desktop-icon {
            display: none;
        }
    }

    .dialog-blurring {
        backdrop-filter: blur(10px);
    }
</style>

<AuthorizeView>
    <NotAuthorized>
        @{
            NavigationManager.NavigateTo("/");
        }
    </NotAuthorized>

    <Authorized>

        @if (permissions_settings_enabled && permissions_settings_notifications_enabled)
        {
            <MudText Class="mt-5" Typo="Typo.h5">Benachrichtigungen</MudText>

            <MudTabs Class="mt-5" KeepPanelsAlive=true Elevation="4" Rounded="false" Color="@Color.Default" @bind-ActivePanelIndex=@settings_notifications_panel_index OnActivePanelIndexChanged="@Save_Panel_Index()">

                @if (permissions_settings_notifications_mail_enabled)
                {
                    <MudTabPanel tabindex="0" Text="E-Mail">
                        <MudPaper>

                            @if (permissions_settings_notifications_mail_add)
                            {
                                <MudButton Class="mt-2 ml-2" Size="Size.Medium" Color="Color.Default" Variant="Variant.Filled" StartIcon="@Icons.Material.Filled.Mail" OnClick="@Show_Add_Mail_Notification_Dialog">Empfänger hinzufügen</MudButton>
                            }

                            @if (permissions_settings_notifications_mail_smtp)
                            {
                                <MudButton Class="mt-2 ml-2" Size="Size.Medium" Color="Color.Default" Variant="Variant.Filled" StartIcon="@Icons.Material.Filled.Settings" OnClick="@Show_SMTP_Settings_Dialog">SMTP-Einstellungen</MudButton>
                            }
                            
                            <MudTable Class="mt-0" Height="61vh" FixedHeader="true" FixedFooter="true" Hover="true" RowsPerPage="25" Dense="true" Items="@mail_notifications_mysql_data" Filter="new Func<Mail_Notifications_Entity, bool>(Mail_Notifications_Table_Filter_Func)">
                                <ToolBarContent>
                                    <MudTextField @bind-Value="mail_notifications_table_search_string" Placeholder="Suche" Adornment="Adornment.Start" AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Medium" Class="mt-0"></MudTextField>
                                </ToolBarContent>
                                <HeaderContent>
                                    <MudTh Sortable="true" @onclick="() => mail_notifications_table_sorted_column = (nameof(Mail_Notifications_Entity.mail_address))" style="white-space: nowrap;">E-Mail Adresse</MudTh>
                                    <MudTh Sortable="true" @onclick="() => mail_notifications_table_sorted_column = (nameof(Mail_Notifications_Entity.date))" style="white-space: nowrap;">Erstellt</MudTh>
                                    <MudTh Sortable="true" @onclick="() => mail_notifications_table_sorted_column = (nameof(Mail_Notifications_Entity.author))" style="white-space: nowrap;">Author</MudTh>
                                    <MudTh Sortable="true" @onclick="() => mail_notifications_table_sorted_column = (nameof(Mail_Notifications_Entity.language))" style="white-space: nowrap;">Sprache</MudTh>
                                    <MudTh Sortable="true" @onclick="() => mail_notifications_table_sorted_column = (nameof(Mail_Notifications_Entity.tenants))" style="white-space: nowrap;">Mandanten</MudTh>
                                    <MudTh></MudTh>
                                </HeaderContent>
                                <RowTemplate Context="mail_row">
                                    <MudTd DataLabel="" @onclick="() => Mail_Notifications_RowClickHandler(mail_row)" class="@Mail_Notifications_GetRowClass(mail_row)" style="display: none;">
                                        <span style="display: flex; align-items: center;">
                                            <MudIcon Icon="@Icons.Material.Filled.Numbers" Size="Size.Small" />&nbsp;@mail_row.id
                                        </span>
                                    </MudTd>

                                    <MudTd DataLabel="E-Mail Adresse" @onclick="() => Mail_Notifications_RowClickHandler(mail_row)" class="@Mail_Notifications_GetRowClass(mail_row)" style="white-space: nowrap;">
                                        <span style="display: flex; align-items: center;">
                                            <MudIcon Icon="@Icons.Material.Filled.Mail" Size="Size.Small" />&nbsp;@mail_row.mail_address
                                        </span>
                                    </MudTd>

                                    <MudTd DataLabel="Erstellt" @onclick="() => Mail_Notifications_RowClickHandler(mail_row)" class="@Mail_Notifications_GetRowClass(mail_row)" style="white-space: nowrap;">
                                        <span style="display: flex; align-items: center;">
                                            <MudIcon Icon="@Icons.Material.Filled.DateRange" Size="Size.Small" />&nbsp;@mail_row.date
                                        </span>
                                    </MudTd>

                                    <MudTd DataLabel="Author" @onclick="() => Mail_Notifications_RowClickHandler(mail_row)" class="@Mail_Notifications_GetRowClass(mail_row)" style="white-space: nowrap;">
                                        <span style="display: flex; align-items: center;">
                                            <MudIcon Icon="@Icons.Material.Filled.SupportAgent" Size="Size.Small" />&nbsp;@mail_row.author
                                        </span>
                                    </MudTd>

                                    <MudTd DataLabel="Sprache" @onclick="() => Mail_Notifications_RowClickHandler(mail_row)" class="@Mail_Notifications_GetRowClass(mail_row)" style="white-space: nowrap;">
                                        @{
                                            if (mail_row.language == "de")
                                                mail_row.language = "Deutsch";
                                            else if (mail_row.language == "en")
                                                mail_row.language = "Englisch";
                                        }
                                        <span style="display: flex; align-items: center;">
                                            <MudIcon Icon="@Icons.Material.Filled.Language" Size="Size.Small" />&nbsp;@mail_row.language
                                        </span>
                                    </MudTd>

                                    <MudTd DataLabel="Mandanten" @onclick="() => Mail_Notifications_RowClickHandler(mail_row)" class="@Mail_Notifications_GetRowClass(mail_row)" style="white-space: nowrap;">
                                        @{
                                            string tenants_string = "";

                                            try
                                            {
                                                var tenants_list = JsonSerializer.Deserialize<List<Dictionary<string, string>>>(mail_row.tenants);

                                                foreach (var tenant in tenants_list)
                                                    if (tenant.ContainsKey("Name"))
                                                        tenants_string = tenants_string + tenant["Name"] + ", ";

                                                tenants_string = tenants_string.Remove(tenants_string.Length - 2);
                                            }
                                            catch (Exception ex)
                                            {
                                                Logging.Handler.Error("Settings.Notification.E-Mail.Manage_Notifications", "Extract tenants to table", ex.Message);
                                            }
                                        }
                                        <span style="display: flex; align-items: center;">
                                            <MudIcon Icon="@Icons.Material.Filled.People" Size="Size.Small" />&nbsp;@tenants_string
                                        </span>
                                    </MudTd>

                                    <MudTd DataLabel="" @onclick="() => Mail_Notifications_RowClickHandler(mail_row)" class="@Mail_Notifications_GetRowClass(mail_row)" style="white-space: nowrap;">
                                        <span style="display: flex; align-items: center;">
                                            @if (permissions_settings_notifications_mail_test)
                                            {
                                                <MudButton Size="Size.Small" Variant="@Variant.Filled" Color="@Color.Default" StartIcon="@Icons.Material.Filled.Send" OnClick="@(() => Send_Mail(mail_row.mail_address))">Testalarm</MudButton>
                                            }

                                            @if (permissions_settings_notifications_mail_edit)
                                            {
                                                <MudButton Class="ml-2" Size="Size.Small" Variant="@Variant.Filled" Color="@Color.Default" StartIcon="@Icons.Material.Filled.Edit" OnClick="@(() => Show_Edit_Mail_Notification_Dialog(mail_row.id))">Bearbeiten</MudButton>
                                            }

                                            @if (permissions_settings_notifications_mail_delete)
                                            {
                                                <MudButton Class="ml-2" Size="Size.Small" Variant="@Variant.Filled" Color="@Color.Error" StartIcon="@Icons.Material.Filled.Recycling" OnClick="@(() => Show_Delete_Mail_Notification_Dialog(mail_row.id))">Löschen</MudButton>
                                            }
                                        </span>
                                    </MudTd>

                                </RowTemplate>
                                <PagerContent>
                                    <MudTablePager PageSizeOptions="new int[] { 10, 25, 50, 100, 250, 500, int.MaxValue }" RowsPerPageString="Empfänger pro Seite" />
                                </PagerContent>
                            </MudTable>

                        </MudPaper>
                    </MudTabPanel>
                }
                
                @if (permissions_settings_notifications_microsoft_teams_enabled)
                {
                    <MudTabPanel tabindex="1" Text="Microsoft Teams">
                        <MudPaper>

                            @if (permissions_settings_notifications_microsoft_teams_add)
                            {
                                <MudButton Class="mt-2 ml-2" Size="Size.Medium" Color="Color.Default" Variant="Variant.Filled" StartIcon="@Icons.Custom.Brands.Microsoft" OnClick="@Show_Add_Microsoft_Teams_Notification_Dialog">Connector hinzufügen</MudButton>
                            }
                            
                            <MudTable Class="mt-0" Height="60vh" FixedHeader="true" FixedFooter="true" Hover="true" RowsPerPage="25" Dense="true" Items="@microsoft_teams_notifications_mysql_data" Filter="new Func<Microsoft_Teams_Notifications_Entity, bool>(Microsoft_Teams_Notifications_Table_Filter_Func)">
                                <ToolBarContent>
                                    <MudTextField @bind-Value="microsoft_teams_notifications_table_search_string" Placeholder="Suche" Adornment="Adornment.Start" AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Medium" Class="mt-0"></MudTextField>
                                </ToolBarContent>
                                <HeaderContent>
                                    <MudTh Sortable="true" @onclick="() => microsoft_teams_notifications_table_sorted_column = (nameof(Microsoft_Teams_Notifications_Entity.connector_name))" style="white-space: nowrap;">Name</MudTh>
                                    <MudTh Sortable="true" @onclick="() => microsoft_teams_notifications_table_sorted_column = (nameof(Microsoft_Teams_Notifications_Entity.connector_url))" style="white-space: nowrap;">Connector-Webhook-URL</MudTh>
                                    <MudTh Sortable="true" @onclick="() => microsoft_teams_notifications_table_sorted_column = (nameof(Microsoft_Teams_Notifications_Entity.date))" style="white-space: nowrap;">Erstellt</MudTh>
                                    <MudTh Sortable="true" @onclick="() => microsoft_teams_notifications_table_sorted_column = (nameof(Microsoft_Teams_Notifications_Entity.author))" style="white-space: nowrap;">Author</MudTh>
                                    <MudTh Sortable="true" @onclick="() => microsoft_teams_notifications_table_sorted_column = (nameof(Microsoft_Teams_Notifications_Entity.language))" style="white-space: nowrap;">Sprache</MudTh>
                                    <MudTh Sortable="true" @onclick="() => microsoft_teams_notifications_table_sorted_column = (nameof(Microsoft_Teams_Notifications_Entity.tenants))" style="white-space: nowrap;">Mandanten</MudTh>
                                    <MudTh></MudTh>
                                </HeaderContent>
                                <RowTemplate Context="teams_row">

                                    <MudTd DataLabel="Connector" @onclick="() => Microsoft_Teams_Notifications_RowClickHandler(teams_row)" class="@Microsoft_Teams_Notifications_GetRowClass(teams_row)" style="white-space: nowrap;">
                                        <span style="display: flex; align-items: center;">
                                            <MudIcon Icon="@Icons.Custom.Brands.Microsoft" Size="Size.Small" />&nbsp;@teams_row.connector_name
                                        </span>
                                    </MudTd>

                                    <MudTd DataLabel="Url" @onclick="() => Microsoft_Teams_Notifications_RowClickHandler(teams_row)" class="@Microsoft_Teams_Notifications_GetRowClass(teams_row)" style="white-space: nowrap;">
                                        <span style="display: flex; align-items: center;">
                                            <MudIcon Icon="@Icons.Material.Filled.Link" Size="Size.Small" />&nbsp;
                                            <input type="password" class="mud-input mud-input-text" value="@teams_row.connector_url" disabled />
                                        </span>
                                    </MudTd>

                                    <MudTd DataLabel="Erstellt" @onclick="() => Microsoft_Teams_Notifications_RowClickHandler(teams_row)" class="@Microsoft_Teams_Notifications_GetRowClass(teams_row)" style="white-space: nowrap;">
                                        <span style="display: flex; align-items: center;">
                                            <MudIcon Icon="@Icons.Material.Filled.DateRange" Size="Size.Small" />&nbsp;@teams_row.date
                                        </span>
                                    </MudTd>

                                    <MudTd DataLabel="Author" @onclick="() => Microsoft_Teams_Notifications_RowClickHandler(teams_row)" class="@Microsoft_Teams_Notifications_GetRowClass(teams_row)" style="white-space: nowrap;">
                                        <span style="display: flex; align-items: center;">
                                            <MudIcon Icon="@Icons.Material.Filled.SupportAgent" Size="Size.Small" />&nbsp;@teams_row.author
                                        </span>
                                    </MudTd>

                                    <MudTd DataLabel="Sprache" @onclick="() => Microsoft_Teams_Notifications_RowClickHandler(teams_row)" class="@Microsoft_Teams_Notifications_GetRowClass(teams_row)" style="white-space: nowrap;">
                                        @{
                                            if (teams_row.language == "de")
                                                teams_row.language = "Deutsch";
                                            else if (teams_row.language == "en")
                                                teams_row.language = "Englisch";
                                        }
                                        <span style="display: flex; align-items: center;">
                                            <MudIcon Icon="@Icons.Material.Filled.Language" Size="Size.Small" />&nbsp;@teams_row.language
                                        </span>
                                    </MudTd>

                                    <MudTd DataLabel="Mandanten" @onclick="() => Microsoft_Teams_Notifications_RowClickHandler(teams_row)" class="@Microsoft_Teams_Notifications_GetRowClass(teams_row)" style="white-space: nowrap;">
                                        @{
                                            string tenants_string = "";

                                            try
                                            {
                                                var tenants_list = JsonSerializer.Deserialize<List<Dictionary<string, string>>>(teams_row.tenants);

                                                foreach (var tenant in tenants_list)
                                                    if (tenant.ContainsKey("Name"))
                                                        tenants_string = tenants_string + tenant["Name"] + ", ";

                                                tenants_string = tenants_string.Remove(tenants_string.Length - 2);
                                            }
                                            catch (Exception ex)
                                            {
                                                Logging.Handler.Error("Settings.Notification.E-Mail.Manage_Notifications", "Extract tenants to table", ex.Message);
                                            }
                                        }
                                        <span style="display: flex; align-items: center;">
                                            <MudIcon Icon="@Icons.Material.Filled.People" Size="Size.Small" />&nbsp;@tenants_string
                                        </span>
                                    </MudTd>

                                    <MudTd DataLabel="Author" @onclick="() => Microsoft_Teams_Notifications_RowClickHandler(teams_row)" class="@Microsoft_Teams_Notifications_GetRowClass(teams_row)">
                                        <span style="display: flex; align-items: center;">
                                            @if (permissions_settings_notifications_microsoft_teams_test)
                                            {
                                                <MudButton Class="ml-2" Size="Size.Small" Variant="@Variant.Filled" Color="@Color.Default" StartIcon="@Icons.Material.Filled.Send" OnClick="@(() => Send_Microsoft_Teams_Message(teams_row.connector_name))">Testalarm</MudButton>
                                            }

                                            @if (permissions_settings_notifications_microsoft_teams_edit)
                                            {
                                                <MudButton Class="ml-2" Size="Size.Small" Variant="@Variant.Filled" Color="@Color.Default" StartIcon="@Icons.Material.Filled.Edit" OnClick="@(() => Show_Edit_Microsoft_Teams_Notification_Dialog(teams_row.connector_name))">Bearbeiten</MudButton>
                                            }

                                            @if (permissions_settings_notifications_microsoft_teams_delete)
                                            {
                                                <MudButton Class="ml-2" Size="Size.Small" Variant="@Variant.Filled" Color="@Color.Error" StartIcon="@Icons.Material.Filled.Recycling" OnClick="@(() => Show_Delete_Microsoft_Teams_Notification_Dialog(teams_row.connector_name))">Löschen</MudButton>
                                            }
                                        </span>
                                    </MudTd>
                                </RowTemplate>
                                <PagerContent>
                                    <MudTablePager PageSizeOptions="new int[] { 10, 25, 50, 100, 250, 500, int.MaxValue }" RowsPerPageString="Connectoren pro Seite" />
                                </PagerContent>
                            </MudTable>

                        </MudPaper>
                    </MudTabPanel>
                }
                
                @if (permissions_settings_notifications_telegram_enabled)
                {
                    <MudTabPanel tabindex="2" Text="Telegram">
                        <MudPaper>

                            @if (permissions_settings_notifications_telegram_add)
                            {
                                <MudButton Class="mt-2 ml-2" Size="Size.Medium" Color="Color.Default" Variant="Variant.Filled" StartIcon="@Icons.Custom.Brands.Telegram" OnClick="@Show_Add_Telegram_Notification_Dialog">Bot hinzufügen</MudButton>
                            }
                            
                            <MudTable Class="mt-0" Height="60vh" FixedHeader="true" FixedFooter="true" Hover="true" RowsPerPage="25" Dense="true" Items="@telegram_notifications_mysql_data" Filter="new Func<Telegram_Notifications_Entity, bool>(Telegram_Notifications_Table_Filter_Func)">
                                <ToolBarContent>
                                    <MudTextField @bind-Value="telegram_notifications_table_search_string" Placeholder="Suche" Adornment="Adornment.Start" AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Medium" Class="mt-0"></MudTextField>
                                </ToolBarContent>
                                <HeaderContent>
                                    <MudTh Sortable="true" @onclick="() => telegram_notifications_table_sorted_column = (nameof(Telegram_Notifications_Entity.bot_name))" style="white-space: nowrap;">Bot Name</MudTh>
                                    <MudTh Sortable="true" @onclick="() => telegram_notifications_table_sorted_column = (nameof(Telegram_Notifications_Entity.bot_token))" style="white-space: nowrap;">Bot Token</MudTh>
                                    <MudTh Sortable="true" @onclick="() => telegram_notifications_table_sorted_column = (nameof(Telegram_Notifications_Entity.chat_id))" style="white-space: nowrap;">Chat ID</MudTh>
                                    <MudTh Sortable="true" @onclick="() => telegram_notifications_table_sorted_column = (nameof(Telegram_Notifications_Entity.date))" style="white-space: nowrap;">Erstellt</MudTh>
                                    <MudTh Sortable="true" @onclick="() => telegram_notifications_table_sorted_column = (nameof(Telegram_Notifications_Entity.author))" style="white-space: nowrap;">Author</MudTh>
                                    <MudTh Sortable="true" @onclick="() => telegram_notifications_table_sorted_column = (nameof(Telegram_Notifications_Entity.language))" style="white-space: nowrap;">Sprache</MudTh>
                                    <MudTh Sortable="true" @onclick="() => telegram_notifications_table_sorted_column = (nameof(Telegram_Notifications_Entity.tenants))" style="white-space: nowrap;">Mandanten</MudTh>
                                    <MudTh></MudTh>
                                </HeaderContent>
                                <RowTemplate Context="telegram_row">

                                    <MudTd DataLabel="Connector" @onclick="() => Telegram_Notifications_RowClickHandler(telegram_row)" class="@Telegram_Notifications_GetRowClass(telegram_row)" style="white-space: nowrap;">
                                        <span style="display: flex; align-items: center;">
                                            <MudIcon Icon="@Icons.Material.Filled.Abc" Size="Size.Small" />&nbsp;@telegram_row.bot_name
                                        </span>
                                    </MudTd>

                                    <MudTd DataLabel="Url" @onclick="() => Telegram_Notifications_RowClickHandler(telegram_row)" class="@Telegram_Notifications_GetRowClass(telegram_row)" style="white-space: nowrap;">
                                        <span style="display: flex; align-items: center;">
                                            <MudIcon Icon="@Icons.Material.Filled.Token" Size="Size.Small" />&nbsp;
                                            <input type="password" class="mud-input mud-input-text" value="@telegram_row.bot_token" disabled />
                                        </span>
                                    </MudTd>

                                    <MudTd DataLabel="Url" @onclick="() => Telegram_Notifications_RowClickHandler(telegram_row)" class="@Telegram_Notifications_GetRowClass(telegram_row)" style="white-space: nowrap;">
                                        <span style="display: flex; align-items: center;">
                                            <MudIcon Icon="@Icons.Material.Filled.Chat" Size="Size.Small" />&nbsp;
                                            <input type="password" class="mud-input mud-input-text" value="@telegram_row.chat_id" disabled />
                                        </span>
                                    </MudTd>

                                    <MudTd DataLabel="Erstellt" @onclick="() => Telegram_Notifications_RowClickHandler(telegram_row)" class="@Telegram_Notifications_GetRowClass(telegram_row)" style="white-space: nowrap;">
                                        <span style="display: flex; align-items: center;">
                                            <MudIcon Icon="@Icons.Material.Filled.DateRange" Size="Size.Small" />&nbsp;@telegram_row.date
                                        </span>
                                    </MudTd>

                                    <MudTd DataLabel="Author" @onclick="() => Telegram_Notifications_RowClickHandler(telegram_row)" class="@Telegram_Notifications_GetRowClass(telegram_row)" style="white-space: nowrap;">
                                        <span style="display: flex; align-items: center;">
                                            <MudIcon Icon="@Icons.Material.Filled.SupportAgent" Size="Size.Small" />&nbsp;@telegram_row.author
                                        </span>
                                    </MudTd>

                                    <MudTd DataLabel="Sprache" @onclick="() => Telegram_Notifications_RowClickHandler(telegram_row)" class="@Telegram_Notifications_GetRowClass(telegram_row)" style="white-space: nowrap;">
                                        @{
                                            if (telegram_row.language == "de")
                                                telegram_row.language = "Deutsch";
                                            else if (telegram_row.language == "en")
                                                telegram_row.language = "Englisch";
                                        }
                                        <span style="display: flex; align-items: center;">
                                            <MudIcon Icon="@Icons.Material.Filled.Language" Size="Size.Small" />&nbsp;@telegram_row.language
                                        </span>
                                    </MudTd>

                                    <MudTd DataLabel="Mandanten" @onclick="() => Telegram_Notifications_RowClickHandler(telegram_row)" class="@Telegram_Notifications_GetRowClass(telegram_row)" style="white-space: nowrap;">
                                        @{
                                            string tenants_string = "";

                                            try
                                            {
                                                var tenants_list = JsonSerializer.Deserialize<List<Dictionary<string, string>>>(telegram_row.tenants);

                                                foreach (var tenant in tenants_list)
                                                    if (tenant.ContainsKey("Name"))
                                                        tenants_string = tenants_string + tenant["Name"] + ", ";

                                                tenants_string = tenants_string.Remove(tenants_string.Length - 2);
                                            }
                                            catch (Exception ex)
                                            {
                                                Logging.Handler.Error("Settings.Notification.E-Mail.Manage_Notifications", "Extract tenants to table", ex.Message);
                                            }
                                        }
                                        <span style="display: flex; align-items: center;">
                                            <MudIcon Icon="@Icons.Material.Filled.People" Size="Size.Small" />&nbsp;@tenants_string
                                        </span>
                                    </MudTd>

                                    <MudTd DataLabel="Author" @onclick="() => Telegram_Notifications_RowClickHandler(telegram_row)" class="@Telegram_Notifications_GetRowClass(telegram_row)" style="white-space: nowrap;">
                                        <span style="display: flex; align-items: center;">
                                            @if (permissions_settings_notifications_telegram_test)
                                            {
                                                <MudButton Class="ml-2" Size="Size.Small" Variant="@Variant.Filled" Color="@Color.Default" StartIcon="@Icons.Material.Filled.Send" OnClick="@(() => Send_Telegram_Message(telegram_row.bot_name))">Testalarm</MudButton>
                                            }

                                            @if (permissions_settings_notifications_telegram_edit)
                                            {
                                                <MudButton Class="ml-2" Size="Size.Small" Variant="@Variant.Filled" Color="@Color.Default" StartIcon="@Icons.Material.Filled.Edit" OnClick="@(() => Show_Edit_Telegram_Notification_Dialog(telegram_row.bot_name))">Bearbeiten</MudButton>
                                            }

                                            @if (permissions_settings_notifications_telegram_delete)
                                            {
                                                <MudButton Class="ml-2" Size="Size.Small" Variant="@Variant.Filled" Color="@Color.Error" StartIcon="@Icons.Material.Filled.Recycling" OnClick="@(() => Show_Delete_Telegram_Notification_Dialog(telegram_row.bot_name))">Löschen</MudButton>
                                            }
                                        </span>
                                    </MudTd>
                                </RowTemplate>
                                <PagerContent>
                                    <MudTablePager PageSizeOptions="new int[] { 10, 25, 50, 100, 250, 500, int.MaxValue }" RowsPerPageString="Bots pro Seite" />
                                </PagerContent>
                            </MudTable>
                        </MudPaper>
                    </MudTabPanel>
                }
                
                @if (permissions_settings_notifications_ntfysh_enabled)
                {
                    <MudTabPanel tabindex="3" Text="Ntfy.sh">
                        <MudPaper>

                            @if (permissions_settings_notifications_ntfysh_add)
                            {
                                <MudButton Class="mt-2 ml-2" Size="Size.Medium" Color="Color.Default" Variant="Variant.Filled" StartIcon="@Icons.Material.Filled.Topic" OnClick="@Show_Add_Ntfy_sh_Notification_Dialog">Thema hinzufügen</MudButton>
                            }
                            
                            <MudTable Class="mt-0" Height="60vh" FixedHeader="true" FixedFooter="true" Hover="true" RowsPerPage="25" Dense="true" Items="@ntfy_sh_notifications_mysql_data" Filter="new Func<Ntfy_sh_Notifications_Entity, bool>(Ntfy_sh_Notifications_Table_Filter_Func)">
                                <ToolBarContent>
                                    <MudTextField @bind-Value="ntfy_sh_notifications_table_search_string" Placeholder="Suche" Adornment="Adornment.Start" AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Medium" Class="mt-0"></MudTextField>
                                </ToolBarContent>
                                <HeaderContent>
                                    <MudTh Sortable="true" @onclick="() => ntfy_sh_notifications_table_sorted_column = (nameof(Ntfy_sh_Notifications_Entity.topic_name))" style="white-space: nowrap;">Thema</MudTh>
                                    <MudTh Sortable="true" @onclick="() => ntfy_sh_notifications_table_sorted_column = (nameof(Ntfy_sh_Notifications_Entity.topic_url))" style="white-space: nowrap;">Url</MudTh>
                                    <MudTh Sortable="true" @onclick="() => ntfy_sh_notifications_table_sorted_column = (nameof(Ntfy_sh_Notifications_Entity.access_token))" style="white-space: nowrap;">Token</MudTh>
                                    <MudTh Sortable="true" @onclick="() => ntfy_sh_notifications_table_sorted_column = (nameof(Ntfy_sh_Notifications_Entity.date))" style="white-space: nowrap;">Erstellt</MudTh>
                                    <MudTh Sortable="true" @onclick="() => ntfy_sh_notifications_table_sorted_column = (nameof(Ntfy_sh_Notifications_Entity.author))" style="white-space: nowrap;">Author</MudTh>
                                    <MudTh Sortable="true" @onclick="() => ntfy_sh_notifications_table_sorted_column = (nameof(Ntfy_sh_Notifications_Entity.language))" style="white-space: nowrap;">Sprache</MudTh>
                                    <MudTh Sortable="true" @onclick="() => ntfy_sh_notifications_table_sorted_column = (nameof(Ntfy_sh_Notifications_Entity.tenants))" style="white-space: nowrap;">Mandanten</MudTh>
                                    <MudTh></MudTh>
                                </HeaderContent>
                                <RowTemplate Context="ntfy_sh_row">

                                    <MudTd DataLabel="Connector" @onclick="() => Ntfy_sh_Notifications_RowClickHandler(ntfy_sh_row)" class="@Ntfy_sh_Notifications_GetRowClass(ntfy_sh_row)" style="white-space: nowrap;">
                                        <span style="display: flex; align-items: center;">
                                            <MudIcon Icon="@Icons.Material.Filled.Topic" Size="Size.Small" />&nbsp;@ntfy_sh_row.topic_name
                                        </span>
                                    </MudTd>

                                    <MudTd DataLabel="Connector" @onclick="() => Ntfy_sh_Notifications_RowClickHandler(ntfy_sh_row)" class="@Ntfy_sh_Notifications_GetRowClass(ntfy_sh_row)" style="white-space: nowrap;">
                                        <span style="display: flex; align-items: center;">
                                            <MudIcon Icon="@Icons.Material.Filled.Link" Size="Size.Small" />&nbsp;
                                            <input type="password" class="mud-input mud-input-text" value="@ntfy_sh_row.topic_url" disabled />
                                        </span>
                                    </MudTd>

                                    <MudTd DataLabel="Connector" @onclick="() => Ntfy_sh_Notifications_RowClickHandler(ntfy_sh_row)" class="@Ntfy_sh_Notifications_GetRowClass(ntfy_sh_row)" style="white-space: nowrap;">
                                        <span style="display: flex; align-items: center;">
                                            <MudIcon Icon="@Icons.Material.Filled.Token" Size="Size.Small" />&nbsp;
                                            <input type="password" class="mud-input mud-input-text" value="@ntfy_sh_row.access_token" disabled />
                                        </span>
                                    </MudTd>

                                    <MudTd DataLabel="Erstellt" @onclick="() => Ntfy_sh_Notifications_RowClickHandler(ntfy_sh_row)" class="@Ntfy_sh_Notifications_GetRowClass(ntfy_sh_row)" style="white-space: nowrap;">
                                        <span style="display: flex; align-items: center;">
                                            <MudIcon Icon="@Icons.Material.Filled.DateRange" Size="Size.Small" />&nbsp;@ntfy_sh_row.date
                                        </span>
                                    </MudTd>

                                    <MudTd DataLabel="Author" @onclick="() => Ntfy_sh_Notifications_RowClickHandler(ntfy_sh_row)" class="@Ntfy_sh_Notifications_GetRowClass(ntfy_sh_row)" style="white-space: nowrap;">
                                        <span style="display: flex; align-items: center;">
                                            <MudIcon Icon="@Icons.Material.Filled.SupportAgent" Size="Size.Small" />&nbsp;@ntfy_sh_row.author
                                        </span>
                                    </MudTd>

                                    <MudTd DataLabel="Sprache" @onclick="() => Ntfy_sh_Notifications_RowClickHandler(ntfy_sh_row)" class="@Ntfy_sh_Notifications_GetRowClass(ntfy_sh_row)" style="white-space: nowrap;">
                                        @{
                                            if (ntfy_sh_row.language == "de")
                                                ntfy_sh_row.language = "Deutsch";
                                            else if (ntfy_sh_row.language == "en")
                                                ntfy_sh_row.language = "Englisch";
                                        }
                                        <span style="display: flex; align-items: center;">
                                            <MudIcon Icon="@Icons.Material.Filled.Language" Size="Size.Small" />&nbsp;@ntfy_sh_row.language
                                        </span>
                                    </MudTd>

                                    <MudTd DataLabel="Mandanten" @onclick="() => Ntfy_sh_Notifications_RowClickHandler(ntfy_sh_row)" class="@Ntfy_sh_Notifications_GetRowClass(ntfy_sh_row)" style="white-space: nowrap;">
                                        @{
                                            string tenants_string = "";

                                            try
                                            {
                                                var tenants_list = JsonSerializer.Deserialize<List<Dictionary<string, string>>>(ntfy_sh_row.tenants);

                                                foreach (var tenant in tenants_list)
                                                    if (tenant.ContainsKey("Name"))
                                                        tenants_string = tenants_string + tenant["Name"] + ", ";

                                                tenants_string = tenants_string.Remove(tenants_string.Length - 2);
                                            }
                                            catch (Exception ex)
                                            {
                                                Logging.Handler.Error("Settings.Notification.E-Mail.Manage_Notifications", "Extract tenants to table", ex.Message);
                                            }
                                        }
                                        <span style="display: flex; align-items: center;">
                                            <MudIcon Icon="@Icons.Material.Filled.People" Size="Size.Small" />&nbsp;@tenants_string
                                        </span>
                                    </MudTd>

                                    <MudTd DataLabel="Author" @onclick="() => Ntfy_sh_Notifications_RowClickHandler(ntfy_sh_row)" class="@Ntfy_sh_Notifications_GetRowClass(ntfy_sh_row)" style="white-space: nowrap;">
                                        <span style="display: flex; align-items: center;">
                                            @if (permissions_settings_notifications_ntfysh_test)
                                            {
                                                <MudButton Class="ml-2" Size="Size.Small" Variant="@Variant.Filled" Color="@Color.Default" StartIcon="@Icons.Material.Filled.Send" OnClick="@(() => Send_Ntfy_sh_Message(ntfy_sh_row.topic_name))">Testalarm</MudButton>
                                            }

                                            @if (permissions_settings_notifications_ntfysh_edit)
                                            {
                                                <MudButton Class="ml-2" Size="Size.Small" Variant="@Variant.Filled" Color="@Color.Default" StartIcon="@Icons.Material.Filled.Edit" OnClick="@(() => Show_Edit_Ntfy_sh_Notification_Dialog(ntfy_sh_row.topic_name))">Bearbeiten</MudButton>
                                            }

                                            @if (permissions_settings_notifications_ntfysh_delete)
                                            {
                                                <MudButton Class="ml-2" Size="Size.Small" Variant="@Variant.Filled" Color="@Color.Error" StartIcon="@Icons.Material.Filled.Recycling" OnClick="@(() => Show_Delete_Ntfy_sh_Notification_Dialog(ntfy_sh_row.topic_name))">Löschen</MudButton>
                                            }
                                        </span>
                                    </MudTd>
                                </RowTemplate>
                                <PagerContent>
                                    <MudTablePager PageSizeOptions="new int[] { 10, 25, 50, 100, 250, 500, int.MaxValue }" RowsPerPageString="Themen pro Seite" />
                                </PagerContent>
                            </MudTable>
                        </MudPaper>
                    </MudTabPanel>
                }
                
            </MudTabs>
        }

        </Authorized>
</AuthorizeView>
        
@code {

    #region Permissions System

    private string permissions_json = String.Empty;
    private string permissions_tenants_json = String.Empty;
    public static List<string> permissions_tenants_list = new List<string> { };

    private bool permissions_settings_enabled = false;
    private bool permissions_settings_notifications_enabled = false;
    
    private bool permissions_settings_notifications_mail_enabled = false;
    private bool permissions_settings_notifications_mail_add = false;
    private bool permissions_settings_notifications_mail_smtp = false;
    private bool permissions_settings_notifications_mail_test = false;
    private bool permissions_settings_notifications_mail_edit = false;
    private bool permissions_settings_notifications_mail_delete = false;
    
    private bool permissions_settings_notifications_microsoft_teams_enabled = false;
    private bool permissions_settings_notifications_microsoft_teams_add = false;
    private bool permissions_settings_notifications_microsoft_teams_test = false;
    private bool permissions_settings_notifications_microsoft_teams_edit = false;
    private bool permissions_settings_notifications_microsoft_teams_delete = false;
    
    private bool permissions_settings_notifications_telegram_enabled = false;
    private bool permissions_settings_notifications_telegram_add = false;
    private bool permissions_settings_notifications_telegram_test = false;
    private bool permissions_settings_notifications_telegram_edit = false;
    private bool permissions_settings_notifications_telegram_delete = false;
    
    private bool permissions_settings_notifications_ntfysh_enabled = false;
    private bool permissions_settings_notifications_ntfysh_add = false;
    private bool permissions_settings_notifications_ntfysh_test = false;
    private bool permissions_settings_notifications_ntfysh_edit = false;
    private bool permissions_settings_notifications_ntfysh_delete = false;

    public class Permissions_Tenants_Activation_State
    {
        public string name { get; set; } = String.Empty;
    }

    private async Task Get_Permissions()
    {
        //Extract user info from users session storage
        var sessionStorage = new ProtectedSessionStorage(JSRuntime, DataProtectionProvider);
        var username = await sessionStorage.GetAsync<string>("username");
        var password = await sessionStorage.GetAsync<string>("password");

        Logging.Handler.Debug("/manage_notifications -> Permissions_Load", "username", username.Value ?? String.Empty);

        //if user info empty, force logout
        if (String.IsNullOrEmpty(username.Value) || String.IsNullOrEmpty(password.Value))
        {
            Logging.Handler.Debug("/manage_notifications -> Permissions_Load", "sessions storage data", "empty, force logout");

            NavigationManager.NavigateTo("/logout", true);
            return;
        }

        //Check if user info is valid, if not, force logout
        if (!await Classes.Authentication.User.Verify_User(username.Value ?? String.Empty, password.Value ?? String.Empty))
        {
            Logging.Handler.Debug("/manage_notifications -> Permissions_Load", "verify user", "incorrect data, force logout");

            NavigationManager.NavigateTo("/logout", true);
            return;
        }

        //Get permissions
        string query = "SELECT * FROM `accounts` WHERE username = @username;";

        MySqlConnection conn = new MySqlConnection(Application_Settings.connectionString);

        try
        {
            await conn.OpenAsync();

            MySqlCommand command = new MySqlCommand(query, conn);
            command.Parameters.AddWithValue("@username", username.Value);

            Logging.Handler.Debug("/manage_notifications -> Permissions_Load", "query", query);

            using (DbDataReader reader = await command.ExecuteReaderAsync())
            {
                if (reader.HasRows)
                {
                    while (await reader.ReadAsync())
                    {
                        permissions_json = reader["permissions"].ToString() ?? String.Empty;
                        permissions_tenants_json = reader["tenants"].ToString() ?? String.Empty;
                    }
                }
            }

            Logging.Handler.Debug("/manage_notifications -> Permissions_Load", "permissions_json", permissions_json);

            //Extract permissions
            if (!String.IsNullOrEmpty(permissions_json))
            {
                using (JsonDocument document = JsonDocument.Parse(permissions_json))
                {
                    //settings_enabled
                    try
                    {
                        JsonElement element = document.RootElement.GetProperty("settings_enabled");
                        permissions_settings_enabled = element.GetBoolean();
                    }
                    catch (Exception ex)
                    {
                        Logging.Handler.Error("/manage_notifications -> Permissions_Load", "permissions_json (permissions_settings_enabled)", ex.Message);
                    }

                    //settings_notifications_enabled
                    try
                    {
                        JsonElement element = document.RootElement.GetProperty("settings_notifications_enabled");
                        permissions_settings_notifications_enabled = element.GetBoolean();
                    }
                    catch (Exception ex)
                    {
                        Logging.Handler.Error("/manage_notifications -> Permissions_Load", "permissions_json (permissions_settings_notifications_enabled)", ex.Message);
                    }

                    //settings_notifications_mail_enabled
                    try
                    {
                        JsonElement element = document.RootElement.GetProperty("settings_notifications_mail_enabled");
                        permissions_settings_notifications_mail_enabled = element.GetBoolean();
                    }
                    catch (Exception ex)
                    {
                        Logging.Handler.Error("/manage_notifications -> Permissions_Load", "permissions_json (settings_notifications_mail_enabled)", ex.Message);
                    }

                    //settings_notifications_mail_add
                    try
                    {
                        JsonElement element = document.RootElement.GetProperty("settings_notifications_mail_add");
                        permissions_settings_notifications_mail_add = element.GetBoolean();
                    }
                    catch (Exception ex)
                    {
                        Logging.Handler.Error("/manage_notifications -> Permissions_Load", "permissions_json (settings_notifications_mail_add)", ex.Message);
                    }

                    //settings_notifications_mail_smtp
                    try
                    {
                        JsonElement element = document.RootElement.GetProperty("settings_notifications_mail_smtp");
                        permissions_settings_notifications_mail_smtp = element.GetBoolean();
                    }
                    catch (Exception ex)
                    {
                        Logging.Handler.Error("/manage_notifications -> Permissions_Load", "permissions_json (settings_notifications_mail_smtp)", ex.Message);
                    }

                    //settings_notifications_mail_test
                    try
                    {
                        JsonElement element = document.RootElement.GetProperty("settings_notifications_mail_test");
                        permissions_settings_notifications_mail_test = element.GetBoolean();
                    }
                    catch (Exception ex)
                    {
                        Logging.Handler.Error("/manage_notifications -> Permissions_Load", "permissions_json (settings_notifications_mail_test)", ex.Message);
                    }

                    //settings_notifications_mail_edit
                    try
                    {
                        JsonElement element = document.RootElement.GetProperty("settings_notifications_mail_edit");
                        permissions_settings_notifications_mail_edit = element.GetBoolean();
                    }
                    catch (Exception ex)
                    {
                        Logging.Handler.Error("/manage_notifications -> Permissions_Load", "permissions_json (settings_notifications_mail_edit)", ex.Message);
                    }

                    //settings_notifications_mail_delete
                    try
                    {
                        JsonElement element = document.RootElement.GetProperty("settings_notifications_mail_delete");
                        permissions_settings_notifications_mail_delete = element.GetBoolean();
                    }
                    catch (Exception ex)
                    {
                        Logging.Handler.Error("/manage_notifications -> Permissions_Load", "permissions_json (settings_notifications_mail_delete)", ex.Message);
                    }

                    //settings_notifications_microsoft_teams_enabled
                    try
                    {
                        JsonElement element = document.RootElement.GetProperty("settings_notifications_microsoft_teams_enabled");
                        permissions_settings_notifications_microsoft_teams_enabled = element.GetBoolean();
                    }
                    catch (Exception ex)
                    {
                        Logging.Handler.Error("/manage_notifications -> Permissions_Load", "permissions_json (settings_notifications_microsoft_teams_enabled)", ex.Message);
                    }

                    //settings_notifications_microsoft_teams_add
                    try
                    {
                        JsonElement element = document.RootElement.GetProperty("settings_notifications_microsoft_teams_add");
                        permissions_settings_notifications_microsoft_teams_add = element.GetBoolean();
                    }
                    catch (Exception ex)
                    {
                        Logging.Handler.Error("/manage_notifications -> Permissions_Load", "permissions_json (settings_notifications_microsoft_teams_add)", ex.Message);
                    }

                    //settings_notifications_microsoft_teams_test
                    try
                    {
                        JsonElement element = document.RootElement.GetProperty("settings_notifications_microsoft_teams_test");
                        permissions_settings_notifications_microsoft_teams_test = element.GetBoolean();
                    }
                    catch (Exception ex)
                    {
                        Logging.Handler.Error("/manage_notifications -> Permissions_Load", "permissions_json (settings_notifications_microsoft_teams_test)", ex.Message);
                    }

                    //settings_notifications_microsoft_teams_edit
                    try
                    {
                        JsonElement element = document.RootElement.GetProperty("settings_notifications_microsoft_teams_edit");
                        permissions_settings_notifications_microsoft_teams_edit = element.GetBoolean();
                    }
                    catch (Exception ex)
                    {
                        Logging.Handler.Error("/manage_notifications -> Permissions_Load", "permissions_json (settings_notifications_microsoft_teams_edit)", ex.Message);
                    }

                    //settings_notifications_microsoft_teams_delete
                    try
                    {
                        JsonElement element = document.RootElement.GetProperty("settings_notifications_microsoft_teams_delete");
                        permissions_settings_notifications_microsoft_teams_delete = element.GetBoolean();
                    }
                    catch (Exception ex)
                    {
                        Logging.Handler.Error("/manage_notifications -> Permissions_Load", "permissions_json (settings_notifications_microsoft_teams_delete)", ex.Message);
                    }

                    //settings_notifications_telegram_enabled
                    try
                    {
                        JsonElement element = document.RootElement.GetProperty("settings_notifications_telegram_enabled");
                        permissions_settings_notifications_telegram_enabled = element.GetBoolean();
                    }
                    catch (Exception ex)
                    {
                        Logging.Handler.Error("/manage_notifications -> Permissions_Load", "permissions_json (settings_notifications_telegram_enabled)", ex.Message);
                    }

                    //settings_notifications_telegram_add
                    try
                    {
                        JsonElement element = document.RootElement.GetProperty("settings_notifications_telegram_add");
                        permissions_settings_notifications_telegram_add = element.GetBoolean();
                    }
                    catch (Exception ex)
                    {
                        Logging.Handler.Error("/manage_notifications -> Permissions_Load", "permissions_json (settings_notifications_telegram_add)", ex.Message);
                    }

                    //settings_notifications_telegram_test
                    try
                    {
                        JsonElement element = document.RootElement.GetProperty("settings_notifications_telegram_test");
                        permissions_settings_notifications_telegram_test = element.GetBoolean();
                    }
                    catch (Exception ex)
                    {
                        Logging.Handler.Error("/manage_notifications -> Permissions_Load", "permissions_json (settings_notifications_telegram_test)", ex.Message);
                    }

                    //settings_notifications_telegram_edit
                    try
                    {
                        JsonElement element = document.RootElement.GetProperty("settings_notifications_telegram_edit");
                        permissions_settings_notifications_telegram_edit = element.GetBoolean();
                    }
                    catch (Exception ex)
                    {
                        Logging.Handler.Error("/manage_notifications -> Permissions_Load", "permissions_json (settings_notifications_telegram_edit)", ex.Message);
                    }

                    //settings_notifications_telegram_delete
                    try
                    {
                        JsonElement element = document.RootElement.GetProperty("settings_notifications_telegram_delete");
                        permissions_settings_notifications_telegram_delete = element.GetBoolean();
                    }
                    catch (Exception ex)
                    {
                        Logging.Handler.Error("/manage_notifications -> Permissions_Load", "permissions_json (settings_notifications_telegram_delete)", ex.Message);
                    }

                    //settings_notifications_ntfysh_enabled
                    try
                    {
                        JsonElement element = document.RootElement.GetProperty("settings_notifications_ntfysh_enabled");
                        permissions_settings_notifications_ntfysh_enabled = element.GetBoolean();
                    }
                    catch (Exception ex)
                    {
                        Logging.Handler.Error("/manage_notifications -> Permissions_Load", "permissions_json (settings_notifications_ntfysh_enabled)", ex.Message);
                    }

                    //settings_notifications_ntfysh_add
                    try
                    {
                        JsonElement element = document.RootElement.GetProperty("settings_notifications_ntfysh_add");
                        permissions_settings_notifications_ntfysh_add = element.GetBoolean();
                    }
                    catch (Exception ex)
                    {
                        Logging.Handler.Error("/manage_notifications -> Permissions_Load", "permissions_json (settings_notifications_ntfysh_add)", ex.Message);
                    }

                    //settings_notifications_ntfysh_test
                    try
                    {
                        JsonElement element = document.RootElement.GetProperty("settings_notifications_ntfysh_test");
                        permissions_settings_notifications_ntfysh_test = element.GetBoolean();
                    }
                    catch (Exception ex)
                    {
                        Logging.Handler.Error("/manage_notifications -> Permissions_Load", "permissions_json (settings_notifications_ntfysh_test)", ex.Message);
                    }

                    //settings_notifications_ntfysh_edit
                    try
                    {
                        JsonElement element = document.RootElement.GetProperty("settings_notifications_ntfysh_edit");
                        permissions_settings_notifications_ntfysh_edit = element.GetBoolean();
                    }
                    catch (Exception ex)
                    {
                        Logging.Handler.Error("/manage_notifications -> Permissions_Load", "permissions_json (settings_notifications_ntfysh_edit)", ex.Message);
                    }

                    //settings_notifications_ntfysh_delete
                    try
                    {
                        JsonElement element = document.RootElement.GetProperty("settings_notifications_ntfysh_delete");
                        permissions_settings_notifications_ntfysh_delete = element.GetBoolean();
                    }
                    catch (Exception ex)
                    {
                        Logging.Handler.Error("/manage_notifications -> Permissions_Load", "permissions_json (settings_notifications_ntfysh_delete)", ex.Message);
                    }
                }
            }
            else if (permissions_json == "[]")
            {
                Logging.Handler.Debug("/manage_notifications -> Permissions_Load", "permissions_json", "Empty, logout user");
                NavigationManager.NavigateTo("/logout", true);
            }
            else
            {
                Logging.Handler.Debug("/manage_notifications -> Permissions_Load", "permissions_json", "Empty, logout user");
                NavigationManager.NavigateTo("/logout", true);
            }

            //Extract tenants from json
            permissions_tenants_list.Clear();
            if (!String.IsNullOrEmpty(permissions_tenants_json))
            {
                //Set the activation state for the tenants
                try
                {
                    List<Permissions_Tenants_Activation_State> tenants_activation_state_list = JsonSerializer.Deserialize<List<Permissions_Tenants_Activation_State>>(permissions_tenants_json);

                    foreach (var tenant in tenants_activation_state_list)
                    {
                        Logging.Handler.Debug("/manage_notifications -> Permissions_Load", "foreach tenant", tenant.name);

                        permissions_tenants_list.Add(tenant.name);
                    }
                }
                catch (Exception ex)
                {
                    Logging.Handler.Error("/manage_notifications -> Permissions_Load (permissions_tenants_json deserialize)", "Result", ex.Message);
                }
            }
            else
            {
                Logging.Handler.Debug("/manage_notifications -> Permissions_Load (permissions_tenants_json deserialize)", "Result", "Empty");
            }
        }
        catch (Exception ex)
        {
            Logging.Handler.Error("/manage_notifications -> Permissions_Load", "general_error (force logout)", ex.Message);
            NavigationManager.NavigateTo("/logout", true);
        }
        finally
        {
            conn.Close();
        }
    }
  
    #endregion

    protected override async Task OnInitializedAsync()
    {
        await Get_Permissions();
        //Check permissions
        if (!permissions_settings_enabled || !permissions_settings_notifications_enabled)
        {
            NavigationManager.NavigateTo("/logout", true);
            return;
        }

        settings_notifications_panel_index  = Convert.ToInt32(await localStorage.GetItemAsync<string>("settings_notifications_panel_index "));
        mail_notifications_mysql_data = await Get_Mail_Notifications_Overview();
        microsoft_teams_notifications_mysql_data = await Get_Microsoft_Teams_Notifications_Overview();
        telegram_notifications_mysql_data = await Get_Telegram_Notifications_Overview();
        ntfy_sh_notifications_mysql_data = await Get_Ntfy_sh_Notifications_Overview();
    }


    int settings_notifications_panel_index = 0;

    private async Task Save_Panel_Index()
    {
        await localStorage.SetItemAsync<string>("settings_notifications_panel_index ", settings_notifications_panel_index.ToString());
    }

    #region Mail

    public List<Mail_Notifications_Entity> mail_notifications_mysql_data;

    public class Mail_Notifications_Entity
    {
        public string id { get; set; } = "Empty";
        public string mail_address { get; set; } = "Empty";
        public string date { get; set; } = "Empty";
        public string author { get; set; } = "Empty";
        public string language { get; set; } = "Empty";
        public string tenants { get; set; } = "Empty";
    }

    private string mail_notifications_table_view_port = "70vh";
    private string mail_notifications_table_sorted_column;
    private string mail_notifications_table_search_string = "";

    private bool Mail_Notifications_Table_Filter_Func(Mail_Notifications_Entity row)
    {
        if (string.IsNullOrEmpty(mail_notifications_table_search_string))
            return true;

        //Search logic for each column
        return row.mail_address.Contains(mail_notifications_table_search_string, StringComparison.OrdinalIgnoreCase) ||
               row.date.Contains(mail_notifications_table_search_string, StringComparison.OrdinalIgnoreCase) ||
               row.author.Contains(mail_notifications_table_search_string, StringComparison.OrdinalIgnoreCase) ||
               row.language.Contains(mail_notifications_table_search_string, StringComparison.OrdinalIgnoreCase) ||
               row.tenants.Contains(mail_notifications_table_search_string, StringComparison.OrdinalIgnoreCase);
    }

    private string mail_notifications_selectedRowContent = ""; // Hier wird der Inhalt der ausgewählten Zeile gespeichert

    // Der Handler für den TableRowClick-Event
    private void Mail_Notifications_RowClickHandler(Mail_Notifications_Entity row)
    {
        mail_notifications_selectedRowContent = row.id;
    }

    private string Mail_Notifications_GetRowClass(Mail_Notifications_Entity row)
    {
        return row.id == mail_notifications_selectedRowContent ? "selected-row" : "";
    }

    private async Task Show_Add_Mail_Notification_Dialog()
    {
        var options = new DialogOptions
            {
                
                MaxWidth = MaxWidth.Small,
                BackgroundClass = "dialog-blurring",

            };

        await this.DialogService.Show<Settings.Notifications.E_Mail.Add_Mail_Notification_Dialog>(string.Empty, new DialogParameters(), options).Result;
    }

    private async Task Show_Edit_Mail_Notification_Dialog(string id)
    {
        await localStorage.SetItemAsync("temp_mail_recipient_id", await Base64.Handler.Encode(id));

        var options = new DialogOptions
            {
                
                MaxWidth = MaxWidth.Small,
                BackgroundClass = "dialog-blurring",

            };

        await this.DialogService.Show<Settings.Notifications.E_Mail.Edit_Mail_Notification_Dialog>(string.Empty, new DialogParameters(), options).Result;
    }

    private async Task Show_Delete_Mail_Notification_Dialog(string id)
    {
        await localStorage.SetItemAsync("temp_mail_recipient_id", await Base64.Handler.Encode(id));

        var options = new DialogOptions
            {
                
                MaxWidth = MaxWidth.Small,
                BackgroundClass = "dialog-blurring",

            };

        await this.DialogService.Show<Settings.Notifications.E_Mail.Delete_Mail_Notification_Dialog>(string.Empty, new DialogParameters(), options).Result;
    }

    private async Task Show_SMTP_Settings_Dialog()
    {
        var options = new DialogOptions
            {
                
                MaxWidth = MaxWidth.Small,
                BackgroundClass = "dialog-blurring",

            };

        await this.DialogService.Show<Settings.Notifications.E_Mail.Smtp_Settings_Dialog>(string.Empty, new DialogParameters(), options).Result;
    }

    private async Task<List<Mail_Notifications_Entity>> Get_Mail_Notifications_Overview()
    {
        List<Mail_Notifications_Entity> result = new List<Mail_Notifications_Entity>();

        MySqlConnection conn = new MySqlConnection(Application_Settings.connectionString);

        try
        {
            await conn.OpenAsync();

            MySqlCommand command = new MySqlCommand("SELECT * FROM mail_notifications;", conn);
            using (DbDataReader reader = await command.ExecuteReaderAsync())
            {
                if (reader.HasRows)
                {
                    while (await reader.ReadAsync())
                    {
                        Mail_Notifications_Entity entity = new Mail_Notifications_Entity
                        {
                            id = reader["id"].ToString() ?? "",
                            mail_address = await Base64.Handler.Decode(reader["mail_address"].ToString() ?? ""),
                            date = reader["date"].ToString() ?? "",
                            author = await Base64.Handler.Decode(reader["author"].ToString() ?? ""),
                            language = reader["language"].ToString() ?? "",
                            tenants = reader["tenants"].ToString() ?? "",
                        };

                        result.Add(entity);
                    }
                }
            }

        }
        catch (Exception ex)
        {
            Logging.Handler.Error("class", "Get_Mail_Notifications_Overview", ex.Message);
        }
        finally
        {
            conn.Close();
        }

        return result;
    }

    private async Task Send_Mail(string mail_address)
    {
        this.Snackbar.Configuration.ShowCloseIcon = true;
        this.Snackbar.Configuration.PositionClass = Defaults.Classes.Position.BottomRight;

        string result = await Classes.Helper.Notifications.Smtp.Send_Mail(mail_address, "NetLock - Test Alert", "Test.");

        if (result == "success")
        {
            this.Snackbar.Add("Erfolgreich versendet.", Severity.Success);
        }
        else
        {
            this.Snackbar.Add("Senden fehlgeschlagen: " + result, Severity.Error);
        }
    }

    #endregion

    #region MS_Teams

    public List<Microsoft_Teams_Notifications_Entity> microsoft_teams_notifications_mysql_data;

    public class Microsoft_Teams_Notifications_Entity
    {
        public string connector_name { get; set; } = "Empty";
        public string connector_url { get; set; } = "Empty";
        public string date { get; set; } = "Empty";
        public string author { get; set; } = "Empty";
        public string language { get; set; } = "Empty";
        public string tenants { get; set; } = "Empty";
    }

    private string microsoft_teams_notifications_table_view_port = "70vh";
    private string microsoft_teams_notifications_table_sorted_column;
    private string microsoft_teams_notifications_table_search_string = "";

    private bool Microsoft_Teams_Notifications_Table_Filter_Func(Microsoft_Teams_Notifications_Entity row)
    {
        if (string.IsNullOrEmpty(microsoft_teams_notifications_table_search_string))
            return true;

        //Search logic for each column
        return row.connector_name.Contains(microsoft_teams_notifications_table_search_string, StringComparison.OrdinalIgnoreCase) ||
               row.date.Contains(microsoft_teams_notifications_table_search_string, StringComparison.OrdinalIgnoreCase) ||
               row.author.Contains(microsoft_teams_notifications_table_search_string, StringComparison.OrdinalIgnoreCase) ||
               row.language.Contains(microsoft_teams_notifications_table_search_string, StringComparison.OrdinalIgnoreCase) ||
               row.tenants.Contains(microsoft_teams_notifications_table_search_string, StringComparison.OrdinalIgnoreCase);
    }

    private string microsoft_teams_notifications_selectedRowContent = ""; // Hier wird der Inhalt der ausgewählten Zeile gespeichert

    // Der Handler für den TableRowClick-Event
    private void Microsoft_Teams_Notifications_RowClickHandler(Microsoft_Teams_Notifications_Entity row)
    {
        microsoft_teams_notifications_selectedRowContent = row.connector_name;
    }

    private string Microsoft_Teams_Notifications_GetRowClass(Microsoft_Teams_Notifications_Entity row)
    {
        return row.connector_name == microsoft_teams_notifications_selectedRowContent ? "selected-row" : "";
    }

    private async Task Show_Add_Microsoft_Teams_Notification_Dialog()
    {
        var options = new DialogOptions
            {
                
                MaxWidth = MaxWidth.Small,
                BackgroundClass = "dialog-blurring",

            };

        await this.DialogService.Show<Settings.Notifications.Microsoft_Teams.Add_Microsoft_Teams_Notification_Dialog>(string.Empty, new DialogParameters(), options).Result;
    }

    private async Task Show_Edit_Microsoft_Teams_Notification_Dialog(string connector_name)
    {
        await localStorage.SetItemAsync("temp_microsoft_teams_connector_name", await Base64.Handler.Encode(connector_name));

        var options = new DialogOptions
            {
                
                MaxWidth = MaxWidth.Small,
                BackgroundClass = "dialog-blurring",

            };

        await this.DialogService.Show<Settings.Notifications.Microsoft_Teams.Edit_Microsoft_Teams_Notification_Dialog>(string.Empty, new DialogParameters(), options).Result;
    }

    private async Task Show_Delete_Microsoft_Teams_Notification_Dialog(string connector_name)
    {
        await localStorage.SetItemAsync("temp_microsoft_teams_connector_name", await Base64.Handler.Encode(connector_name));

        var options = new DialogOptions
            {
                
                MaxWidth = MaxWidth.Small,
                BackgroundClass = "dialog-blurring",

            };

        await this.DialogService.Show<Settings.Notifications.Microsoft_Teams.Delete_Microsoft_Teams_Notification_Dialog>(string.Empty, new DialogParameters(), options).Result;
    }

    private async Task<List<Microsoft_Teams_Notifications_Entity>> Get_Microsoft_Teams_Notifications_Overview()
    {
        List<Microsoft_Teams_Notifications_Entity> result = new List<Microsoft_Teams_Notifications_Entity>();

        MySqlConnection conn = new MySqlConnection(Application_Settings.connectionString);

        try
        {
            await conn.OpenAsync();

            MySqlCommand command = new MySqlCommand("SELECT * FROM microsoft_teams_notifications;", conn);
            using (DbDataReader reader = await command.ExecuteReaderAsync())
            {
                if (reader.HasRows)
                {
                    while (await reader.ReadAsync())
                    {
                        Microsoft_Teams_Notifications_Entity entity = new Microsoft_Teams_Notifications_Entity
                        {
                            connector_name = await Base64.Handler.Decode(reader["connector_name"].ToString() ?? ""),
                            connector_url = await Base64.Handler.Decode(reader["connector_url"].ToString() ?? ""),
                            date = reader["date"].ToString() ?? "",
                            author = await Base64.Handler.Decode(reader["author"].ToString() ?? ""),
                            language = reader["language"].ToString() ?? "",
                            tenants = reader["tenants"].ToString() ?? "",
                        };

                        result.Add(entity);
                    }
                }
            }

        }
        catch (Exception ex)
        {
            Logging.Handler.Error("class", "Get_Mail_Notifications_Overview", ex.Message);
        }
        finally
        {
            conn.Close();
        }

        return result;
    }

    private async Task Send_Microsoft_Teams_Message(string connector_name)
    {
        this.Snackbar.Configuration.ShowCloseIcon = true;
        this.Snackbar.Configuration.PositionClass = Defaults.Classes.Position.BottomRight;

        string result = await Classes.Helper.Notifications.Microsoft_Teams.Send_Message(await Base64.Handler.Encode(connector_name), "NetLock Alert: Test.<br>Connector Name: " + connector_name);

        if (result == "success")
        {
            this.Snackbar.Add("Erfolgreich versendet.", Severity.Success);
        }
        else
        {
            this.Snackbar.Add("Senden fehlgeschlagen: " + result, Severity.Error);
        }
    }

    #endregion

    #region Telegram

    public List<Telegram_Notifications_Entity> telegram_notifications_mysql_data;

    public class Telegram_Notifications_Entity
    {
        public string bot_name { get; set; } = "Empty";
        public string bot_token { get; set; } = "Empty";
        public string chat_id { get; set; } = "Empty";
        public string date { get; set; } = "Empty";
        public string author { get; set; } = "Empty";
        public string language { get; set; } = "Empty";
        public string tenants { get; set; } = "Empty";
    }

    private string telegram_notifications_table_view_port = "70vh";
    private string telegram_notifications_table_sorted_column;
    private string telegram_notifications_table_search_string = "";

    private bool Telegram_Notifications_Table_Filter_Func(Telegram_Notifications_Entity row)
    {
        if (string.IsNullOrEmpty(telegram_notifications_table_search_string))
            return true;

        //Search logic for each column
        return row.bot_name.Contains(telegram_notifications_table_search_string, StringComparison.OrdinalIgnoreCase) ||
               row.bot_token.Contains(telegram_notifications_table_search_string, StringComparison.OrdinalIgnoreCase) ||
               row.chat_id.Contains(telegram_notifications_table_search_string, StringComparison.OrdinalIgnoreCase) ||
               row.date.Contains(telegram_notifications_table_search_string, StringComparison.OrdinalIgnoreCase) ||
               row.author.Contains(telegram_notifications_table_search_string, StringComparison.OrdinalIgnoreCase) ||
               row.language.Contains(telegram_notifications_table_search_string, StringComparison.OrdinalIgnoreCase) ||
               row.tenants.Contains(telegram_notifications_table_search_string, StringComparison.OrdinalIgnoreCase);
    }

    private string telegram_notifications_selectedRowContent = ""; // Hier wird der Inhalt der ausgewählten Zeile gespeichert

    // Der Handler für den TableRowClick-Event
    private void Telegram_Notifications_RowClickHandler(Telegram_Notifications_Entity row)
    {
        telegram_notifications_selectedRowContent = row.bot_name;
    }

    private string Telegram_Notifications_GetRowClass(Telegram_Notifications_Entity row)
    {
        return row.bot_name == telegram_notifications_selectedRowContent ? "selected-row" : "";
    }

    private async Task Show_Add_Telegram_Notification_Dialog()
    {
        var options = new DialogOptions
            {
                
                MaxWidth = MaxWidth.Small,
                BackgroundClass = "dialog-blurring",

            };

        await this.DialogService.Show<Settings.Notifications.Telegram.Add_Telegram_Notification_Dialog>(string.Empty, new DialogParameters(), options).Result;
    }

    private async Task Show_Edit_Telegram_Notification_Dialog(string connector_name)
    {
        await localStorage.SetItemAsync("temp_telegram_bot_name", await Base64.Handler.Encode(connector_name));

        var options = new DialogOptions
            {
                
                MaxWidth = MaxWidth.Small,
                BackgroundClass = "dialog-blurring",

            };

        await this.DialogService.Show<Settings.Notifications.Telegram.Edit_Telegram_Notification_Dialog>(string.Empty, new DialogParameters(), options).Result;
    }

    private async Task Show_Delete_Telegram_Notification_Dialog(string connector_name)
    {
        await localStorage.SetItemAsync("temp_telegram_bot_name", await Base64.Handler.Encode(connector_name));

        var options = new DialogOptions
            {
                
                MaxWidth = MaxWidth.Small,
                BackgroundClass = "dialog-blurring",

            };

        await this.DialogService.Show<Settings.Notifications.Telegram.Delete_Telegram_Notification_Dialog>(string.Empty, new DialogParameters(), options).Result;
    }

    private async Task<List<Telegram_Notifications_Entity>> Get_Telegram_Notifications_Overview()
    {
        List<Telegram_Notifications_Entity> result = new List<Telegram_Notifications_Entity>();

        MySqlConnection conn = new MySqlConnection(Application_Settings.connectionString);

        try
        {
            await conn.OpenAsync();

            MySqlCommand command = new MySqlCommand("SELECT * FROM telegram_notifications;", conn);
            using (DbDataReader reader = await command.ExecuteReaderAsync())
            {
                if (reader.HasRows)
                {
                    while (await reader.ReadAsync())
                    {
                        Telegram_Notifications_Entity entity = new Telegram_Notifications_Entity
                            {
                                bot_name = await Base64.Handler.Decode(reader["bot_name"].ToString() ?? ""),
                                bot_token = await Base64.Handler.Decode(reader["bot_token"].ToString() ?? ""),
                                chat_id = await Base64.Handler.Decode(reader["chat_id"].ToString() ?? ""),
                                date = reader["date"].ToString() ?? "",
                                author = await Base64.Handler.Decode(reader["author"].ToString() ?? ""),
                                language = reader["language"].ToString() ?? "",
                                tenants = reader["tenants"].ToString() ?? "",
                            };

                        result.Add(entity);
                    }
                }
            }

        }
        catch (Exception ex)
        {
            Logging.Handler.Error("class", "Get_Mail_Notifications_Overview", ex.Message);
        }
        finally
        {
            conn.Close();
        }

        return result;
    }

    private async Task Send_Telegram_Message(string bot_name)
    {
        this.Snackbar.Configuration.ShowCloseIcon = true;
        this.Snackbar.Configuration.PositionClass = Defaults.Classes.Position.BottomRight;

        string result = await Classes.Helper.Notifications.Telegram.Send_Message(await Base64.Handler.Encode(bot_name), "NetLock Alert: Test.\nBot Name: " + bot_name);

        if (result == "success")
        {
            this.Snackbar.Add("Erfolgreich versendet.", Severity.Success);
        }
        else
        {
            this.Snackbar.Add("Senden fehlgeschlagen: " + result, Severity.Error);
        }
    }

    #endregion

    #region Ntfysh

    public List<Ntfy_sh_Notifications_Entity> ntfy_sh_notifications_mysql_data;

    public class Ntfy_sh_Notifications_Entity
    {
        public string topic_name { get; set; } = "Empty";
        public string topic_url { get; set; } = "Empty";
        public string access_token { get; set; } = "Empty";
        public string date { get; set; } = "Empty";
        public string author { get; set; } = "Empty";
        public string language { get; set; } = "Empty";
        public string tenants { get; set; } = "Empty";
    }

    private string ntfy_sh_notifications_table_view_port = "70vh";
    private string ntfy_sh_notifications_table_sorted_column;
    private string ntfy_sh_notifications_table_search_string = "";

    private bool Ntfy_sh_Notifications_Table_Filter_Func(Ntfy_sh_Notifications_Entity row)
    {
        if (string.IsNullOrEmpty(ntfy_sh_notifications_table_search_string))
            return true;

        //Search logic for each column
        return row.topic_name.Contains(ntfy_sh_notifications_table_search_string, StringComparison.OrdinalIgnoreCase) ||
               row.topic_url.Contains(ntfy_sh_notifications_table_search_string, StringComparison.OrdinalIgnoreCase) ||
               row.access_token.Contains(ntfy_sh_notifications_table_search_string, StringComparison.OrdinalIgnoreCase) ||
               row.date.Contains(ntfy_sh_notifications_table_search_string, StringComparison.OrdinalIgnoreCase) ||
               row.author.Contains(ntfy_sh_notifications_table_search_string, StringComparison.OrdinalIgnoreCase) ||
               row.language.Contains(ntfy_sh_notifications_table_search_string, StringComparison.OrdinalIgnoreCase) ||
               row.tenants.Contains(ntfy_sh_notifications_table_search_string, StringComparison.OrdinalIgnoreCase);
    }

    private string ntfy_sh_notifications_selectedRowContent = ""; // Hier wird der Inhalt der ausgewählten Zeile gespeichert

    // Der Handler für den TableRowClick-Event
    private void Ntfy_sh_Notifications_RowClickHandler(Ntfy_sh_Notifications_Entity row)
    {
        ntfy_sh_notifications_selectedRowContent = row.topic_name;
    }

    private string Ntfy_sh_Notifications_GetRowClass(Ntfy_sh_Notifications_Entity row)
    {
        return row.topic_name == ntfy_sh_notifications_selectedRowContent ? "selected-row" : "";
    }

    private async Task Show_Add_Ntfy_sh_Notification_Dialog()
    {
        var options = new DialogOptions
            {
                
                MaxWidth = MaxWidth.Small,
                BackgroundClass = "dialog-blurring",

            };

        await this.DialogService.Show<Settings.Notifications.Ntfy_sh.Add_Ntfy_sh_Notification_Dialog>(string.Empty, new DialogParameters(), options).Result;
    }

    private async Task Show_Edit_Ntfy_sh_Notification_Dialog(string topic_name)
    {
        await localStorage.SetItemAsync("temp_ntfy_sh_topic_name", await Base64.Handler.Encode(topic_name));

        var options = new DialogOptions
            {
                
                MaxWidth = MaxWidth.Small,
                BackgroundClass = "dialog-blurring",

            };

        await this.DialogService.Show<Settings.Notifications.Ntfy_sh.Edit_Ntfy_sh_Notification_Dialog>(string.Empty, new DialogParameters(), options).Result;
    }

    private async Task Show_Delete_Ntfy_sh_Notification_Dialog(string topic_name)
    {
        await localStorage.SetItemAsync("temp_ntfy_sh_topic_name", await Base64.Handler.Encode(topic_name));

        var options = new DialogOptions
            {
                
                MaxWidth = MaxWidth.Small,
                BackgroundClass = "dialog-blurring",

            };

        await this.DialogService.Show<Settings.Notifications.Ntfy_sh.Delete_Ntfy_sh_Notification_Dialog>(string.Empty, new DialogParameters(), options).Result;
    }

    private async Task<List<Ntfy_sh_Notifications_Entity>> Get_Ntfy_sh_Notifications_Overview()
    {
        List<Ntfy_sh_Notifications_Entity> result = new List<Ntfy_sh_Notifications_Entity>();

        MySqlConnection conn = new MySqlConnection(Application_Settings.connectionString);

        try
        {
            await conn.OpenAsync();

            MySqlCommand command = new MySqlCommand("SELECT * FROM ntfy_sh_notifications;", conn);
            using (DbDataReader reader = await command.ExecuteReaderAsync())
            {
                if (reader.HasRows)
                {
                    while (await reader.ReadAsync())
                    {
                        Ntfy_sh_Notifications_Entity entity = new Ntfy_sh_Notifications_Entity
                            {
                                topic_name = await Base64.Handler.Decode(reader["topic_name"].ToString() ?? ""),
                                topic_url = await Base64.Handler.Decode(reader["topic_url"].ToString() ?? ""),
                                access_token = await Base64.Handler.Decode(reader["access_token"].ToString() ?? ""),
                                date = reader["date"].ToString() ?? "",
                                author = await Base64.Handler.Decode(reader["author"].ToString() ?? ""),
                                language = reader["language"].ToString() ?? "",
                                tenants = reader["tenants"].ToString() ?? "",
                            };

                        result.Add(entity);
                    }
                }
            }

        }
        catch (Exception ex)
        {
            Logging.Handler.Error("class", "Get_Mail_Notifications_Overview", ex.Message);
        }
        finally
        {
            conn.Close();
        }

        return result;
    }

    private async Task Send_Ntfy_sh_Message(string topic_name)
    {
        this.Snackbar.Configuration.ShowCloseIcon = true;
        this.Snackbar.Configuration.PositionClass = Defaults.Classes.Position.BottomRight;

        string result = await Classes.Helper.Notifications.Ntfy_sh.Send_Message(topic_name, "NetLock Alert: Test.\nTopic Name: " + topic_name);

        if (result == "success")
        {
            this.Snackbar.Add("Erfolgreich versendet.", Severity.Success);
        }
        else
        {
            this.Snackbar.Add("Senden fehlgeschlagen: " + result, Severity.Error);
        }
    }
    #endregion
}
