@using MySqlConnector;
@using System.Data.Common;
@using System.Text.Json;
@inject NavigationManager NavigationManager
@inject ILocalStorageService localStorage
@inject IDialogService DialogService
@inject ISnackbar Snackbar

<AuthorizeView>
    <NotAuthorized>
        @{
            NavigationManager.NavigateTo("/");
        }
    </NotAuthorized>

    <Authorized>

        <MudDialog Style="width: 800px">
            <TitleContent>
                <MudText Typo="Typo.h6">SMTP Einstellungen</MudText>
            </TitleContent>
            <DialogContent>
                <MudText Class="pa-0 ma-0">Allgemeine Informationen</MudText>

                <MudTextField Label="Benutzername" T="string" @bind-Value="@smtp.username" Immediate="@true" />
                <MudTextField Label="Kennwort" InputType="@PasswordInput" @bind-Value="@smtp.password" Adornment="Adornment.End" AdornmentIcon="@PasswordInputIcon" OnAdornmentClick="Show_Password" AdornmentAriaLabel="Kennwort anzeigen" Immediate="@true" />
                <MudTextField Label="Server" T="string" @bind-Value="@smtp.server" Immediate="@true" />
                <MudTextField Label="Port" T="string" @bind-Value="@smtp.port" Immediate="@true" />
                <MudCheckBox Color="Color.Error" T="bool" @bind-Value="@smtp.ssl">Unterstützt SSL/TLS</MudCheckBox>
                <MudButton Disabled="@Form_Valid()" OnClick="@Test_Smtp" Variant="@Variant.Filled" Color="@Color.Info">Konfiguration testen</MudButton>

            </DialogContent>

            <DialogActions>
                <MudButton OnClick="Cancel">Abbrechen</MudButton>
                <MudButton Disabled="@smtp_invalid" OnClick="@this.OK" Variant="@Variant.Filled" Color="@Color.Success">Bestätigen</MudButton>
            </DialogActions>
        </MudDialog>

    </Authorized>
</AuthorizeView>

@code {

    [CascadingParameter]
    private MudDialogInstance MudDialog { get; set; } = default!;

    bool smtp_invalid = true;

    public Smtp_Settings smtp = new Smtp_Settings();

    public class Smtp_Settings
    {
        public string username { get; set; }
        public string password { get; set; }
        public string server { get; set; }
        public string port { get; set; }
        public bool ssl { get; set; }
    }

    protected override async Task OnInitializedAsync()
    {
        await Get_Smtp_Settings();
        //StateHasChanged();
    }

    bool password_visible;
    InputType PasswordInput = InputType.Password;
    string PasswordInputIcon = Icons.Material.Filled.VisibilityOff;

    private void Show_Password()
    {
        @if (password_visible)
        {
            password_visible = false;
            PasswordInputIcon = Icons.Material.Filled.VisibilityOff;
            PasswordInput = InputType.Password;
        }
        else
        {
            password_visible = true;
            PasswordInputIcon = Icons.Material.Filled.Visibility;
            PasswordInput = InputType.Text;
        }
    }

    private bool Form_Valid()
    {
        if (String.IsNullOrEmpty(smtp.username) || String.IsNullOrEmpty(smtp.password) || String.IsNullOrEmpty(smtp.server) || String.IsNullOrEmpty(smtp.port))
            return true;
        else
            return false;
    }

    private async Task Get_Smtp_Settings()
    {
        string smtp_json = String.Empty;

        MySqlConnection conn = new MySqlConnection(await Classes.MySQL.Config.Get_Connection_String());

        try
        {
            await conn.OpenAsync();

            MySqlCommand command = new MySqlCommand("SELECT * FROM settings;", conn);
            using (DbDataReader reader = await command.ExecuteReaderAsync())
            {
                if (reader.HasRows)
                {
                    while (await reader.ReadAsync())
                    {
                        smtp_json = reader["smtp"].ToString() ?? "";
                    }
                }
            }
        }
        catch (Exception ex)
        {
            Logging.Handler.Error("class", "Send_Mail", ex.Message);
        }
        finally
        {
            conn.Close();
        }
        
        //Extract current settings
        try
        {
            Smtp_Settings temp_smtp_settings = JsonSerializer.Deserialize<Smtp_Settings>(smtp_json);

            smtp.username = temp_smtp_settings.username;
            smtp.password = temp_smtp_settings.password;
            smtp.server = temp_smtp_settings.server;
            smtp.port = temp_smtp_settings.port;
            smtp.ssl = temp_smtp_settings.ssl;
        }
        catch (Exception ex)
        {
            //do nothing in this case
        }
    }

    private async Task Test_Smtp()
    {
        this.Snackbar.Configuration.ShowCloseIcon = true;
        this.Snackbar.Configuration.PositionClass = Defaults.Classes.Position.BottomRight;

        string result = await Classes.Helper.Notifications.Smtp.Test_Smtp(smtp.username, smtp.password, smtp.server, Convert.ToInt32(smtp.port), smtp.ssl);

        if (result == "success")
        {
            smtp_invalid = false;
            this.Snackbar.Add("Test erfolgreich.", Severity.Success);
        }
        else
        {
            smtp_invalid = true;
            this.Snackbar.Add("Test fehlgeschlagen: " + result, Severity.Error);
        }
    }

    private async Task OK()
    {
        this.Snackbar.Configuration.ShowCloseIcon = true;
        this.Snackbar.Configuration.PositionClass = Defaults.Classes.Position.BottomRight;

        string smtp_json = JsonSerializer.Serialize(smtp);
        bool smtp_already_exists = false;

        MySqlConnection conn = new MySqlConnection(await Classes.MySQL.Config.Get_Connection_String());

        //Check if settings already exist
        try
        {
            await conn.OpenAsync();

            MySqlCommand command = new MySqlCommand("SELECT * FROM `settings`;", conn);
            using (DbDataReader reader = await command.ExecuteReaderAsync())
            {
                if (reader.HasRows)
                {
                    while (await reader.ReadAsync())
                    {
                        if (String.IsNullOrEmpty(reader["smtp"].ToString()))
                            smtp_already_exists = false;
                        else
                            smtp_already_exists = true;
                    }
                }
            }
        }
        catch (Exception ex)
        {
            Logging.Handler.Error("Add_Policy_Dialog.OK", "", ex.Message);
        }
        finally
        {
            conn.Close();
        }

        //Decide the query to use
        bool success = false;

        if (smtp_already_exists == false) //Create
        {
            success = await Classes.MySQL.Handler.Execute_Command("INSERT INTO `settings` (`smtp`) VALUES ('" + smtp_json + "');");
        }
        else //Update
        {
            success = await Classes.MySQL.Handler.Execute_Command("UPDATE settings SET smtp = '" + smtp_json + "';");
        }

        //Show snackbar depending on result
        if (success)
        {
            this.Snackbar.Add("Gespeichert.", Severity.Success);
        }
        else
        {
            this.Snackbar.Add("Speichern fehlgeschlagen.", Severity.Error);
        }

        this.MudDialog.Close(DialogResult.Ok(String.Empty));
        this.MudDialog.Close(DialogResult.Cancel());
    }

    private void Cancel() => MudDialog.Cancel();

    private void Redirect(string path)
    {
        NavigationManager.NavigateTo("/");
        NavigationManager.NavigateTo(path);
    }
}