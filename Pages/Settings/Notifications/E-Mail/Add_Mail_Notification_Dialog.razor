@using MySqlConnector;
@using System.Data.Common;
@using System.Text.Json;

@inject NavigationManager NavigationManager
@inject ILocalStorageService localStorage
@inject IDialogService DialogService
@inject ISnackbar Snackbar

<MudDialog>
    <TitleContent>
        <MudText Typo="Typo.h6">Neuen Empänger hinzufügen</MudText>
    </TitleContent>
    <DialogContent>
        <MudTextField Label="E-Mail Adresse" T="string" @bind-Value="@this.mail_address" Immediate="@true" />
        <MudSelect T="string" @bind-Value=this.language Label="Sprache" AnchorOrigin="Origin.BottomCenter">
            <MudSelectItem Value="@("Deutsch")" />
            <MudSelectItem Value="@("Englisch")" />
        </MudSelect>

    <MudDropContainer T="DropItem" Items="tenants" ItemsSelector="@((item,dropzone) => item.Identifier == dropzone)" ItemDropped="ItemUpdated" Class="d-flex flex-wrap flex-grow-1" >
        <ChildContent>
            <MudDropZone T="DropItem" Identifier="drop_zone_one" Class="rounded mud-background-gray pa-6 ma-8 flex-grow-1">
                <MudText Typo="Typo.h6" Class="mb-4">Nicht ausgewählte Mandanten</MudText>
             </MudDropZone> 
           <MudDropZone T="DropItem" Identifier="drop_zone_two" Class="rounded mud-background-gray pa-6 ma-8 flex-grow-1">
                <MudText Typo="Typo.h6" Class="mb-4">Ausgewählte Mandanten</MudText>
            </MudDropZone>
        </ChildContent>
        <ItemRenderer>
            <MudPaper Elevation="25" Class="pa-4 my-4">@context.Name</MudPaper>
        </ItemRenderer>
    </MudDropContainer>

    </DialogContent>
    <DialogActions>
        <MudButton OnClick="Cancel">Abbrechen</MudButton>

        <MudButton Disabled="@Form_Valid()" OnClick="@this.OK" Variant="Variant.Filled" Size="@Size.Small" Color="@Color.Success">Bestätigen</MudButton>
    </DialogActions>
</MudDialog>

    @code {

    protected override async Task OnInitializedAsync()
    {
        await Get_Tenants();
    }

    private string mail_address = String.Empty;
    private string language = String.Empty;

    private List<DropItem> tenants = new();

    public class DropItem
    {
        public string Name { get; init; }
        public string Identifier { get; set; }
    }

    private void ItemUpdated(MudItemDropInfo<DropItem> dropItem)
    {
        dropItem.Item.Identifier = dropItem.DropzoneIdentifier;
    }

    [CascadingParameter]
    private MudDialogInstance MudDialog { get; set; } = default!;

    private bool Form_Valid()
    {
        if (String.IsNullOrEmpty(mail_address) || String.IsNullOrEmpty(language))
            return true;
        else
            return false;
    }

    private async Task Get_Tenants()
    {
        MySqlConnection conn = new MySqlConnection(Application_Settings.connectionString);

        try
        {
            await conn.OpenAsync();

            MySqlCommand command = new MySqlCommand("SELECT * FROM tenants;", conn);
            using (DbDataReader reader = await command.ExecuteReaderAsync())
            {
                if (reader.HasRows)
                {
                    while (await reader.ReadAsync())
                    {
                        tenants.Add(new DropItem { Name = await Base64.Handler.Decode(reader["tenant_name"].ToString() ?? ""), Identifier = "drop_zone_one" });
                    }
                }
            }
        }
        catch (Exception ex)
        {
            Logging.Handler.Error("class", "Get_Tenants", ex.Message);
        }
        finally
        {
            conn.Close();
        }
    }

    private async Task OK()
    {
        this.Snackbar.Configuration.ShowCloseIcon = true;
        this.Snackbar.Configuration.PositionClass = Defaults.Classes.Position.BottomRight;

        //Get all tenants from drop zone two
        var filtered_tenants = tenants.Where(item => item.Identifier == "drop_zone_two").ToList();
        string tenants_json = JsonSerializer.Serialize(filtered_tenants);
     
        if (tenants_json.Count() != 0)
        {
            //Change language to db compatible format
            string converted_languaged = String.Empty;

            if (language == "Deutsch")
                converted_languaged = "de";
            else if (language == "Englisch")
                converted_languaged = "en";

            bool success = await Classes.MySQL.Handler.Execute_Command("INSERT INTO `mail_notifications` (`mail_address`, `date`, `author`, `language`, `tenants`) VALUES ('" + await Base64.Handler.Encode(mail_address) + "', '" + DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss") + "', '" + await localStorage.GetItemAsync<string>("username") + "', '" + converted_languaged + "', '" + tenants_json + "');");

            if (success)
            {
                this.Snackbar.Add("Erfolgreich hinzugefügt.", Severity.Success);

                Thread.Sleep(1000);

                NavigationManager.Refresh();
            }
            else
                this.Snackbar.Add("Hinzufügen fehlgeschlagen.", Severity.Error);

            this.MudDialog.Close(DialogResult.Ok(String.Empty));
            this.MudDialog.Close(DialogResult.Cancel());
        }
            this.Snackbar.Add("Es muss mindestens ein Mandant ausgewählt werden.", Severity.Error);
    }

    private void Cancel() => MudDialog.Cancel();
}