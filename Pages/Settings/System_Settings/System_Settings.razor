@page "/system_settings"
@using MySqlConnector;
@using System.Data.Common;
@using System.Text.Json;
@using OfficeOpenXml;
@using System.Xml.Serialization;
@using System.Text;
@using Microsoft.AspNetCore.Components.Server.ProtectedBrowserStorage;
@using Microsoft.AspNetCore.DataProtection;

@inject NavigationManager NavigationManager
@inject ILocalStorageService localStorage
@inject IDialogService DialogService
@inject ISnackbar Snackbar
@inject IJSRuntime JSRuntime
@inject IDataProtectionProvider DataProtectionProvider

<style>
    .dialog-blurring {
        backdrop-filter: blur(10px);
    }
</style>

<AuthorizeView>
    <NotAuthorized>
        @{
            NavigationManager.NavigateTo("/");
        }
    </NotAuthorized>
    <Authorized>

        @if (permissions_settings_enabled && permissions_settings_system_enabled)
        {
            <MudText Class="mt-5" Typo="Typo.h5">Systemeinstellungen</MudText>

            <MudPaper Class="mt-5" MaxWidth="500px">

                <MudText Class="pa-2 ma-0" Typo="Typo.h6">Datenbank Einstellungen</MudText>
                <MudTextField Class="pa-2" Label="Hostname" Variant="Variant.Filled" T="string" @bind-Value="@db_hostname" Disabled="@input_disabled" Immediate="@true" Required="true" />
                <MudTextField Class="pa-2" Label="Datenbank" Variant="Variant.Filled" T="string" @bind-Value="@db_database" Disabled="@input_disabled" Immediate="@true" Required="true" />
                <MudTextField Class="pa-2" Label="Benutzer" Variant="Variant.Filled" T="string" @bind-Value="@db_username" Disabled="@input_disabled" Immediate="@true" Required="true" />
                <MudTextField Class="pa-2" Label="Kennwort" Variant="Variant.Filled" T="string" @bind-Value="@db_password" Disabled="@input_disabled" Immediate="@true" Required="true" Type="InputType.Password" />

                <MudButton Class="mt-2 mb-5 ml-5 mr-0" Size="Size.Small" Variant="Variant.Filled" OnClick="@Save_Database_Settings" Color="Color.Success" StartIcon="@Icons.Material.Filled.Save">Speichern</MudButton>
                <MudButton Class="mt-2 mb-5 ml-2 mr-0" Size="Size.Small" Variant="Variant.Filled" OnClick="@Edit_Form" Color="Color.Default" StartIcon="@Icons.Material.Filled.Edit">Bearbeiten</MudButton>

            </MudPaper>
        }

    </Authorized>
</AuthorizeView>

@code 
{
    #region Permissions System

    private string permissions_json = String.Empty;
    private string permissions_tenants_json = String.Empty;
    public static List<string> permissions_tenants_list = new List<string> { };

    private bool permissions_settings_enabled = false;
    private bool permissions_settings_system_enabled = false;
    
    public class Permissions_Tenants_Activation_State
    {
        public string name { get; set; } = String.Empty;
    }

    private async Task Get_Permissions()
    {
        //Extract user info from users session storage
        var sessionStorage = new ProtectedSessionStorage(JSRuntime, DataProtectionProvider);
        var username = await sessionStorage.GetAsync<string>("username");
        var password = await sessionStorage.GetAsync<string>("password");

        Logging.Handler.Debug("NavMenu -> Permissions_Load", "username", username.Value ?? String.Empty);

        //if user info empty, force logout
        if (String.IsNullOrEmpty(username.Value) || String.IsNullOrEmpty(password.Value))
        {
            Logging.Handler.Debug("NavMenu -> Permissions_Load", "sessions storage data", "empty, force logout");

            NavigationManager.NavigateTo("/logout", true);
            return;
        }

        //Check if user info is valid, if not, force logout
        if (!Classes.Authentication.User.Login_User(username.Value ?? String.Empty, password.Value ?? String.Empty))
        {
            Logging.Handler.Debug("NavMenu -> Permissions_Load", "verify user", "incorrect data, force logout");

            NavigationManager.NavigateTo("/logout", true);
            return;
        }

        //Get permissions
        string query = "SELECT * FROM `accounts` WHERE username = @username;";

        MySqlConnection conn = new MySqlConnection(Application_Settings.connectionString);

        try
        {
            await conn.OpenAsync();

            MySqlCommand command = new MySqlCommand(query, conn);
            command.Parameters.AddWithValue("@username", username.Value);

            Logging.Handler.Debug("NavMenu -> Permissions_Load", "query", query);

            using (DbDataReader reader = await command.ExecuteReaderAsync())
            {
                if (reader.HasRows)
                {
                    while (await reader.ReadAsync())
                    {
                        permissions_json = reader["permissions"].ToString() ?? String.Empty;
                        permissions_tenants_json = reader["tenants"].ToString() ?? String.Empty;
                    }
                }
            }

            Logging.Handler.Debug("NavMenu -> Permissions_Load", "permissions_json", permissions_json);

            //Extract permissions
            if (!String.IsNullOrEmpty(permissions_json))
            {
                using (JsonDocument document = JsonDocument.Parse(permissions_json))
                {
                    //settings_enabled
                    try
                    {
                        JsonElement element = document.RootElement.GetProperty("settings_enabled");
                        permissions_settings_enabled = element.GetBoolean();
                    }
                    catch (Exception ex)
                    {
                        Logging.Handler.Error("NavMenu -> Permissions_Load", "permissions_json (settings_enabled)", ex.Message);
                    }
                    
                    //settings_system_enabled
                    try
                    {
                        JsonElement element = document.RootElement.GetProperty("settings_system_enabled");
                        permissions_settings_system_enabled = element.GetBoolean();
                    }
                    catch (Exception ex)
                    {
                        Logging.Handler.Error("NavMenu -> Permissions_Load", "permissions_json (settings_system_enabled)", ex.Message);
                    }
                }
            }
            else if (permissions_json == "[]")
            {
                Logging.Handler.Debug("NavMenu -> Permissions_Load", "permissions_json", "Empty, logout user");
                NavigationManager.NavigateTo("/logout", true);
            }
            else
            {
                Logging.Handler.Debug("NavMenu -> Permissions_Load", "permissions_json", "Empty, logout user");
                NavigationManager.NavigateTo("/logout", true);
            }

            //Extract tenants from json
            permissions_tenants_list.Clear();
            if (!String.IsNullOrEmpty(permissions_tenants_json))
            {
                //Set the activation state for the tenants
                try
                {
                    List<Permissions_Tenants_Activation_State> tenants_activation_state_list = JsonSerializer.Deserialize<List<Permissions_Tenants_Activation_State>>(permissions_tenants_json);

                    foreach (var tenant in tenants_activation_state_list)
                    {
                        Logging.Handler.Debug("NavMenu -> Permissions_Load", "foreach tenant", tenant.name);

                        permissions_tenants_list.Add(tenant.name);
                    }
                }
                catch (Exception ex)
                {
                    Logging.Handler.Error("NavMenu -> Permissions_Load (permissions_tenants_json deserialize)", "Result", ex.Message);
                }
            }
            else
            {
                Logging.Handler.Debug("NavMenu -> Permissions_Load (permissions_tenants_json deserialize)", "Result", "Empty");
            }
        }
        catch (Exception ex)
        {
            Logging.Handler.Error("NavMenu -> Permissions_Load", "general_error (force logout)", ex.Message);
            NavigationManager.NavigateTo("/logout", true);
        }
        finally
        {
            conn.Close();
        }
    }

    #endregion

    protected override async Task OnInitializedAsync()
    {
        await Get_Permissions();
        //Check permissions
        if (!permissions_settings_enabled || !permissions_settings_system_enabled)
        {
            NavigationManager.NavigateTo("/logout", true);
            return;
        }
    }

    private string db_hostname = String.Empty;
    private string db_database = String.Empty;
    private string db_username = String.Empty;
    private string db_password = String.Empty;

    bool input_disabled = true;

    private async Task Edit_Form()
    {
        if (input_disabled)
            input_disabled = false;
        else
            input_disabled = true;
    }

    private async Task Save_Database_Settings()
    {
        
    }
}