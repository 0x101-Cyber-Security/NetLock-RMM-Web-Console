@page "/Dashboard"

@using MySqlConnector
@using System.Data
@using System.Data.Common
@using Microsoft.AspNetCore.Components.Server.ProtectedBrowserStorage
@using Microsoft.AspNetCore.DataProtection
@using System.Text.Json
@using System.Text.Json.Nodes

@inject NavigationManager NavigationManager
@inject ILocalStorageService localStorage
@inject IDialogService DialogService
@inject ISnackbar Snackbar
@inject IJSRuntime JSRuntime
@inject IDataProtectionProvider DataProtectionProvider

<AuthorizeView>
    <NotAuthorized>
        @{
            NavigationManager.NavigateTo("/", true);
        }
    </NotAuthorized>
</AuthorizeView>

<AuthorizeView Roles="Administrator">
    <Authorized>
        @{

            <MudOverlay Visible="@loading_overlay" DarkBackground="false" Absolute="false">
                    <MudProgressCircular Color="Color.Primary" Size="Size.Large" Indeterminate="true" />
            </MudOverlay>

            if (permissions_dashboard_enabled)
            {
                <MudText Class="ml-2 mt-2" Typo="Typo.h6">Willkommen: @context.User.Identity.Name 😎</MudText>

                <MudPaper>
                    <div style="display: flex; flex-wrap: wrap; gap: 25px; justify-content: flex-start; align-items: center;">

                        <MudPaper Height="400px" Width="300px">
                            <MudText Typo="Typo.h5" Align="Align.Center">Geräte</MudText>
                            <MudText Typo="Typo.body1" Align="Align.Center">(Aktuell)</MudText>

                            @{
                                try
                                {

                                    double[] chart_data = { devices_authorized, devices_unauthorized, devices_online, devices_offline };

                                    string[] chart_labels = { $"Autorisiert: {devices_authorized}", $"Unautorisiert: {devices_unauthorized}", $"Online: {devices_online}", $"Offline: {devices_offline}" };

                                    <div class="ml-2">

                                        <MudChart ChartType="MudBlazor.ChartType.Donut" Width="250px" Height="250px" InputData="@chart_data" InputLabels="@chart_labels" ChartOptions="device_status_chart_options">
                                            <CustomGraphics>
                                                <text class="donut-inner-text" x="50%" y="50%" dominant-baseline="middle" text-anchor="middle" fill="black" font-family="Helvetica" font-size="5">@devices_total</text>
                                            </CustomGraphics>
                                        </MudChart>
                                    </div>

                                }
                                catch (Exception ex)
                                {
                                    Logging.Handler.Error("/devices -> Table", "Display disks", ex.Message);
                                }
                            }

                        </MudPaper>
                        <MudPaper Height="400px" Width="300px">
                            <MudText Typo="Typo.h5" Align="Align.Center">Ereignisse (Schweregrad)</MudText>
                            <MudText Typo="Typo.body1" Align="Align.Center">24 Stunden</MudText>

                            @{
                                try
                                {

                                    double[] chart_data = { events_severity_low, events_severity_moderate, events_severity_high, events_severity_critical };

                                    string[] chart_labels = { $"Niedrig: {events_severity_low}", $"Moderat: {events_severity_moderate}", $"Hoch: {events_severity_high}", $"Kritisch: {events_severity_critical}" };

                                    <div class="ml-2">

                                        <MudChart ChartType="MudBlazor.ChartType.Donut" Width="250px" Height="250px" InputData="@chart_data" InputLabels="@chart_labels" ChartOptions="events_severity_chart_options">
                                            <CustomGraphics>
                                                <text class="donut-inner-text" x="50%" y="50%" dominant-baseline="middle" text-anchor="middle" fill="black" font-family="Helvetica" font-size="5">@events_total</text>
                                            </CustomGraphics>
                                        </MudChart>
                                    </div>

                                }
                                catch (Exception ex)
                                {
                                    Logging.Handler.Error("/devices -> Table", "Display disks", ex.Message);
                                }
                            }

                        </MudPaper>
                        <MudPaper Height="400px" Width="300px">
                            <MudText Typo="Typo.h5" Align="Align.Center">Ereignisse (Typ)</MudText>
                            <MudText Typo="Typo.body1" Align="Align.Center">24 Stunden</MudText>

                            @{
                                try
                                {

                                    double[] chart_data = { events_antivirus, events_jobs, events_sensors };

                                    string[] chart_labels = { $"Antivirus: {events_antivirus}", $"Jobs: {events_jobs}", $"Sensoren: {events_sensors}" };

                                    <div class="ml-2">

                                        <MudChart ChartType="MudBlazor.ChartType.Donut" Width="250px" Height="250px" InputData="@chart_data" InputLabels="@chart_labels" ChartOptions="events_type_chart_options">
                                            <CustomGraphics>
                                                <text class="donut-inner-text" x="50%" y="50%" dominant-baseline="middle" text-anchor="middle" fill="black" font-family="Helvetica" font-size="5">@events_total</text>
                                            </CustomGraphics>
                                        </MudChart>
                                    </div>

                                }
                                catch (Exception ex)
                                {
                                    Logging.Handler.Error("/devices -> Table", "Display disks", ex.Message);
                                }
                            }

                        </MudPaper>

                    </div>
                </MudPaper>

                

                <MudPaper Class="mt-5">
                    <MudText Typo="Typo.h5" Align="Align.Left">Ungelesene Ereignisse</MudText>

                    <div style="display: flex; align-items: center;">
                        <MudDateRangePicker Class="ml-2" PickerVariant="PickerVariant.Dialog" Label="Zeitraum" @ref="device_information_events_table_picker" @bind-DateRange="device_information_events_table_dateRange" @bind-DateRange:after="async () => { events_mysql_data = await Events_Load(true); }" Style="max-width: 300px;">
                            <PickerActions Context="pickerActionsContext">
                                <MudButton Class="mr-auto align-self-start" OnClick="@(() => device_information_events_table_picker.Clear())">Zurücksetzen</MudButton>
                                <MudButton OnClick="@(() => device_information_events_table_picker.Close(false))">Abbrechen</MudButton>
                                <MudButton Color="Color.Primary" @onclick="async () => { await Events_Table_Submit(); }">Bestätigen</MudButton>
                            </PickerActions>
                        </MudDateRangePicker>

                        <MudSelect Class="ml-2 mr-2" T="string" @bind-Value="this.device_information_events_severity_string" @bind-Value:after="async () => { events_mysql_data = await Events_Load(true); }" Label="Priorität" AnchorOrigin="Origin.BottomCenter">
                            <MudSelectItem Value="@("Egal")" />
                            <MudSelectItem Value="@("Kritisch")" />
                            <MudSelectItem Value="@("Hoch")" />
                            <MudSelectItem Value="@("Moderat")" />
                            <MudSelectItem Value="@("Niedrig")" />
                        </MudSelect>

                        <MudTooltip Text="Aktualisieren">
                            <MudIconButton Class="ml-2 mt-5 mr-2" Icon="@Icons.Material.Filled.Refresh" Variant="Variant.Filled" Size="Size.Small" Color="Color.Default" @onclick="async () => { events_mysql_data = await Events_Load(true); }"></MudIconButton>
                        </MudTooltip>
                        <MudTooltip Text="Daten exportieren">
                            <MudIconButton Class="ml-2 mt-5 mr-2" Icon="@Icons.Material.Filled.FileDownload" Variant="Variant.Filled" Size="Size.Small" Color="Color.Default" @onclick="Export_Events_Table_Dialog"></MudIconButton>
                        </MudTooltip>
                    </div>

                    <MudTable Class="mt-2" Height="50vh" FixedHeader="true" FixedFooter="true" Hover="true" @bind-RowsPerPage="events_rows_per_page" Dense="true" Items="@events_mysql_data" Filter="new Func<Events_Table, bool>(Events_Table_Filter_Func)">
                        <ToolBarContent>
                            <MudTextField Class="mt-0" @bind-Value="events_table_search_string" Placeholder="Suche" Adornment="Adornment.Start" AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Medium"></MudTextField>
                        </ToolBarContent>
                        <HeaderContent>
                            <!-- <MudTh Sortable="true" @onclick="() => events_table_sorted_column = (nameof(Events_Table.description))" style="white-space: nowrap;">Gelesen</MudTh> -->
                            <MudTh Sortable="true" @onclick="() => events_table_sorted_column = (nameof(Events_Table.date))" style="white-space: nowrap;">Datum</MudTh>
                            <MudTh Sortable="true" @onclick="() => events_table_sorted_column = (nameof(Events_Table.device_name))" style="white-space: nowrap;">Gerät</MudTh>
                            <MudTh Sortable="true" @onclick="() => events_table_sorted_column = (nameof(Events_Table.tenant_name))" style="white-space: nowrap;">Mandant</MudTh>
                            <MudTh Sortable="true" @onclick="() => events_table_sorted_column = (nameof(Events_Table.location_name))" style="white-space: nowrap;">Standort</MudTh>
                            <MudTh Sortable="true" @onclick="() => events_table_sorted_column = (nameof(Events_Table.severity))" style="white-space: nowrap;">Schweregrad</MudTh>
                            <MudTh Sortable="true" @onclick="() => events_table_sorted_column = (nameof(Events_Table.reported_by))" style="white-space: nowrap;">Melder</MudTh>
                            <MudTh Sortable="true" @onclick="() => events_table_sorted_column = (nameof(Events_Table._event))" style="white-space: nowrap;">Event</MudTh>
                            <MudTh Sortable="true" @onclick="() => events_table_sorted_column = (nameof(Events_Table.description))" style="white-space: nowrap;">Beschreibung</MudTh>
                        </HeaderContent>

                        <RowTemplate Context="events_row">

                            <MudTd DataLabel="Datum" @onclick="() => Events_RowClickHandler(events_row)" class="@Events_GetRowClass(events_row)" style="white-space: nowrap;">
                                <span style="display: flex; align-items: center;">
                                    &nbsp;@events_row.date
                                </span>
                            </MudTd>

                            <MudTd DataLabel="Id" @onclick="() => Events_RowClickHandler(events_row)" class="@Events_GetRowClass(events_row)" style="white-space: nowrap; display: none;">
                                <span style="display: flex; align-items: center;">
                                    &nbsp;@events_row.id
                                </span>
                            </MudTd>

                            <MudTd DataLabel="Gerät" @onclick="() => Events_RowClickHandler(events_row)" class="@Events_GetRowClass(events_row)" style="white-space: nowrap;">
                                <span style="display: flex; align-items: center;">
                                    &nbsp;@events_row.device_name
                                </span>
                            </MudTd>

                            <MudTd DataLabel="Mandant" @onclick="() => Events_RowClickHandler(events_row)" class="@Events_GetRowClass(events_row)" style="white-space: nowrap;">
                                <span style="display: flex; align-items: center;">
                                    &nbsp;@events_row.tenant_name
                                </span>
                            </MudTd>

                            <MudTd DataLabel="Standort" @onclick="() => Events_RowClickHandler(events_row)" class="@Events_GetRowClass(events_row)" style="white-space: nowrap;">
                                <span style="display: flex; align-items: center;">
                                    &nbsp;@events_row.location_name
                                </span>
                            </MudTd>

                            <MudTd DataLabel="Schweregrad" @onclick="() => Events_RowClickHandler(events_row)" class="@Events_GetRowClass(events_row)" style="white-space: nowrap;">
                                <span style="display: flex; align-items: center;">
                                    @{
                                        string severity = String.Empty;

                                        if (events_row.severity == "0")
                                            severity = "Niedrig";
                                        else if (events_row.severity == "1")
                                            severity = "Moderat";
                                        else if (events_row.severity == "2")
                                            severity = "Hoch";
                                        else if (events_row.severity == "3")
                                            severity = "Kritisch";
                                    }
                                    &nbsp;@severity
                                </span>
                            </MudTd>

                            <MudTd DataLabel="Melder" @onclick="() => Events_RowClickHandler(events_row)" class="@Events_GetRowClass(events_row)" style="white-space: nowrap;">
                                <span style="display: flex; align-items: center;">
                                    &nbsp;@events_row.reported_by
                                </span>
                            </MudTd>

                            <MudTd DataLabel="Event" @onclick="() => Events_RowClickHandler(events_row)" class="@Events_GetRowClass(events_row)" style="white-space: nowrap;">
                                <span style="display: flex; align-items: center;">
                                    &nbsp;@events_row._event
                                </span>
                            </MudTd>

                            <MudTd DataLabel="Beschreibung" @onclick="() => Events_RowClickHandler(events_row)" class="@Events_GetRowClass(events_row)" style="white-space: nowrap;">
                                <span style="display: flex; align-items: center;">
                                    <MudExpansionPanel Class="mt-0 custom-expansion-panel">
                                        <TitleContent>
                                            @{

                                                string description = events_row.description.Substring(0, Math.Min(events_row.description.Length, 85));

                                                <span style="display: flex; align-items: center;">
                                                    <MudIcon Icon="@Icons.Material.Filled.ArrowDropDown" Size="Size.Small" />&nbsp;@description
                                                </span>
                                            }
                                        </TitleContent>

                                        <ChildContent>
                                            <MudPaper Style="overflow: auto;">
                                                @{
                                                    <MudTextField Class="ml-2 mr-2" T="string" Lines="50" Variant="Variant.Text" Text="@events_row.description" ReadOnly="true" />
                                                }
                                            </MudPaper>
                                        </ChildContent>
                                    </MudExpansionPanel>
                                </span>
                            </MudTd>

                            <MudTd DataLabel="Gelesen" @onclick="() => Events_RowClickHandler(events_row)" class="@Events_GetRowClass(events_row)" style="white-space: nowrap; display: none;">
                                <span style="display: flex; align-items: center;">
                                    &nbsp;@events_row.read
                                </span>
                            </MudTd>

                            <MudTd DataLabel="Typ" @onclick="() => Events_RowClickHandler(events_row)" class="@Events_GetRowClass(events_row)" style="white-space: nowrap; display: none;">
                                <span style="display: flex; align-items: center;">
                                    &nbsp;@events_row.type
                                </span>
                            </MudTd>

                        </RowTemplate>
                        <PagerContent>
                            <MudTablePager PageSizeOptions="new int[] { 10, 25, 50, 100, 250, 500, int.MaxValue }" RowsPerPageString="Einträge pro Seite" />
                        </PagerContent>
                    </MudTable>

                </MudPaper>
            }
        }

    </Authorized>
</AuthorizeView>
    
@code {

    private bool loading_overlay = false;

    protected override async Task OnInitializedAsync()
    {
        loading_overlay = true;
        await Permissions_Load();

        //Check permissions
        if (!permissions_dashboard_enabled)
            NavigationManager.NavigateTo("/logout", true);

        await Chart_Options();
        await Get_Charts_Data();
        loading_overlay = false;

        events_mysql_data = await Events_Load(false);  
    }

    #region Permissions

    private string permissions_json = String.Empty;
    private string permissions_tenants_json = String.Empty;
    public static List<string> permissions_tenants_list = new List<string> { };

    private bool permissions_dashboard_enabled = false;

    public class Permissions_Tenants_Activation_State
    {
        public string name { get; set; } = String.Empty;
    }

    private async Task Permissions_Load()
    {
        //Extract user info from users session storage
        var sessionStorage = new ProtectedSessionStorage(JSRuntime, DataProtectionProvider);
        var username = await sessionStorage.GetAsync<string>("username");
        var password = await sessionStorage.GetAsync<string>("password");

        Logging.Handler.Debug("NavMenu -> Permissions_Load", "username", username.Value ?? String.Empty);

        //if user info empty, force logout
        if (String.IsNullOrEmpty(username.Value) || String.IsNullOrEmpty(password.Value))
        {
            Logging.Handler.Debug("NavMenu -> Permissions_Load", "sessions storage data", "empty, force logout");

            NavigationManager.NavigateTo("/logout", true);
            return;
        }

        //Check if user info is valid, if not, force logout
        if (!Classes.Authentication.User.Login_User(username.Value ?? String.Empty, password.Value ?? String.Empty))
        {
            Logging.Handler.Debug("NavMenu -> Permissions_Load", "verify user", "incorrect data, force logout");

            NavigationManager.NavigateTo("/logout", true);
            return;
        }

        //Get permissions
        string query = "SELECT * FROM `accounts` WHERE username = @username;";

        MySqlConnection conn = new MySqlConnection(Application_Settings.connectionString);

        try
        {
            await conn.OpenAsync();

            MySqlCommand command = new MySqlCommand(query, conn);
            command.Parameters.AddWithValue("@username", username.Value);

            Logging.Handler.Debug("NavMenu -> Permissions_Load", "query", query);

            using (DbDataReader reader = await command.ExecuteReaderAsync())
            {
                if (reader.HasRows)
                {
                    while (await reader.ReadAsync())
                    {
                        permissions_json = reader["permissions"].ToString() ?? String.Empty;
                        permissions_tenants_json = reader["tenants"].ToString() ?? String.Empty;
                    }
                }
            }

            Logging.Handler.Debug("NavMenu -> Permissions_Load", "permissions_json", permissions_json);

            //Extract permissions
            if (!String.IsNullOrEmpty(permissions_json))
            {
                using (JsonDocument document = JsonDocument.Parse(permissions_json))
                {
                    try
                    {
                        //dashboard_enabled
                        JsonElement dashboard_enabled_element = document.RootElement.GetProperty("dashboard_enabled");
                        permissions_dashboard_enabled = dashboard_enabled_element.GetBoolean();
                    }
                    catch (Exception ex)
                    {
                        Logging.Handler.Error("NavMenu -> Permissions_Load", "permissions_json (permissions_dashboard_enabled)", ex.Message);
                    }
                }
            }
            else if (permissions_json == "[]")
            {
                Logging.Handler.Debug("NavMenu -> Permissions_Load", "permissions_json", "Empty, logout user");
                NavigationManager.NavigateTo("/logout", true);
            }
            else
            {
                Logging.Handler.Debug("NavMenu -> Permissions_Load", "permissions_json", "Empty, logout user");
                NavigationManager.NavigateTo("/logout", true);
            }

            //Extract tenants from json
            permissions_tenants_list.Clear();
            if (!String.IsNullOrEmpty(permissions_tenants_json))
            {
                //Set the activation state for the tenants
                try
                {
                    List<Permissions_Tenants_Activation_State> tenants_activation_state_list = JsonSerializer.Deserialize<List<Permissions_Tenants_Activation_State>>(permissions_tenants_json);

                    foreach (var tenant in tenants_activation_state_list)
                    {
                        Logging.Handler.Debug("NavMenu -> Permissions_Load", "foreach tenant", tenant.name);

                        permissions_tenants_list.Add(tenant.name);
                    }
                }
                catch (Exception ex)
                {
                    Logging.Handler.Error("NavMenu -> Permissions_Load (permissions_tenants_json deserialize)", "Result", ex.Message);
                }
            }
            else
            {
                Logging.Handler.Debug("NavMenu -> Permissions_Load (permissions_tenants_json deserialize)", "Result", "Empty");
            }
        }
        catch (Exception ex)
        {
            Logging.Handler.Error("NavMenu -> Permissions_Load", "general_error (force logout)", ex.Message);
            NavigationManager.NavigateTo("/logout", true);
        }
        finally
        {
            conn.Close();
        }
    }

    #endregion

    #region Charts

    public string device_status = String.Empty;

    ChartOptions device_status_chart_options = new ChartOptions();
    private string[] device_status_colors = { "#4CAF50", "#ffa500", "#ffe314", "#9E9E9E" };

    ChartOptions events_severity_chart_options = new ChartOptions();
    private string[] events_severity_colors = { "#9E9E9E", "#ffe314", "#ffa500", "#b00112" };

    ChartOptions events_type_chart_options = new ChartOptions();
    private string[] events_type_colors = { "#b00112", "#9E9E9E", "#ffa500" };

    private async Task Chart_Options()
    {
        device_status_chart_options.ChartPalette = device_status_colors;
        events_severity_chart_options.ChartPalette = events_severity_colors;
        events_type_chart_options.ChartPalette = events_type_colors;
    }

    // Device Status
    private int devices_total = 0;
    private int devices_authorized = 0;
    private int devices_unauthorized = 0;
    private int devices_online = 0;
    private int devices_offline = 0;

    // Events Types
    private int events_total = 0;
    private int events_antivirus = 0;
    private int events_jobs = 0;
    private int events_sensors = 0;

    // Events Severity
    private int events_severity_low = 0;
    private int events_severity_moderate = 0;
    private int events_severity_high = 0;
    private int events_severity_critical = 0;

    private async Task Get_Charts_Data()
    {
        // Device Status
        devices_total = Convert.ToInt32(await Classes.MySQL.Handler.Quick_Reader("SELECT COUNT(*) AS count FROM devices;", "count")); // Get the total number of devices
        Logging.Handler.Debug("/dashboard -> Get_Charts_Data", "Get_Device_Status", "Total number of devices: " + devices_total);
        devices_authorized = Convert.ToInt32(await Classes.MySQL.Handler.Quick_Reader("SELECT COUNT(*) AS count FROM devices WHERE authorized = 1;", "count")); // Get the total number of authorized devices
        Logging.Handler.Debug("/dashboard -> Get_Charts_Data", "Get_Device_Status", "Total number of devices: " + devices_authorized);
        devices_unauthorized = Convert.ToInt32(await Classes.MySQL.Handler.Quick_Reader("SELECT COUNT(*) AS count FROM devices WHERE authorized = 0;", "count")); // Get the total number of unauthorized devices
        Logging.Handler.Debug("/dashboard -> Get_Charts_Data", "Get_Device_Status", "Total number of devices: " + devices_authorized);
        devices_online = Convert.ToInt32(await Classes.MySQL.Handler.Quick_Reader("SELECT COUNT(*) AS count FROM devices WHERE last_access > NOW() - INTERVAL 60 MINUTE;", "count")); // Get the total number of online devices
        Logging.Handler.Debug("/dashboard -> Get_Charts_Data", "Get_Device_Status", "Total number of devices: " + devices_online);
        devices_offline = Convert.ToInt32(await Classes.MySQL.Handler.Quick_Reader("SELECT COUNT(*) AS count FROM devices WHERE last_access < NOW() - INTERVAL 60 MINUTE;", "count")); // Get the total number of offline devices
        Logging.Handler.Debug("/dashboard -> Get_Charts_Data", "Get_Device_Status", "Total number of devices: " + devices_offline);

        // Events Types
        events_antivirus = Convert.ToInt32(await Classes.MySQL.Handler.Quick_Reader("SELECT COUNT(*) AS count FROM `events` WHERE `type` = 0 AND DATE > NOW() - INTERVAL 24 HOUR;", "count")); // Get the total number of devices
        Logging.Handler.Debug("/dashboard -> Get_Charts_Data", "Get_Device_Status", "Total number of events_antivirus: " + events_antivirus);
        events_jobs = Convert.ToInt32(await Classes.MySQL.Handler.Quick_Reader("SELECT COUNT(*) AS count FROM `events` WHERE `type` = 1 AND DATE > NOW() - INTERVAL 24 HOUR;", "count")); // Get the total number of authorized devices
        Logging.Handler.Debug("/dashboard -> Get_Charts_Data", "Get_Device_Status", "Total number of events_jobs: " + events_jobs);
        events_sensors = Convert.ToInt32(await Classes.MySQL.Handler.Quick_Reader("SELECT COUNT(*) AS count FROM `events` WHERE `type` = 2 AND DATE > NOW() - INTERVAL 24 HOUR", "count")); // Get the total number of unauthorized devices
        Logging.Handler.Debug("/dashboard -> Get_Charts_Data", "Get_Device_Status", "Total number of events_sensors: " + events_sensors);

        // Events Severity
        events_total = Convert.ToInt32(await Classes.MySQL.Handler.Quick_Reader("SELECT COUNT(*) AS count FROM `events` WHERE DATE > NOW() - INTERVAL 24 HOUR;", "count")); // Get the total number of online devices
        Logging.Handler.Debug("/dashboard -> Get_Charts_Data", "Get_Device_Status", "Total number of events_total: " + events_total);
        events_severity_low = Convert.ToInt32(await Classes.MySQL.Handler.Quick_Reader("SELECT COUNT(*) AS count FROM `events` WHERE severity = 0 AND DATE > NOW() - INTERVAL 24 HOUR;", "count")); // Get the total number of online devices
        Logging.Handler.Debug("/dashboard -> Get_Charts_Data", "Get_Device_Status", "Total number of events_severity_low: " + events_severity_low);
        events_severity_moderate = Convert.ToInt32(await Classes.MySQL.Handler.Quick_Reader("SELECT COUNT(*) AS count FROM `events` WHERE severity = 1 AND DATE > NOW() - INTERVAL 24 HOUR;", "count")); // Get the total number of offline devices
        Logging.Handler.Debug("/dashboard -> Get_Charts_Data", "Get_Device_Status", "Total number of events_severity_moderate: " + events_severity_moderate);
        events_severity_high = Convert.ToInt32(await Classes.MySQL.Handler.Quick_Reader("SELECT COUNT(*) AS count FROM `events` WHERE severity = 2 AND DATE > NOW() - INTERVAL 24 HOUR;", "count")); // Get the total number of online devices
        Logging.Handler.Debug("/dashboard -> Get_Charts_Data", "Get_Device_Status", "Total number of events_severity_high: " + events_severity_high);
        events_severity_critical = Convert.ToInt32(await Classes.MySQL.Handler.Quick_Reader("SELECT COUNT(*) AS count FROM `events` WHERE severity = 3 AND DATE > NOW() - INTERVAL 24 HOUR;", "count")); // Get the total number of offline devices
        Logging.Handler.Debug("/dashboard -> Get_Charts_Data", "Get_Device_Status", "Total number of events_severity_critical: " + events_severity_critical);
    }

    #endregion

    #region Events
    int events_rows_per_page = 10;

    public List<Events_Table> events_mysql_data; //Datasource for table

    public class Events_Table
    {
        public string id { get; set; } = String.Empty;
        public string device_name { get; set; } = String.Empty;
        public string location_name { get; set; } = String.Empty;
        public string tenant_name { get; set; } = String.Empty;
        public string date { get; set; } = String.Empty;
        public string severity { get; set; } = String.Empty;
        public string reported_by { get; set; } = String.Empty;
        public string _event { get; set; } = String.Empty;
        public string description { get; set; } = String.Empty;
        public string read { get; set; } = String.Empty;
        public string type { get; set; } = String.Empty;
    }

    private string events_table_sorted_column;
    private string events_table_search_string = String.Empty;
    private MudDateRangePicker device_information_events_table_picker;
    private DateRange device_information_events_table_dateRange = new DateRange(DateTime.Now.Date.AddDays(-7), DateTime.Now.Date.AddDays(1));
    private string device_information_events_severity_string = "Egal";

    private async Task Events_Table_Submit()
    {
        device_information_events_table_picker.Close();

        events_mysql_data = await Events_Load(true);
    }

    private bool Events_Table_Filter_Func(Events_Table row)
    {
        if (string.IsNullOrEmpty(events_table_search_string))
            return true;

        //Search logic for each column
        return row.id.Contains(events_table_search_string, StringComparison.OrdinalIgnoreCase) ||
            row.date.Contains(events_table_search_string, StringComparison.OrdinalIgnoreCase) ||
            row.severity.Contains(events_table_search_string, StringComparison.OrdinalIgnoreCase) ||
            row.reported_by.Contains(events_table_search_string, StringComparison.OrdinalIgnoreCase) ||
            row._event.Contains(events_table_search_string, StringComparison.OrdinalIgnoreCase) ||
            row.description.Contains(events_table_search_string, StringComparison.OrdinalIgnoreCase) ||
            row.read.Contains(events_table_search_string, StringComparison.OrdinalIgnoreCase) ||
            row.type.Contains(events_table_search_string, StringComparison.OrdinalIgnoreCase);
    }

    private string events_selectedRowContent = ""; // Saving content of selected row

    // Executes on row click
    private async Task Events_RowClickHandler(Events_Table row)
    {
        Logging.Handler.Debug("/dashboard -> Events_RowClickHandler", "Row_Click", row.id); //Output the selected row

        events_selectedRowContent = row.id;

        await Event_Details_Dialog(row.device_name);

        // Mark log as read
        await Classes.MySQL.Handler.Execute_Command("UPDATE `events` SET `read` = 1 WHERE `id` = " + Convert.ToInt32(row.id) + ";");
    }

    private string Events_GetRowClass(Events_Table row)
    {
        return row.id == events_selectedRowContent ? "selected-row" : "";
    }

    int events_load_counter = 0;

    private async Task<List<Events_Table>> Events_Load(bool bypass_events_load_counter)
    {
        if (events_load_counter != 0 && bypass_events_load_counter == false)
        {
            events_load_counter++;
            return new List<Events_Table>();
        }

        loading_overlay = true;

        string query = "SELECT * FROM events WHERE `read` = 0 AND date >= @start_date AND date <= @end_date ORDER BY date DESC;";

        //Select severity
        if (device_information_events_severity_string == "Niedrig")
            query = "SELECT * FROM events WHERE `read` = 0 AND date >= @start_date AND date <= @end_date AND severity = 0 ORDER BY date DESC;";
        else if (device_information_events_severity_string == "Moderat")
            query = "SELECT * FROM events WHERE `read` = 0 AND date >= @start_date AND date <= @end_date AND severity = 1 ORDER BY date DESC;";
        else if (device_information_events_severity_string == "Hoch")
            query = "SELECT * FROM events WHERE `read` = 0 AND date >= @start_date AND date <= @end_date AND severity = 2 ORDER BY date DESC;";
        else if (device_information_events_severity_string == "Kritisch")
            query = "SELECT * FROM events WHERE `read` = 0 AND date >= @start_date AND date <= @end_date AND severity = 3 ORDER BY date DESC;";

        MySqlConnection conn = new MySqlConnection(Application_Settings.connectionString);

        try
        {
            List<Events_Table> result = new List<Events_Table>();

            await conn.OpenAsync();

            MySqlCommand command = new MySqlCommand(query, conn);
            command = new MySqlCommand(query, conn);
            command.Parameters.AddWithValue("@start_date", device_information_events_table_dateRange.Start.Value);
            command.Parameters.AddWithValue("@end_date", device_information_events_table_dateRange.End.Value);

            Logging.Handler.Debug("/dashboard -> Events_Load", "MySQL_Prepared_Query", query); //Output prepared query

            using (DbDataReader reader = await command.ExecuteReaderAsync())
            {
                if (reader.HasRows)
                {
                    while (await reader.ReadAsync())
                    {
                        //Logging.Handler.Debug("Events", "MySQL_Result", reader["id"].ToString()); //Output the JSON

                        Events_Table entity = new Events_Table //Create the entity
                            {
                                id = reader["id"].ToString() ?? String.Empty,
                                device_name = reader["device_name"].ToString() ?? String.Empty,
                                tenant_name = reader["tenant_name_snapshot"].ToString() ?? String.Empty,
                                location_name = reader["location_name_snapshot"].ToString() ?? String.Empty,
                                date = reader["date"].ToString() ?? String.Empty,
                                severity = reader["severity"].ToString() ?? String.Empty,
                                reported_by = reader["reported_by"].ToString() ?? String.Empty,
                                _event = reader["_event"].ToString() ?? String.Empty,
                                description = reader["description"].ToString() ?? String.Empty,
                                read = reader["read"].ToString() ?? String.Empty,
                                type = reader["type"].ToString() ?? String.Empty,
                            };

                        result.Add(entity); // Add the entity to the list
                    }
                }
            }

            return result; //Return the list
        }
        catch (Exception ex)
        {
            Logging.Handler.Error("/dashboard -> Events_Load", "MySQL_Query", ex.Message);
            return new List<Events_Table>(); // Return an empty list or handle the exception as needed
        }
        finally
        {
            conn.Close();
            loading_overlay = false;
        }
    }

    private async Task Export_Events_Table_Dialog()
    {
        //await Show_Export_Table_Dialog("events");
    }

    private async Task Event_Details_Dialog(string device_name)
    {
        var options = new DialogOptions
            {
                DisableBackdropClick = false,
                MaxWidth = MaxWidth.Small,
                ClassBackground = "dialog-blurring",
            };

        DialogParameters parameters = new DialogParameters();
        parameters.Add("event_id", events_selectedRowContent);
        parameters.Add("device_name", device_name);



        var result = await this.DialogService.Show<Pages.Dashboard.Dialogs.Event_Details_Dialog>(string.Empty, parameters, options).Result;

        if (result.Cancelled)
            return;

        Logging.Handler.Debug("/manage_scripts -> Add_Script_Dialog", "Result", result.Data.ToString());
    }

    #endregion
}
