@page "/Dashboard"

@using MySqlConnector
@using System.Data
@using System.Data.Common
@using Microsoft.AspNetCore.Components.Server.ProtectedBrowserStorage
@using Microsoft.AspNetCore.DataProtection
@using System.Text.Json

@inject NavigationManager NavigationManager
@inject ILocalStorageService localStorage
@inject IJSRuntime JSRuntime
@inject IDataProtectionProvider DataProtectionProvider

<AuthorizeView>
    <NotAuthorized>
        @{
            NavigationManager.NavigateTo("/", true);
        }
    </NotAuthorized>
</AuthorizeView>

<AuthorizeView Roles="Administrator">
    <Authorized>
        @{
            if (permissions_dashboard_enabled)
            {
                <h1>Dashboard</h1>

                @context.User.Identity.Name

                <MudGrid Spacing="@spacing" Justify="Justify.FlexStart">
                    <MudItem>
                        <MudPaper Height="250px" Width="300px">
                            <MudText Typo="Typo.h5" Align="Align.Center">Security Events (Total)</MudText>


                        </MudPaper>
                    </MudItem>
                    <MudItem>
                        <MudPaper Height="250px" Width="300px">
                            <MudText Typo="Typo.h5" Align="Align.Center">Security Events (24H)</MudText>


                        </MudPaper>
                    </MudItem>
                    <MudItem>
                        <MudPaper Height="250px" Width="300px">
                            <MudText Typo="Typo.h5" Align="Align.Center">Infrastructure Events (Total)</MudText>


                        </MudPaper>
                    </MudItem>
                    <MudItem>
                        <MudPaper Height="250px" Width="300px">
                            <MudText Typo="Typo.h5" Align="Align.Center">Infrastructure Events (24H)</MudText>


                        </MudPaper>
                    </MudItem>

                </MudGrid>
            }
        }

    </Authorized>
</AuthorizeView>
    
@code {

    protected override async Task OnInitializedAsync()
    {
        await Permissions_Load();

        //Check permissions
        if (!permissions_dashboard_enabled)
            NavigationManager.NavigateTo("/logout", true);
    }

    public int spacing { get; set; } = 2;

    private string permissions_json = String.Empty;
    private string permissions_tenants_json = String.Empty;
    public static List<string> permissions_tenants_list = new List<string> { };

    private bool permissions_dashboard_enabled = false;

    public class Permissions_Tenants_Activation_State
    {
        public string name { get; set; } = String.Empty;
    }

    private async Task Permissions_Load()
    {
        //Extract user info from users session storage
        var sessionStorage = new ProtectedSessionStorage(JSRuntime, DataProtectionProvider);
        var username = await sessionStorage.GetAsync<string>("username");
        var password = await sessionStorage.GetAsync<string>("password");

        Logging.Handler.Debug("NavMenu -> Permissions_Load", "username", username.Value ?? String.Empty);

        //if user info empty, force logout
        if (String.IsNullOrEmpty(username.Value) || String.IsNullOrEmpty(password.Value))
        {
            Logging.Handler.Debug("NavMenu -> Permissions_Load", "sessions storage data", "empty, force logout");

            NavigationManager.NavigateTo("/logout", true);
            return;
        }

        //Check if user info is valid, if not, force logout
        if (!Classes.Authentication.User.Login_User(username.Value ?? String.Empty, password.Value ?? String.Empty))
        {
            Logging.Handler.Debug("NavMenu -> Permissions_Load", "verify user", "incorrect data, force logout");

            NavigationManager.NavigateTo("/logout", true);
            return;
        }

        //Get permissions
        string query = "SELECT * FROM `accounts` WHERE username = @username;";

        MySqlConnection conn = new MySqlConnection(Application_Settings.connectionString);

        try
        {
            await conn.OpenAsync();

            MySqlCommand command = new MySqlCommand(query, conn);
            command.Parameters.AddWithValue("@username", username.Value);

            Logging.Handler.Debug("NavMenu -> Permissions_Load", "query", query);

            using (DbDataReader reader = await command.ExecuteReaderAsync())
            {
                if (reader.HasRows)
                {
                    while (await reader.ReadAsync())
                    {
                        permissions_json = reader["permissions"].ToString() ?? String.Empty;
                        permissions_tenants_json = reader["tenants"].ToString() ?? String.Empty;
                    }
                }
            }

            Logging.Handler.Debug("NavMenu -> Permissions_Load", "permissions_json", permissions_json);

            //Extract permissions
            if (!String.IsNullOrEmpty(permissions_json))
            {
                using (JsonDocument document = JsonDocument.Parse(permissions_json))
                {
                    try
                    {
                        //dashboard_enabled
                        JsonElement dashboard_enabled_element = document.RootElement.GetProperty("dashboard_enabled");
                        permissions_dashboard_enabled = dashboard_enabled_element.GetBoolean();
                    }
                    catch (Exception ex)
                    {
                        Logging.Handler.Error("NavMenu -> Permissions_Load", "permissions_json (permissions_dashboard_enabled)", ex.Message);
                    }
                }
            }
            else if (permissions_json == "[]")
            {
                Logging.Handler.Debug("NavMenu -> Permissions_Load", "permissions_json", "Empty, logout user");
                NavigationManager.NavigateTo("/logout", true);
            }
            else
            {
                Logging.Handler.Debug("NavMenu -> Permissions_Load", "permissions_json", "Empty, logout user");
                NavigationManager.NavigateTo("/logout", true);
            }

            //Extract tenants from json
            permissions_tenants_list.Clear();
            if (!String.IsNullOrEmpty(permissions_tenants_json))
            {
                //Set the activation state for the tenants
                try
                {
                    List<Permissions_Tenants_Activation_State> tenants_activation_state_list = JsonSerializer.Deserialize<List<Permissions_Tenants_Activation_State>>(permissions_tenants_json);

                    foreach (var tenant in tenants_activation_state_list)
                    {
                        Logging.Handler.Debug("NavMenu -> Permissions_Load", "foreach tenant", tenant.name);

                        permissions_tenants_list.Add(tenant.name);
                    }
                }
                catch (Exception ex)
                {
                    Logging.Handler.Error("NavMenu -> Permissions_Load (permissions_tenants_json deserialize)", "Result", ex.Message);
                }
            }
            else
            {
                Logging.Handler.Debug("NavMenu -> Permissions_Load (permissions_tenants_json deserialize)", "Result", "Empty");
            }
        }
        catch (Exception ex)
        {
            Logging.Handler.Error("NavMenu -> Permissions_Load", "general_error (force logout)", ex.Message);
            NavigationManager.NavigateTo("/logout", true);
        }
        finally
        {
            conn.Close();
        }
    }


}
