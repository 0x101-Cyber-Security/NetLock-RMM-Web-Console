@page "/manage_tenants"
@using MySqlConnector;
@using System.Data.Common;
@using System.Text.Json;
@using OfficeOpenXml;
@using System.Xml.Serialization;
@using System.Text;
@using Microsoft.AspNetCore.Components.Server.ProtectedBrowserStorage
@using Microsoft.AspNetCore.DataProtection

@inject NavigationManager NavigationManager
@inject ILocalStorageService localStorage
@inject IDialogService DialogService
@inject ISnackbar Snackbar
@inject IJSRuntime JSRuntime
@inject IDataProtectionProvider DataProtectionProvider

<AuthorizeView>
    <NotAuthorized>
        @{
            NavigationManager.NavigateTo("/");
        }
    </NotAuthorized>
    <Authorized>

        @{
            if (permissions_tenants_enabled)
            {
                <MudText Class="mt-5" Typo="Typo.h5">Mandantenverwaltung</MudText>

                if (permissions_tenants_add)
                {
                    <MudButton Class="mt-5" Size="Size.Small" Color="Color.Default" Variant="Variant.Filled" StartIcon="@Icons.Material.Filled.AddBusiness" OnClick="@Show_Add_Tenant_Dialog">Hinzufügen</MudButton>
                }

                <MudTooltip Text="Daten exportieren">
                    <MudIconButton Class="ml-2 mt-5" Icon="@Icons.Material.Filled.FileDownload" Variant="Variant.Filled" Size="Size.Small" Color="Color.Default" @onclick="Show_Export_Table_Dialog"></MudIconButton>
                </MudTooltip>

                <MudTable Class="mt-5" Height="65vh" FixedHeader="true" FixedFooter="true" Hover="true" RowsPerPage="25" Dense="true" Items="@tenants_mysql_data" Filter="new Func<Tenants_Entity, bool>(Tenants_Notifications_Table_Filter_Func)">
                    <ToolBarContent>
                        <MudTextField @bind-Value="tenants_table_search_string" Placeholder="Suche" Adornment="Adornment.Start" AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Medium" Class="mt-0"></MudTextField>
                    </ToolBarContent>
                    <HeaderContent>
                        <MudTh Sortable="true" @onclick="() => tenants_table_sorted_column = (nameof(Tenants_Entity.tenant_name))" style="white-space: nowrap;">Name</MudTh>
                        <MudTh Sortable="true" @onclick="() => tenants_table_sorted_column = (nameof(Tenants_Entity.company))" style="white-space: nowrap;">Unternehmen</MudTh>
                        <MudTh Sortable="true" @onclick="() => tenants_table_sorted_column = (nameof(Tenants_Entity.date))" style="white-space: nowrap;">Erstellt</MudTh>
                        <MudTh Sortable="true" @onclick="() => tenants_table_sorted_column = (nameof(Tenants_Entity.author))" style="white-space: nowrap;">Author</MudTh>
                        <MudTh Sortable="true" @onclick="() => tenants_table_sorted_column = (nameof(Tenants_Entity.description))" style="white-space: nowrap;">Beschreibung</MudTh>
                        <MudTh></MudTh>
                    </HeaderContent>
                    <RowTemplate Context="tenants_row">

                        <MudTd DataLabel="Name" @onclick="() => Tenants_Notifications_RowClickHandler(tenants_row)" class="@Tenants_Notifications_GetRowClass(tenants_row)" style="white-space: nowrap;">
                            <span style="display: flex; align-items: center;">
                                <MudIcon Icon="@Icons.Material.Filled.AddBusiness" Size="Size.Small" />&nbsp;@tenants_row.tenant_name
                            </span>
                        </MudTd>

                        <MudTd DataLabel="Unternehmen" @onclick="() => Tenants_Notifications_RowClickHandler(tenants_row)" class="@Tenants_Notifications_GetRowClass(tenants_row)" style="white-space: nowrap;">
                            <span style="display: flex; align-items: center;">
                                <MudIcon Icon="@Icons.Material.Filled.Business" Size="Size.Small" />&nbsp;@tenants_row.company
                            </span>
                        </MudTd>

                        <MudTd DataLabel="Erstellt" @onclick="() => Tenants_Notifications_RowClickHandler(tenants_row)" class="@Tenants_Notifications_GetRowClass(tenants_row)" style="white-space: nowrap;">
                            <span style="display: flex; align-items: center;">
                                <MudIcon Icon="@Icons.Material.Filled.DateRange" Size="Size.Small" />&nbsp;@tenants_row.date
                            </span>
                        </MudTd>

                        <MudTd DataLabel="Author" @onclick="() => Tenants_Notifications_RowClickHandler(tenants_row)" class="@Tenants_Notifications_GetRowClass(tenants_row)" style="white-space: nowrap;">
                            <span style="display: flex; align-items: center;">
                                <MudIcon Icon="@Icons.Material.Filled.SupportAgent" Size="Size.Small" />&nbsp;@tenants_row.author
                            </span>
                        </MudTd>

                        <MudTd DataLabel="Beschreibung" @onclick="() => Tenants_Notifications_RowClickHandler(tenants_row)" class="@Tenants_Notifications_GetRowClass(tenants_row)" style="white-space: nowrap;">
                            <span style="display: flex; align-items: center;">
                                <MudIcon Icon="@Icons.Material.Filled.Description" Size="Size.Small" />&nbsp;@tenants_row.description
                            </span>
                        </MudTd>

                        @{
                            if (permissions_tenants_manage)
                            {
                                <MudTd DataLabel="Author" @onclick="() => Tenants_Notifications_RowClickHandler(tenants_row)" class="@Tenants_Notifications_GetRowClass(tenants_row)" style="white-space: nowrap;">
                                    <span style="display: flex; align-items: center;">
                                        <MudButton Size=Size.Small Variant="@Variant.Filled" Color="@Color.Default" StartIcon="@Icons.Material.Filled.Settings" @onclick="@(() => UpdateSelectedTenant(tenants_row.tenant_name))">Verwalten</MudButton>
                                    </span>
                                </MudTd>
                            }
                        }
                    </RowTemplate>
                    <PagerContent>
                        <MudTablePager PageSizeOptions="new int[] { 10, 25, 50, 100, 250, 500, int.MaxValue }" RowsPerPageString="Einträge pro Seite" />
                    </PagerContent>
                </MudTable>
            }
        }

    </Authorized>
</AuthorizeView>

<style>
    .dialog-blurring{
        backdrop-filter: blur(10px);
    }
</style>

@code {

    #region Permissions System

    private string permissions_json = String.Empty;
    private string permissions_tenants_json = String.Empty;
    public static List<string> permissions_tenants_list = new List<string> { };

    private bool permissions_tenants_enabled = false;
    private bool permissions_tenants_add = false;
    private bool permissions_tenants_manage = false;

    public class Permissions_Tenants_Activation_State
    {
        public string name { get; set; } = String.Empty;
    }

    private async Task Get_Permissions()
    {
        //Extract user info from users session storage
        var sessionStorage = new ProtectedSessionStorage(JSRuntime, DataProtectionProvider);
        var username = await sessionStorage.GetAsync<string>("username");
        var password = await sessionStorage.GetAsync<string>("password");

        Logging.Handler.Debug("/manage_tenants -> Get_Permissions", "username", username.Value ?? String.Empty);

        //if user info empty, force logout
        if (String.IsNullOrEmpty(username.Value) || String.IsNullOrEmpty(password.Value))
        {
            Logging.Handler.Debug("/manage_tenants -> Get_Permissions", "sessions storage data", "empty, force logout");

            NavigationManager.NavigateTo("/logout", true);
            return;
        }

        //Check if user info is valid, if not, force logout
        if (!await Classes.Authentication.User.Verify_User(username.Value ?? String.Empty, password.Value ?? String.Empty))
        {
            Logging.Handler.Debug("/manage_tenants -> Get_Permissions", "verify user", "incorrect data, force logout");

            NavigationManager.NavigateTo("/logout", true);
            return;
        }

        //Get permissions
        string query = "SELECT * FROM `accounts` WHERE username = @username;";

        MySqlConnection conn = new MySqlConnection(Application_Settings.connectionString);

        try
        {
            await conn.OpenAsync();

            MySqlCommand command = new MySqlCommand(query, conn);
            command.Parameters.AddWithValue("@username", username.Value);

            Logging.Handler.Debug("/manage_tenants -> Get_Permissions", "query", query);

            using (DbDataReader reader = await command.ExecuteReaderAsync())
            {
                if (reader.HasRows)
                {
                    while (await reader.ReadAsync())
                    {
                        permissions_json = reader["permissions"].ToString() ?? String.Empty;
                        permissions_tenants_json = reader["tenants"].ToString() ?? String.Empty;
                    }
                }
            }

            Logging.Handler.Debug("/manage_tenants -> Get_Permissions", "permissions_json", permissions_json);

            //Extract permissions
            if (!String.IsNullOrEmpty(permissions_json))
            {
                using (JsonDocument document = JsonDocument.Parse(permissions_json))
                {
                    //tenants_enabled
                    try
                    {
                        JsonElement element = document.RootElement.GetProperty("tenants_enabled");
                        permissions_tenants_enabled = element.GetBoolean();
                    }
                    catch (Exception ex)
                    {
                        Logging.Handler.Error("/manage_tenants -> Get_Permissions", "permissions_json (permissions_tenants_enabled)", ex.Message);
                    }

                    //tenants_add
                    try
                    {
                        JsonElement element = document.RootElement.GetProperty("tenants_add");
                        permissions_tenants_add = element.GetBoolean();
                    }
                    catch (Exception ex)
                    {
                        Logging.Handler.Error("/manage_tenants -> Get_Permissions", "permissions_json (tenants_add)", ex.Message);
                    }

                    //tenants_manage
                    try
                    {
                        JsonElement element = document.RootElement.GetProperty("tenants_manage");
                        permissions_tenants_manage = element.GetBoolean();
                    }
                    catch (Exception ex)
                    {
                        Logging.Handler.Error("/manage_tenants -> Get_Permissions", "permissions_json (tenants_manage)", ex.Message);
                    }
                }
            }
            else if (permissions_json == "[]")
            {
                Logging.Handler.Debug("/manage_tenants -> Get_Permissions", "permissions_json", "Empty, logout user");
                NavigationManager.NavigateTo("/logout", true);
            }
            else
            {
                Logging.Handler.Debug("/manage_tenants -> Get_Permissions", "permissions_json", "Empty, logout user");
                NavigationManager.NavigateTo("/logout", true);
            }

            //Extract tenants from json
            permissions_tenants_list.Clear();
            if (!String.IsNullOrEmpty(permissions_tenants_json))
            {
                //Set the activation state for the tenants
                try
                {
                    List<Permissions_Tenants_Activation_State> tenants_activation_state_list = JsonSerializer.Deserialize<List<Permissions_Tenants_Activation_State>>(permissions_tenants_json);

                    foreach (var tenant in tenants_activation_state_list)
                    {
                        Logging.Handler.Debug("/manage_tenants -> Get_Permissions", "foreach tenant", tenant.name);

                        permissions_tenants_list.Add(tenant.name);
                    }
                }
                catch (Exception ex)
                {
                    Logging.Handler.Error("/manage_tenants -> Get_Permissions (permissions_tenants_json deserialize)", "Result", ex.Message);
                }
            }
            else
            {
                Logging.Handler.Debug("/manage_tenants -> Get_Permissions (permissions_tenants_json deserialize)", "Result", "Empty");
            }
        }
        catch (Exception ex)
        {
            Logging.Handler.Error("/manage_tenants -> Get_Permissions", "general_error (force logout)", ex.Message);
            NavigationManager.NavigateTo("/logout", true);
        }
        finally
        {
            conn.Close();
        }
    }

    #endregion

    protected override async Task OnInitializedAsync()
    {
        await Get_Permissions();
        //Check permissions
        if (!permissions_tenants_enabled)
            NavigationManager.NavigateTo("/logout", true);

        await Get_Tenants_Overview();
    }

    public List<Tenants_Entity> tenants_mysql_data;

    public class Tenants_Entity
    {
        public string tenant_name { get; set; } = "Empty";
        public string date { get; set; } = "Empty";
        public string author { get; set; } = "Empty";
        public string description { get; set; } = "Empty";
        public string company { get; set; } = "Empty";
    }

    private string tenants_table_view_port = "70vh";
    private string tenants_table_sorted_column;
    private string tenants_table_search_string = "";

    private bool Tenants_Notifications_Table_Filter_Func(Tenants_Entity row)
    {
        if (string.IsNullOrEmpty(tenants_table_search_string))
            return true;

        //Search logic for each column
        return row.tenant_name.Contains(tenants_table_search_string, StringComparison.OrdinalIgnoreCase) ||
               row.company.Contains(tenants_table_search_string, StringComparison.OrdinalIgnoreCase) ||
               row.date.Contains(tenants_table_search_string, StringComparison.OrdinalIgnoreCase) ||
               row.author.Contains(tenants_table_search_string, StringComparison.OrdinalIgnoreCase) ||
               row.description.Contains(tenants_table_search_string, StringComparison.OrdinalIgnoreCase);
    }

    private string tenants_selectedRowContent = ""; // Hier wird der Inhalt der ausgewählten Zeile gespeichert

    // Der Handler für den TableRowClick-Event
    private void Tenants_Notifications_RowClickHandler(Tenants_Entity row)
    {
        tenants_selectedRowContent = row.tenant_name;
    }

    private string Tenants_Notifications_GetRowClass(Tenants_Entity row)
    {
        return row.tenant_name == tenants_selectedRowContent ? "selected-row" : "";
    }

    private async Task Get_Tenants_Overview()
    {
        tenants_mysql_data = new List<Tenants_Entity>();

        string tenant_name = await localStorage.GetItemAsync<string>("tenant_name");

        MySqlConnection conn = new MySqlConnection(Application_Settings.connectionString);

        try
        {
            await conn.OpenAsync();

            MySqlCommand command = new MySqlCommand("SELECT * FROM tenants;", conn);
            using (DbDataReader reader = await command.ExecuteReaderAsync())
            {
                if (reader.HasRows)
                {
                    while (await reader.ReadAsync())
                    {
                        if (permissions_tenants_list.Contains(reader["name"].ToString()))
                        {
                            Tenants_Entity entity = new Tenants_Entity
                                {
                                    tenant_name = reader["name"].ToString() ?? String.Empty,
                                    date = reader["date"].ToString() ?? "",
                                    author = reader["author"].ToString() ?? String.Empty,
                                    description = reader["description"].ToString() ?? String.Empty,
                                    company = reader["company"].ToString() ?? String.Empty,
                                };

                            tenants_mysql_data.Add(entity);
                        }
                    }
                }
            }

        }
        catch (Exception ex)
        {
            Logging.Handler.Error("/manage_jobs -> Get_Tenants_Overview", "result", ex.Message);
        }
        finally
        {
            conn.Close();
        }
    }

    private async Task UpdateSelectedTenant(string tenant_name)
    {
        await localStorage.SetItemAsync("tenant_name", tenant_name);

        NavigationManager.NavigateTo("/tenant_settings");
    }
    
    private async Task Show_Add_Tenant_Dialog()
    {
        var options = new DialogOptions
            {
                
                MaxWidth = MaxWidth.Small,
                BackgroundClass = "dialog-blurring",

            };

        var result = await DialogService.Show<Add_Tenant_Dialog>(string.Empty, new DialogParameters(), options).Result;
        
        if (result.Canceled)
            return;

        Logging.Handler.Debug("/manage_jobs -> Add_Job_Dialog", "Result", result.Data.ToString() ?? String.Empty);

        if (String.IsNullOrEmpty(result.Data.ToString()) == false && result.Data.ToString() != "error")
        {
            await Get_Tenants_Overview();
        }
    }

    #region Export_Data

    private async Task Show_Export_Table_Dialog()
    {
        var options = new DialogOptions
            {
                
                MaxWidth = MaxWidth.Small,
                BackgroundClass = "dialog-blurring",

            };

        var result = await this.DialogService.Show<Settings.System_Logs.Export_Table_Dialog>(string.Empty, new DialogParameters(), options).Result;

        if (result != null && result.Data != null)
        {
            if (result.Data.ToString() == "JSON")
                await Export_Data_Json();
            else if (result.Data.ToString() == "Spreadsheet (.xlsx)")
                await Export_Data_Spreadsheet();
            else if (result.Data.ToString() == "XML")
                await Export_Data_XML();
            else if (result.Data.ToString() == "HTML")
                await Export_Data_HTML();
        }
    }

    private async Task Export_Data_Json()
    {
        try
        {
            // Erstellen eines JSON-Strings aus den MudTable-Einträgen
            string jsonContent = JsonSerializer.Serialize(tenants_mysql_data, new JsonSerializerOptions { WriteIndented = true });

            // Aufruf der JavaScript-Funktion für den Export als .txt
            await JSRuntime.InvokeVoidAsync("exportToTxt", "tenants.json", jsonContent);
        }
        catch (Exception ex)
        {
            Logging.Handler.Error("Tenant_Management.Manage_Tenants", "Export_Data_Json", ex.Message);
        }
    }

    public async Task Export_Data_XML()
    {
        try
        {
            if (tenants_mysql_data == null || tenants_mysql_data.Count == 0)
            {
                // Keine Daten zum Exportieren
                return;
            }

            var serializer = new XmlSerializer(typeof(List<Tenants_Entity>));

            using (var memoryStream = new MemoryStream())
            {
                // Konvertiere die Daten in das XML-Format
                serializer.Serialize(memoryStream, tenants_mysql_data);

                // Setze die Position des MemoryStream auf den Anfang
                memoryStream.Position = 0;

                // Lese den Inhalt des MemoryStream in einen String
                using (var streamReader = new StreamReader(memoryStream))
                {
                    string xmlContent = await streamReader.ReadToEndAsync();

                    // Hier wird JavaScript-Interop verwendet, um den XML-Inhalt herunterzuladen
                    await JSRuntime.InvokeVoidAsync("exportToTxt", "tenants.xml", xmlContent, "text/xml");
                }
            }
        }
        catch (Exception ex)
        {
            Logging.Handler.Error("Tenant_Management.Manage_Tenants", "Export_Data_XML", ex.Message);
        }
    }

    public async Task Export_Data_HTML()
    {
        try
        {
            if (tenants_mysql_data == null || tenants_mysql_data.Count == 0)
            {
                // Keine Daten zum Exportieren
                return;
            }

            StringBuilder htmlBuilder = new StringBuilder();
            htmlBuilder.Append("<table border='1'>");
            htmlBuilder.Append("<tr>");
            htmlBuilder.Append("<th>Name</th>");
            htmlBuilder.Append("<th>Unternehmen</th>");
            htmlBuilder.Append("<th>Erstellt</th>");
            htmlBuilder.Append("<th>Author</th>");
            htmlBuilder.Append("<th>Beschreibung</th>");
            htmlBuilder.Append("</tr>");

            foreach (var entry in tenants_mysql_data)
            {
                htmlBuilder.Append("<tr>");
                htmlBuilder.Append($"<td>{entry.tenant_name}</td>");
                htmlBuilder.Append($"<td>{entry.company}</td>");
                htmlBuilder.Append($"<td>{entry.date}</td>");
                htmlBuilder.Append($"<td>{entry.author}</td>");
                htmlBuilder.Append($"<td>{entry.description}</td>");
                htmlBuilder.Append("</tr>");
            }

            htmlBuilder.Append("</table>");

            string htmlContent = htmlBuilder.ToString();

            // Hier wird JavaScript-Interop verwendet, um den HTML-Inhalt herunterzuladen
            await JSRuntime.InvokeVoidAsync("exportToTxt", "tenants.html", htmlContent, "text/html");
        }
        catch (Exception ex)
        {
            Logging.Handler.Error("Tenant_Management.Manage_Tenants", "Export_Data_HTML", ex.Message);
        }
    }

    private async Task Export_Data_Spreadsheet()
    {
        try
        {
            using (var package = new ExcelPackage())
            {
                var worksheet = package.Workbook.Worksheets.Add("Sheet1");

                int headerRow = 1;
                worksheet.Cells[headerRow, 1].Value = "Name";
                worksheet.Cells[headerRow, 2].Value = "Unternehmen";
                worksheet.Cells[headerRow, 3].Value = "Erstellt";
                worksheet.Cells[headerRow, 4].Value = "Author";
                worksheet.Cells[headerRow, 5].Value = "Beschreibung";

                int dataRow = headerRow + 1;
                foreach (var entry in tenants_mysql_data)
                {
                    worksheet.Cells[dataRow, 1].Value = entry.tenant_name;
                    worksheet.Cells[dataRow, 2].Value = entry.company;
                    worksheet.Cells[dataRow, 3].Value = entry.date;
                    worksheet.Cells[dataRow, 4].Value = entry.author;
                    worksheet.Cells[dataRow, 5].Value = entry.description;

                    dataRow++;
                }

                var stream = new MemoryStream(package.GetAsByteArray());

                // Hier wird JavaScript-Interop verwendet, um die Datei herunterzuladen
                await JSRuntime.InvokeVoidAsync("saveAsSpreadSheet", "tenants.xlsx", Convert.ToBase64String(stream.ToArray()));
            }
        }
        catch (Exception ex)
        {
            Logging.Handler.Error("Tenant_Management.Manage_Tenants", "Export_Data_Spreadsheet", ex.Message);
        }
    }

    #endregion
}
