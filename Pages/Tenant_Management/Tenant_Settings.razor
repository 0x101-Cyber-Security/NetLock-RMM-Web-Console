@page "/tenant_settings"

@using MySqlConnector
@using System.Data.Common
@using Microsoft.AspNetCore.Components.Server.ProtectedBrowserStorage
@using Microsoft.AspNetCore.DataProtection
@using System.Text.Json

@inject NavigationManager NavigationManager
@inject ILocalStorageService localStorage
@inject IDialogService DialogService
@inject ISnackbar Snackbar
@inject IDataProtectionProvider DataProtectionProvider
@inject IJSRuntime JSRuntime

<AuthorizeView>
    <NotAuthorized>
        @{
            NavigationManager.NavigateTo("/");
        }
    </NotAuthorized>

    <Authorized>
        
        @{
            if (permissions_tenants_enabled && permissions_tenants_manage)
            {
                <MudText Class="pa-0 ma-0 mt-5" Typo="Typo.h4">Mandant verwalten (@name)</MudText>

                <MudButton Class="mt-5" Size="Size.Small" Variant="Variant.Filled" Color="Color.Default" StartIcon="@Icons.Material.Filled.ArrowBack" Href="/manage_tenants">Zurück</MudButton>

                if (permissions_tenants_edit)
                {
                    <MudButton Class="ml-2 mt-5" Size="Size.Small" Variant="Variant.Filled" OnClick="@Edit_Form" Color="Color.Default" StartIcon="@Icons.Material.Filled.Edit">Bearbeiten</MudButton>
                    <MudButton Class="ml-2 mt-5" Size="Size.Small" Variant="Variant.Filled" OnClick="@Save_Settings" Color="Color.Success" StartIcon="@Icons.Material.Filled.Save">Speichern</MudButton>
                }

                if (permissions_tenants_delete)
                {
                    <MudButton Class="ml-2 mt-5" Size="Size.Small" Variant="Variant.Filled" OnClick="@Show_Delete_Tenant_Dialog" Color="Color.Error" StartIcon="@Icons.Material.Filled.Delete">Löschen</MudButton>
                }
                
                <MudPaper Class="pa-0 ma- mt-5">

                    <MudText Class="pa-2" Typo="Typo.h5" Align="Align.Left">Allgemeine Informationen</MudText>

                    <MudTextField Class="pa-2" Label="Name" Variant="Variant.Filled" T="string" @bind-Value="@name" Disabled="@input_disabled" Immediate="@true" />
                    <MudTextField Class="pa-2" Label="Firma" Variant="Variant.Filled" T="string" @bind-Value="@company" Disabled="@input_disabled" Immediate="@true" />
                    <MudTextField Class="pa-2" Label="Beschreibung" Variant="Variant.Filled" T="string" @bind-Value="@description" Disabled="@input_disabled" Immediate="@true" />
                    <MudText Class="pa-2 ma-0 mt-5" Typo="Typo.h6">Ansprechpartner</MudText>
                    <MudTextField Class="pa-2" Label="Ansprechpartner 1" Variant="Variant.Filled" T="string" @bind-Value="@contact_person_one" Disabled="@input_disabled" Immediate="@true" />
                    <MudTextField Class="pa-2" Label="Ansprechpartner 2" Variant="Variant.Filled" T="string" @bind-Value="@contact_person_two" Disabled="@input_disabled" Immediate="@true" />
                    <MudTextField Class="pa-2" Label="Ansprechpartner 3" Variant="Variant.Filled" T="string" @bind-Value="@contact_person_three" Disabled="@input_disabled" Immediate="@true" />
                    <MudTextField Class="pa-2" Label="Ansprechpartner 4" Variant="Variant.Filled" T="string" @bind-Value="@contact_person_four" Disabled="@input_disabled" Immediate="@true" />
                    <MudTextField Class="pa-2" Label="Ansprechpartner 5" Variant="Variant.Filled" T="string" @bind-Value="@contact_person_five" Disabled="@input_disabled" Immediate="@true" />

                </MudPaper>

                if (permissions_tenants_locations_add)
                {
                    <MudButton Class="mt-5" Size="Size.Small" Variant="Variant.Filled" OnClick="@Show_Add_Location_Dialog" Color="Color.Default" StartIcon="@Icons.Material.Filled.GroupAdd">Standort hinzufügen</MudButton>
                }
                
                <MudPaper Class="pa-0 mt-5">

                    <MudText Class="pa-2" Typo="Typo.h5" Align="Align.Left">Standorte</MudText>

                    <MudTable Height="20vh" FixedHeader="true" FixedFooter="true" Hover="true" RowsPerPage="25" Dense="true" Items="@locations_mysql_data" Filter="new Func<Locations_Entity, bool>(Tenants_Notifications_Table_Filter_Func)">
                        <ToolBarContent>
                            <MudTextField @bind-Value="tenants_table_search_string" Placeholder="Suche" Adornment="Adornment.Start" AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Medium" Class="mt-0"></MudTextField>
                        </ToolBarContent>
                        <HeaderContent>
                            <MudTh Sortable="true" @onclick="() => tenants_table_sorted_column = (nameof(Locations_Entity.location_name))" style="white-space: nowrap;">Name</MudTh>
                            <MudTh Sortable="true" @onclick="() => tenants_table_sorted_column = (nameof(Locations_Entity.date))" style="white-space: nowrap;">Erstellt</MudTh>
                            <MudTh Sortable="true" @onclick="() => tenants_table_sorted_column = (nameof(Locations_Entity.author))" style="white-space: nowrap;">Author</MudTh>
                            <MudTh Sortable="true" @onclick="() => tenants_table_sorted_column = (nameof(Locations_Entity.description))" style="white-space: nowrap;">Beschreibung</MudTh>
                            <MudTh></MudTh>
                        </HeaderContent>
                        <RowTemplate Context="locations_row">

                            <MudTd DataLabel="Name" @onclick="() => Tenants_Notifications_RowClickHandler(locations_row)" class="@Tenants_Notifications_GetRowClass(locations_row)" style="white-space: nowrap;">
                                <span style="display: flex; align-items: center;">
                                    <MudIcon Icon="@Icons.Material.Filled.LocationCity" Size="Size.Small" />&nbsp;@locations_row.location_name
                                </span>
                            </MudTd>

                            <MudTd DataLabel="Erstellt" @onclick="() => Tenants_Notifications_RowClickHandler(locations_row)" class="@Tenants_Notifications_GetRowClass(locations_row)" style="white-space: nowrap;">
                                <span style="display: flex; align-items: center;">
                                    <MudIcon Icon="@Icons.Material.Filled.DateRange" Size="Size.Small" />&nbsp;@locations_row.date
                                </span>
                            </MudTd>

                            <MudTd DataLabel="Author" @onclick="() => Tenants_Notifications_RowClickHandler(locations_row)" class="@Tenants_Notifications_GetRowClass(locations_row)" style="white-space: nowrap;">
                                <span style="display: flex; align-items: center;">
                                    <MudIcon Icon="@Icons.Material.Filled.SupportAgent" Size="Size.Small" />&nbsp;@locations_row.author
                                </span>
                            </MudTd>

                            <MudTd DataLabel="Beschreibung" @onclick="() => Tenants_Notifications_RowClickHandler(locations_row)" class="@Tenants_Notifications_GetRowClass(locations_row)" style="white-space: nowrap;">
                                <span style="display: flex; align-items: center;">
                                    <MudIcon Icon="@Icons.Material.Filled.Description" Size="Size.Small" />&nbsp;@locations_row.description
                                </span>
                            </MudTd>

                            @{
                                if (permissions_tenants_locations_manage)
                                {
                                    <MudTd DataLabel="Author" @onclick="() => Tenants_Notifications_RowClickHandler(locations_row)" class="@Tenants_Notifications_GetRowClass(locations_row)" style="white-space: nowrap;">
                                        <span style="display: flex; align-items: center;">
                                            <MudButton Size="Size.Small" Variant="@Variant.Filled" Color="@Color.Default" StartIcon="@Icons.Material.Filled.Settings" @onclick="@(() => Update_Selected_Location(locations_row.location_name))">Verwalten</MudButton>
                                        </span>
                                    </MudTd>
                                }
                            }

                        </RowTemplate>
                        <PagerContent>
                            <MudTablePager PageSizeOptions="new int[] { 10, 25, 50, 100, 250, 500, int.MaxValue }" RowsPerPageString="Connectoren pro Seite" />
                        </PagerContent>
                    </MudTable>

                </MudPaper>
            }
        }

    </Authorized>
</AuthorizeView>

<style>
    .dialog-blurring {
        backdrop-filter: blur(10px);
    }   
</style>


@code {

    #region Permissions System

    private string permissions_json = String.Empty;
    private string permissions_tenants_json = String.Empty;
    public static List<string> permissions_tenants_list = new List<string> { };

    private bool permissions_tenants_enabled = false;
    private bool permissions_tenants_manage = false;
    private bool permissions_tenants_edit = false;
    private bool permissions_tenants_delete = false;
    private bool permissions_tenants_locations_add = false;
    private bool permissions_tenants_locations_manage = false;

    public class Permissions_Tenants_Activation_State
    {
        public string name { get; set; } = String.Empty;
    }

    private async Task Get_Permissions()
    {
        //Extract user info from users session storage
        var sessionStorage = new ProtectedSessionStorage(JSRuntime, DataProtectionProvider);
        var username = await sessionStorage.GetAsync<string>("username");
        var password = await sessionStorage.GetAsync<string>("password");

        Logging.Handler.Debug("/tenant_settings -> Permissions_Load", "username", username.Value ?? String.Empty);

        //if user info empty, force logout
        if (String.IsNullOrEmpty(username.Value) || String.IsNullOrEmpty(password.Value))
        {
            Logging.Handler.Debug("/tenant_settings -> Permissions_Load", "sessions storage data", "empty, force logout");

            NavigationManager.NavigateTo("/logout", true);
            return;
        }

        //Check if user info is valid, if not, force logout
        if (!await Classes.Authentication.User.Verify_User(username.Value ?? String.Empty, password.Value ?? String.Empty))
        {
            Logging.Handler.Debug("/tenant_settings -> Permissions_Load", "verify user", "incorrect data, force logout");

            NavigationManager.NavigateTo("/logout", true);
            return;
        }

        //Get permissions
        string query = "SELECT * FROM `accounts` WHERE username = @username;";

        MySqlConnection conn = new MySqlConnection(Application_Settings.connectionString);

        try
        {
            await conn.OpenAsync();

            MySqlCommand command = new MySqlCommand(query, conn);
            command.Parameters.AddWithValue("@username", username.Value);

            Logging.Handler.Debug("/tenant_settings -> Permissions_Load", "query", query);

            using (DbDataReader reader = await command.ExecuteReaderAsync())
            {
                if (reader.HasRows)
                {
                    while (await reader.ReadAsync())
                    {
                        permissions_json = reader["permissions"].ToString() ?? String.Empty;
                        permissions_tenants_json = reader["tenants"].ToString() ?? String.Empty;
                    }
                }
            }

            Logging.Handler.Debug("/tenant_settings -> Permissions_Load", "permissions_json", permissions_json);

            //Extract permissions
            if (!String.IsNullOrEmpty(permissions_json))
            {
                using (JsonDocument document = JsonDocument.Parse(permissions_json))
                {
                    //tenants_enabled
                    try
                    {
                        JsonElement element = document.RootElement.GetProperty("tenants_enabled");
                        permissions_tenants_enabled = element.GetBoolean();
                    }
                    catch (Exception ex)
                    {
                        Logging.Handler.Error("/tenant_settings -> Permissions_Load", "permissions_json (permissions_tenants_enabled)", ex.Message);
                    }

                    //tenants_manage
                    try
                    {
                        JsonElement element = document.RootElement.GetProperty("tenants_manage");
                        permissions_tenants_manage = element.GetBoolean();
                    }
                    catch (Exception ex)
                    {
                        Logging.Handler.Error("/tenant_settings -> Permissions_Load", "permissions_json (permissions_tenants_manage)", ex.Message);
                    }

                    //tenants_edit
                    try
                    {
                        JsonElement element = document.RootElement.GetProperty("tenants_edit");
                        permissions_tenants_edit = element.GetBoolean();
                    }
                    catch (Exception ex)
                    {
                        Logging.Handler.Error("/tenant_settings -> Permissions_Load", "permissions_json (permissions_tenants_edit)", ex.Message);
                    }

                    //tenants_delete
                    try
                    {
                        JsonElement element = document.RootElement.GetProperty("tenants_delete");
                        permissions_tenants_delete = element.GetBoolean();
                    }
                    catch (Exception ex)
                    {
                        Logging.Handler.Error("/tenant_settings -> Permissions_Load", "permissions_json (permissions_tenants_delete)", ex.Message);
                    }

                    //tenants_locations_add
                    try
                    {
                        JsonElement element = document.RootElement.GetProperty("tenants_locations_add");
                        permissions_tenants_locations_add = element.GetBoolean();
                    }
                    catch (Exception ex)
                    {
                        Logging.Handler.Error("/tenant_settings -> Permissions_Load", "permissions_json (permissions_tenants_locations_add)", ex.Message);
                    }

                    //tenants_locations_manage
                    try
                    {
                        JsonElement element = document.RootElement.GetProperty("tenants_locations_manage");
                        permissions_tenants_locations_manage = element.GetBoolean();
                    }
                    catch (Exception ex)
                    {
                        Logging.Handler.Error("/tenant_settings -> Permissions_Load", "permissions_json (permissions_tenants_locations_manage)", ex.Message);
                    }
                }
            }
            else if (permissions_json == "[]")
            {
                Logging.Handler.Debug("/tenant_settings -> Permissions_Load", "permissions_json", "Empty, logout user");
                NavigationManager.NavigateTo("/logout", true);
            }
            else
            {
                Logging.Handler.Debug("/tenant_settings -> Permissions_Load", "permissions_json", "Empty, logout user");
                NavigationManager.NavigateTo("/logout", true);
            }

            //Extract tenants from json
            permissions_tenants_list.Clear();
            if (!String.IsNullOrEmpty(permissions_tenants_json))
            {
                //Set the activation state for the tenants
                try
                {
                    List<Permissions_Tenants_Activation_State> tenants_activation_state_list = JsonSerializer.Deserialize<List<Permissions_Tenants_Activation_State>>(permissions_tenants_json);

                    foreach (var tenant in tenants_activation_state_list)
                    {
                        Logging.Handler.Debug("/tenant_settings -> Permissions_Load", "foreach tenant", tenant.name);

                        permissions_tenants_list.Add(tenant.name);
                    }
                }
                catch (Exception ex)
                {
                    Logging.Handler.Error("/tenant_settings -> Permissions_Load (permissions_tenants_json deserialize)", "Result", ex.Message);
                }
            }
            else
            {
                Logging.Handler.Debug("/tenant_settings -> Permissions_Load (permissions_tenants_json deserialize)", "Result", "Empty");
            }
        }
        catch (Exception ex)
        {
            Logging.Handler.Error("/tenant_settings -> Permissions_Load", "general_error (force logout)", ex.Message);
            NavigationManager.NavigateTo("/logout", true);
        }
        finally
        {
            conn.Close();
        }
    }

    #endregion

    protected override async void OnInitialized()
    {
        old_tenant_name = await localStorage.GetItemAsync<string>("tenant_name");

        await Get_Permissions();
        //Check permissions
        if (!permissions_tenants_enabled || !permissions_tenants_manage || !permissions_tenants_list.Contains(old_tenant_name))
            NavigationManager.NavigateTo("/logout", true);

        await Get_Tenant_Settings();
        await Get_Locations_Overview();

        StateHasChanged();
    }

    private bool input_disabled = true;
    private string old_tenant_name = String.Empty;

    private string name = String.Empty;
    private string date = String.Empty;
    private string author = String.Empty;
    private string description = String.Empty;
    private string company = String.Empty;
    private string contact_person_one = String.Empty;
    private string contact_person_two = String.Empty;
    private string contact_person_three = String.Empty;
    private string contact_person_four = String.Empty;
    private string contact_person_five = String.Empty;

    public class Locations_Entity
    {
        public string location_name { get; set; } = "Empty";
        public string date { get; set; } = "Empty";
        public string author { get; set; } = "Empty";
        public string description { get; set; } = "Empty";
    }

    public List<Locations_Entity> locations_mysql_data;

    private string tenants_table_view_port = "70vh";
    private string tenants_table_sorted_column;
    private string tenants_table_search_string = "";

    private bool Tenants_Notifications_Table_Filter_Func(Locations_Entity row)
    {
        if (string.IsNullOrEmpty(tenants_table_search_string))
            return true;

        //Search logic for each column
        return row.location_name.Contains(tenants_table_search_string, StringComparison.OrdinalIgnoreCase) ||
               row.date.Contains(tenants_table_search_string, StringComparison.OrdinalIgnoreCase) ||
               row.author.Contains(tenants_table_search_string, StringComparison.OrdinalIgnoreCase) ||
               row.description.Contains(tenants_table_search_string, StringComparison.OrdinalIgnoreCase);
    }

    private string telegram_notifications_selectedRowContent = ""; // Hier wird der Inhalt der ausgewählten Zeile gespeichert

    // Der Handler für den TableRowClick-Event
    private void Tenants_Notifications_RowClickHandler(Locations_Entity row)
    {
        telegram_notifications_selectedRowContent = row.location_name;
    }

    private string Tenants_Notifications_GetRowClass(Locations_Entity row)
    {
        return row.location_name == telegram_notifications_selectedRowContent ? "selected-row" : "";
    }

    private async Task Show_Delete_Tenant_Dialog()
    {
        var options = new DialogOptions
            {
                DisableBackdropClick = false,
                MaxWidth = MaxWidth.Small,
                ClassBackground = "dialog-blurring",

            };

        await DialogService.Show<Delete_Tenant_Dialog>(string.Empty, new DialogParameters(), options).Result;
    }

    private async Task Show_Add_Location_Dialog()
    {
        var options = new DialogOptions
            {
                DisableBackdropClick = false,
                MaxWidth = MaxWidth.Small,
                ClassBackground = "dialog-blurring",

            };

        var result = await DialogService.Show<Location_Management.Add_Location_Dialog>(string.Empty, new DialogParameters(), options).Result;
        
        if (result.Canceled)
            return;

        Logging.Handler.Debug("/tenant_settings -> Show_Add_Location_Dialog", "Result", result.Data.ToString() ?? String.Empty);

        if (String.IsNullOrEmpty(result.Data.ToString()) == false && result.Data.ToString() != "error")
        {
            await Get_Locations_Overview();
        }
    }

    private async Task Show_Delete_Location_Dialog(string location_name)
    {
        await localStorage.SetItemAsync("location_name", await Base64.Handler.Encode(location_name));

        var options = new DialogOptions
            {
                DisableBackdropClick = false,
                MaxWidth = MaxWidth.Small,
                ClassBackground = "dialog-blurring",

            };

        var result = await DialogService.Show<Location_Management.Delete_Location_Dialog>(string.Empty, new DialogParameters(), options).Result;
   
        if (result.Canceled)
            return;

        Logging.Handler.Debug("/tenant_settings -> Show_Delete_Location_Dialog", "Result", result.Data.ToString() ?? String.Empty);
    }

    private async Task Edit_Form()
    {
        if (input_disabled)
            input_disabled = false;
        else
            input_disabled = true;
    }

    private async Task Get_Tenant_Settings()
    {
        string query = "SELECT * FROM tenants WHERE name = @tenant_name;";

        MySqlConnection conn = new MySqlConnection(Application_Settings.connectionString);

        try
        {
            await conn.OpenAsync();

            MySqlCommand command = new MySqlCommand(query, conn);
            command = new MySqlCommand(query, conn);
            command.Parameters.AddWithValue("@tenant_name", old_tenant_name);

            using (DbDataReader reader = await command.ExecuteReaderAsync())
            {
                if (reader.HasRows)
                {
                    while (await reader.ReadAsync())
                    {
                        name = reader["name"].ToString() ?? String.Empty;
                        date = reader["date"].ToString() ?? String.Empty;
                        author = reader["author"].ToString() ?? String.Empty;
                        description = reader["description"].ToString() ?? String.Empty;
                        company = reader["company"].ToString() ?? String.Empty;
                        contact_person_one = reader["contact_person_one"].ToString() ?? String.Empty;
                        contact_person_two = reader["contact_person_two"].ToString() ?? String.Empty;
                        contact_person_three = reader["contact_person_three"].ToString() ?? String.Empty;
                        contact_person_four = reader["contact_person_four"].ToString() ?? String.Empty;
                        contact_person_five = reader["contact_person_five"].ToString() ?? String.Empty;
                    }
                }
            }
        }
        catch (Exception ex)
        {
            Logging.Handler.Error("class", "Get_Tenant_Settings", ex.Message);
        }
        finally
        {
            conn.Close();
        }
    }

    private async Task Get_Locations_Overview()
    {
        locations_mysql_data = new List<Locations_Entity>();

        MySqlConnection conn = new MySqlConnection(Application_Settings.connectionString);

        try
        {
            await conn.OpenAsync();

            MySqlCommand command = new MySqlCommand("SELECT * FROM `locations` WHERE tenant_name = '" + old_tenant_name + "';", conn);
            using (DbDataReader reader = await command.ExecuteReaderAsync())
            {
                if (reader.HasRows)
                {
                    while (await reader.ReadAsync())
                    {
                        Locations_Entity entity = new Locations_Entity
                            {
                                location_name = reader["name"].ToString() ?? String.Empty,
                                date = reader["date"].ToString() ?? "",
                                author = reader["author"].ToString() ?? String.Empty,
                                description = reader["description"].ToString() ?? String.Empty,
                            };

                        locations_mysql_data.Add(entity);
                    }
                }
            }

        }
        catch (Exception ex)
        {
            Logging.Handler.Error("class", "Get_Locations_Overview", ex.Message);
        }
        finally
        {
            conn.Close();
        }
    }

    private async Task Save_Settings()
    {
        Snackbar.Configuration.ShowCloseIcon = true;
        Snackbar.Configuration.PositionClass = Defaults.Classes.Position.BottomRight;

        bool success = false;

        MySqlConnection conn = new MySqlConnection(Application_Settings.connectionString);

        try
        {
            await conn.OpenAsync();

            string execute_query = @"UPDATE tenants SET name = @tenant_name, description = @description, company = @company_name, contact_person_one = @contact_person_one, contact_person_two = @contact_person_two, contact_person_three = @contact_person_three, contact_person_four = @contact_person_four, contact_person_five = @contact_person_five WHERE name = @old_tenant_name; 
                UPDATE locations SET tenant_name = @tenant_name WHERE tenant_name = @old_tenant_name;
                UPDATE `groups` SET tenant_name = @tenant_name WHERE tenant_name = @old_tenant_name;
                UPDATE devices SET tenant_name = @tenant_name WHERE tenant_name = @old_tenant_name;";

            MySqlCommand cmd = new MySqlCommand(execute_query, conn);
            cmd.Parameters.AddWithValue("@tenant_name", name);
            cmd.Parameters.AddWithValue("@old_tenant_name", old_tenant_name);
            cmd.Parameters.AddWithValue("@date", DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss"));
            cmd.Parameters.AddWithValue("@author", await localStorage.GetItemAsync<string>("username"));
            cmd.Parameters.AddWithValue("@description", description);
            cmd.Parameters.AddWithValue("@company_name", company);
            cmd.Parameters.AddWithValue("@contact_person_one", contact_person_one);
            cmd.Parameters.AddWithValue("@contact_person_two", contact_person_two);
            cmd.Parameters.AddWithValue("@contact_person_three", contact_person_three);
            cmd.Parameters.AddWithValue("@contact_person_four", contact_person_four);
            cmd.Parameters.AddWithValue("@contact_person_five", contact_person_five);

            cmd.ExecuteNonQuery();

            success = true;
        }
        catch (Exception ex)
        {
            Logging.Handler.Error("Add_Policy_Dialog", "Result", ex.Message);
        }
        finally
        {
            await conn.CloseAsync();
        }

        if (success)
        {
            await localStorage.SetItemAsync("tenant_name", name);
            
            Snackbar.Add("Gespeichert.", Severity.Success);
            input_disabled = true;

            Thread.Sleep(1000);
            NavigationManager.Refresh();
        }
        else
            Snackbar.Add("Speichern fehlgeschlagen.", Severity.Error);
    }

    private async Task Update_Selected_Location(string location_name)
    {
        await localStorage.SetItemAsync("location_name", location_name);

        NavigationManager.NavigateTo("/location_settings");
    }
}
