@using MySqlConnector;
@using System.Data.Common;

@inject NavigationManager NavigationManager
@inject ILocalStorageService localStorage
@inject IDialogService DialogService
@inject ISnackbar Snackbar

<AuthorizeView>
    <NotAuthorized>
        @{
            NavigationManager.NavigateTo("/");
        }
    </NotAuthorized>

    <Authorized>

        <MudDialog Style="width: 800px">
            <TitleContent>
                <MudText Typo="Typo.h6">Neuer Standort</MudText>
            </TitleContent>
            <DialogContent>

                <MudTextField Label="Name" T="string" @bind-Value="@location_name" Immediate="@true" />
                <MudTextField Label="Beschreibung" T="string" @bind-Value="@description" Immediate="@true" />
            </DialogContent>

            <DialogActions>
                <MudButton Size="Size.Small" OnClick="Cancel">Abbrechen</MudButton>
                <MudButton Size="Size.Small" Disabled="@Form_Valid()" OnClick="@OK" Variant="@Variant.Filled" Color="@Color.Success">Bestätigen</MudButton>
            </DialogActions>
        </MudDialog>

    </Authorized>
</AuthorizeView>

@code {

    private string location_name = string.Empty;
    private string description = string.Empty;

    [CascadingParameter]
    private MudDialogInstance MudDialog { get; set; } = default!;

    private bool Form_Valid()
    {
        if (String.IsNullOrEmpty(location_name))
            return true;
        else
            return false;
    }

    private async Task OK()
    {
        if (!String.IsNullOrEmpty(location_name))
        {
            string tenant_name = await localStorage.GetItemAsync<string>("tenant_name");

            bool already_existing = false;
            
            string query = "SELECT * FROM `locations` WHERE name = @location_name AND tenant_name = @tenant_name;";

            MySqlConnection conn = new MySqlConnection(Application_Settings.connectionString);

            try
            {
                await conn.OpenAsync();

                MySqlCommand command = new MySqlCommand(query, conn);

                command = new MySqlCommand(query, conn);
                command.Parameters.AddWithValue("@tenant_name", tenant_name);
                command.Parameters.AddWithValue("@location_name", location_name);

                using (DbDataReader reader = await command.ExecuteReaderAsync())
                {
                    if (reader.HasRows)
                    {
                        Logging.Handler.Debug("Policy_Management.Add_Location_Dialog", "HasRows", reader.HasRows.ToString());

                        already_existing = true;
                    }
                    else
                        Logging.Handler.Debug("Policy_Management.Add_Location_Dialog", "HasRows", reader.HasRows.ToString());
                }
            }
            catch (Exception ex)
            {
                Logging.Handler.Error("Add_Location_Dialog.OK", "", ex.Message);
            }

            //Add if not existing
            if (already_existing == false)
            {
                bool success = false;

                try
                {
                    string execute_query = "INSERT INTO `locations` (`tenant_name`, `name`, `date`, `author`, `description`) VALUES (@tenant_name, @location_name, @date, @author, @description);";

                    MySqlCommand cmd = new MySqlCommand(execute_query, conn);

                    cmd.Parameters.AddWithValue("@tenant_name", tenant_name);
                    cmd.Parameters.AddWithValue("@location_name", location_name);
                    cmd.Parameters.AddWithValue("@date", DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss"));
                    cmd.Parameters.AddWithValue("@author", await localStorage.GetItemAsync<string>("username"));
                    cmd.Parameters.AddWithValue("@description", description);
                    
                    cmd.ExecuteNonQuery();

                    success = true;
                }
                catch (Exception ex)
                {
                    Logging.Handler.Error("/location_settings -> Add_Policy_Dialog.OK", "Result", ex.Message);
                }
                finally
                {
                    await conn.CloseAsync();
                }

                if (success)
                {
                    this.Snackbar.Configuration.ShowCloseIcon = true;
                    this.Snackbar.Configuration.PositionClass = Defaults.Classes.Position.BottomRight;
                    this.Snackbar.Add("Erfolgreich hinzugefügt.", Severity.Success);

                    Thread.Sleep(1000);
                    NavigationManager.Refresh();
                }
                else
                {
                    this.Snackbar.Configuration.ShowCloseIcon = true;
                    this.Snackbar.Configuration.PositionClass = Defaults.Classes.Position.BottomRight;
                    this.Snackbar.Add("Hinzufügen fehlgeschlagen.", Severity.Error);
                    this.MudDialog.Close(DialogResult.Ok("error"));
                }
            }
            else //Already existing
            {
                Snackbar.Configuration.ShowCloseIcon = true;
                Snackbar.Configuration.PositionClass = Defaults.Classes.Position.BottomRight;
                Snackbar.Add("Name bereits vergeben.", Severity.Warning);
                this.MudDialog.Close(DialogResult.Ok("existing"));
            }
        }
    }

    private void Cancel() => MudDialog.Cancel();
}
