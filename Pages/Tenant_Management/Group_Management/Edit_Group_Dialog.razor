@using MySqlConnector;
@using System.Data.Common;
@inject NavigationManager NavigationManager
@inject ILocalStorageService localStorage
@inject IDialogService DialogService
@inject ISnackbar Snackbar

<AuthorizeView>
    <NotAuthorized>
        @{
            NavigationManager.NavigateTo("/");
        }
    </NotAuthorized>

    <Authorized>

        <MudDialog Style="width: 800px">
            <TitleContent>
                <MudText Ty po="Typo.h6">Gruppe bearbeiten</MudText>
            </TitleContent>
            <DialogContent>
                <MudTextField Label="Name" T="string" @bind-Value="@this.group_name" Immediate="@true" />
                <MudTextField Label="Beschreibung" T="string" @bind-Value="@this.description" Immediate="@true" />

            </DialogContent>

            <DialogActions>
                <MudButton Size="Size.Small" OnClick="Cancel">Abbrechen</MudButton>
                <MudButton Size="Size.Small" OnClick="@this.OK" Variant="@Variant.Filled" Color="@Color.Success">Speichern</MudButton>
            </DialogActions>
        </MudDialog>

    </Authorized>
</AuthorizeView>

@code {

    private string group_name = string.Empty;
    private string description = string.Empty;

    [CascadingParameter]
    private MudDialogInstance MudDialog { get; set; } = default!;

    protected override async void OnInitialized()
    {
        await Get_Group();
        StateHasChanged();
    }

    private async Task Get_Group()
    {
        string tenant_name = await localStorage.GetItemAsync<string>("tenant_name");
        string location_name = await localStorage.GetItemAsync<string>("location_name");
        string old_group_name = await localStorage.GetItemAsync<string>("group_name");

        string query = "SELECT * FROM `groups` WHERE name = @old_group_name AND location_name = @location_name AND tenant_name = @tenant_name;";

        MySqlConnection conn = new MySqlConnection(Application_Settings.connectionString);

        try
        {
            await conn.OpenAsync();

            MySqlCommand command = new MySqlCommand(query, conn);
            command = new MySqlCommand(query, conn);
            command.Parameters.AddWithValue("@tenant_name", tenant_name);
            command.Parameters.AddWithValue("@location_name", location_name);
            command.Parameters.AddWithValue("@old_group_name", old_group_name);

            using (DbDataReader reader = await command.ExecuteReaderAsync())
            {
                if (reader.HasRows)
                {
                    while (reader.Read())
                    {
                        group_name = reader["name"].ToString() ?? String.Empty;
                        description = reader["description"].ToString() ?? String.Empty;
                    }
                }
                reader.Close();
            }
        }
        catch (Exception ex)
        {
            Logging.Handler.Error("Edit_Group_Dialog", "Get_Group", ex.Message);
        }
        finally
        {
            conn.Close();
        }
    }

    private async Task OK()
    {
        string tenant_name = await localStorage.GetItemAsync<string>("tenant_name");
        string location_name = await localStorage.GetItemAsync<string>("location_name");
        string old_group_name = await localStorage.GetItemAsync<string>("group_name");

        if (!String.IsNullOrEmpty(group_name))
        {
            //Add if not existing
            bool success = false;

            MySqlConnection conn = new MySqlConnection(Application_Settings.connectionString);

            try
            {
                await conn.OpenAsync();

                string execute_query = @"
                UPDATE `groups` SET name = @group_name, description = @description WHERE name = @old_group_name AND location_name = @location_name AND tenant_name = @tenant_name;
                UPDATE `devices` SET group_name = @group_name WHERE group_name = @old_group_name AND location_name = @location_name AND tenant_name = @tenant_name;";

                MySqlCommand cmd = new MySqlCommand(execute_query, conn);
                cmd.Parameters.AddWithValue("@tenant_name", tenant_name);
                cmd.Parameters.AddWithValue("@location_name", location_name);
                cmd.Parameters.AddWithValue("@group_name", group_name);
                cmd.Parameters.AddWithValue("@old_group_name", old_group_name);
                cmd.Parameters.AddWithValue("@date", DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss"));
                cmd.Parameters.AddWithValue("@author", await localStorage.GetItemAsync<string>("username"));
                cmd.Parameters.AddWithValue("@description", description);
                
                cmd.ExecuteNonQuery();

                success = true;
            }
            catch (Exception ex)
            {
                Logging.Handler.Error("/location_settings -> OK", "Result", ex.Message);
            }
            finally
            {
                await conn.CloseAsync();
            }

            if (success)
            {
                this.Snackbar.Configuration.ShowCloseIcon = true;
                this.Snackbar.Configuration.PositionClass = Defaults.Classes.Position.BottomRight;
                this.Snackbar.Add("Gespeichert.", Severity.Success);

                Thread.Sleep(1000);
                NavigationManager.Refresh();
            }
            else
            {
                this.Snackbar.Configuration.ShowCloseIcon = true;
                this.Snackbar.Configuration.PositionClass = Defaults.Classes.Position.BottomRight;
                this.Snackbar.Add("Bearbeiten fehlgeschlagen.", Severity.Error);
            }

            this.MudDialog.Close(DialogResult.Ok(String.Empty));
            this.MudDialog.Close(DialogResult.Cancel());
        }
    }

    private void Cancel() => MudDialog.Cancel();

    private void Redirect(string path)
    {
        NavigationManager.NavigateTo("/");
        NavigationManager.NavigateTo(path);
    }
}