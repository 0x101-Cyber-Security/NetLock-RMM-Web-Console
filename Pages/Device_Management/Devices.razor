@page "/devices"
@using MySqlConnector
@using System.Data.Common
@using System.Text.Json
@using OfficeOpenXml
@using System.Xml.Serialization
@using System.Text
@using System.Text.Json.Nodes
@using Microsoft.AspNetCore.Components.Server.ProtectedBrowserStorage
@using Microsoft.AspNetCore.DataProtection
@using System.Globalization

@inject NavigationManager NavigationManager
@inject ILocalStorageService localStorage
@inject IDialogService DialogService
@inject ISnackbar Snackbar
@inject IJSRuntime JSRuntime
@inject IDataProtectionProvider DataProtectionProvider

<style>
    .selected-row {
        background-color: lightgray; /* Ändern Sie dies entsprechend Ihren Bedürfnissen */
    }

    .custom-expansion-panel {
        background-color: transparent; /* Ändern Sie dies entsprechend Ihren Bedürfnissen */
    }

    @@media only screen and (max-width: 768px) {
        .desktop-icon {
            display: none;
        }
    }

    .dialog-blurring {
        backdrop-filter: blur(10px);
    }

    .mud-table-cell-custom-group {
        font-weight: 500;
    }

    .mud-table-cell-custom-group-footer {
        padding-bottom: 50px;
        text-align: right;
    }
</style>

<AuthorizeView>
    <NotAuthorized>
        @{
            NavigationManager.NavigateTo("/");
        }
    </NotAuthorized>

    <Authorized>
        @{
            if (permissions_devices_authorized_enabled)
            {
                <MudOverlay Visible="@loading_overlay" DarkBackground="false" Absolute="false">
                <MudProgressCircular Color="Color.Primary" Size="Size.Large" Indeterminate="true" />
                </MudOverlay>

                <MudText Class="mt-5" Typo="Typo.h5">@group_name</MudText>
            
                if (group_name != "Alle Geräte" && permissions_devices_move)
                {
                    <MudButton Class="mt-2" Size="Size.Small" Variant="Variant.Filled" Color="Color.Default" StartIcon="@Icons.Material.Filled.Edit" OnClick="Show_Move_Devices_Dialog">Geräte verschieben</MudButton>
                }   

                <MudTooltip Text="Aktualisieren">
                    <MudIconButton Class="ml-2 mt-2" Icon="@Icons.Material.Filled.Refresh" Variant="Variant.Filled" Size="Size.Small" Color="Color.Default" @onclick="async () => { await InitializeComponentAsync(); }"></MudIconButton>
                </MudTooltip>

                <MudTooltip Text="Daten exportieren">
                    <MudIconButton Class="ml-2 mt-2" Icon="@Icons.Material.Filled.FileDownload" Variant="Variant.Filled" Size="Size.Small" Color="Color.Default" @onclick="Trigger_Export_Device_Table_Dialog"></MudIconButton>
                </MudTooltip>

                <MudTable Class="mt-5" Height="@(view_port)" FixedHeader="true" FixedFooter="true" Hover="true" RowsPerPage="25" Dense="true" Items="@mysql_data" Filter="new Func<MySQL_Entity, bool>(Device_Table_Filter_Func)">
                    <ToolBarContent>
                        <MudTextField @bind-Value="device_table_search_string" Placeholder="Suche" Adornment="Adornment.Start" AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Medium" Class="mt-0"></MudTextField>
                    </ToolBarContent>
                    <HeaderContent>
                        <MudTh Sortable="true" @onclick="() => sorted_column = (nameof(MySQL_Entity.device_name))" style="white-space: nowrap;">Name</MudTh>
                        <MudTh Sortable="true" @onclick="() => sorted_column = (nameof(MySQL_Entity.tenant_name))" style="white-space: nowrap;">Mandant</MudTh>
                        <MudTh Sortable="true" @onclick="() => sorted_column = (nameof(MySQL_Entity.location_name))" style="white-space: nowrap;">Standort</MudTh>
                        <MudTh Sortable="true" @onclick="() => sorted_column = (nameof(MySQL_Entity.group_name))" style="white-space: nowrap;">Gruppe</MudTh>
                        <MudTh Sortable="true" @onclick="() => sorted_column = (nameof(MySQL_Entity.agent_version))" style="white-space: nowrap;">Agenten Version</MudTh>
                        <MudTh Sortable="true" @onclick="() => sorted_column = (nameof(MySQL_Entity.last_access))" style="white-space: nowrap;">Letzter Kontakt</MudTh>
                        <MudTh Sortable="true" @onclick="() => sorted_column = (nameof(MySQL_Entity.policy_name))" style="white-space: nowrap;">Richtlinie</MudTh>
                        <MudTh Sortable="true" @onclick="() => sorted_column = (nameof(MySQL_Entity.ip_address))" style="white-space: nowrap;">IP-Addresse</MudTh>
                        <MudTh Sortable="true" @onclick="() => sorted_column = (nameof(MySQL_Entity.operating_system))" style="white-space: nowrap;">Betriebssystem</MudTh>
                        <MudTh Sortable="true" @onclick="() => sorted_column = (nameof(MySQL_Entity.domain))" style="white-space: nowrap;">Domäne</MudTh>
                        <MudTh Sortable="true" @onclick="() => sorted_column = (nameof(MySQL_Entity.firewall_status))" style="white-space: nowrap;">Firewall</MudTh>
                        <MudTh Sortable="true" @onclick="() => sorted_column = (nameof(MySQL_Entity.antivirus_solution))" style="white-space: nowrap;">Antivirus Lösung</MudTh>
                    </HeaderContent>
                    <RowTemplate Context="row">
                        <MudTd DataLabel="Name" @onclick="() => RowClickHandler(row)" class="@GetRowClass(row)" style="white-space: nowrap;">
                            <span style="display: flex; align-items: center;">
                                <MudIcon Icon="@Icons.Material.Filled.Computer" Size="Size.Small" class="desktop-icon" />&nbsp;@row.device_name
                            </span>
                        </MudTd>

                        <MudTd DataLabel="Mandant" @onclick="() => RowClickHandler(row)" class="@GetRowClass(row)" style="white-space: nowrap;">
                            <span style="display: flex; align-items: center;">
                                <MudIcon Icon="@Icons.Material.Filled.Person" Size="Size.Small" class="desktop-icon" />&nbsp;@row.tenant_name
                            </span>
                        </MudTd>

                        <MudTd DataLabel="Standort" @onclick="() => RowClickHandler(row)" class="@GetRowClass(row)" style="white-space: nowrap;">
                            <span style="display: flex; align-items: center;">
                                <MudIcon Icon="@Icons.Material.Filled.LocationCity" Size="Size.Small" class="desktop-icon" />&nbsp;@row.location_name
                            </span>
                        </MudTd>

                        <MudTd DataLabel="Gruppe" @onclick="() => RowClickHandler(row)" class="@GetRowClass(row)" style="white-space: nowrap;">
                            <span style="display: flex; align-items: center;">
                                <MudIcon Icon="@Icons.Material.Filled.Group" Size="Size.Small" class="desktop-icon" />&nbsp;@row.group_name
                            </span>
                        </MudTd>

                        <MudTd DataLabel="Agenten Version" @onclick="() => RowClickHandler(row)" class="@GetRowClass(row)" style="white-space: nowrap;">
                            <span style="display: flex; align-items: center;">
                                <MudIcon Icon="@Icons.Material.Filled.Update" Size="Size.Small" class="desktop-icon" />&nbsp;@row.agent_version
                            </span>
                        </MudTd>

                        <MudTd DataLabel="Letzter Kontakt" @onclick="() => RowClickHandler(row)" class="@GetRowClass(row)" style="white-space: nowrap;">
                            <span style="display: flex; align-items: center;">
                                <MudIcon Icon="@Icons.Material.Filled.AccessTime" Size="Size.Small" class="desktop-icon" />&nbsp;@row.last_access
                            </span>
                        </MudTd>

                        <MudTd DataLabel="Richtlinie" @onclick="() => RowClickHandler(row)" class="@GetRowClass(row)" style="white-space: nowrap;">
                            <span style="display: flex; align-items: center;">
                                <MudIcon Icon="@Icons.Material.Filled.Policy" Size="Size.Small" class="desktop-icon" />&nbsp;@row.policy_name
                            </span>
                        </MudTd>

                        <MudTd DataLabel="IP-Adresse" @onclick="() => RowClickHandler(row)" class="@GetRowClass(row)" style="white-space: nowrap;">
                            <span style="display: flex; align-items: center;">
                                <MudIcon Icon="@Icons.Material.Filled.NetworkWifi1Bar" Size="Size.Small" class="desktop-icon" />&nbsp;@row.ip_address
                            </span>
                        </MudTd>

                        <MudTd DataLabel="Betriebssystem" @onclick="() => RowClickHandler(row)" class="@GetRowClass(row)" style="white-space: nowrap;">
                            <span style="display: flex; align-items: center;">
                                <MudIcon Icon="@Icons.Material.Filled.DeveloperBoard" Size="Size.Small" class="desktop-icon" />&nbsp;@row.operating_system
                            </span>
                        </MudTd>

                        <MudTd DataLabel="Domäne" @onclick="() => RowClickHandler(row)" class="@GetRowClass(row)" style="white-space: nowrap;">
                            <span style="display: flex; align-items: center;">
                                <MudIcon Icon="@Icons.Material.Filled.Domain" Size="Size.Small" class="desktop-icon" />&nbsp;@row.domain
                            </span>
                        </MudTd>

                        <MudTd DataLabel="Firewall" @onclick="() => RowClickHandler(row)" class="@GetRowClass(row)" style="white-space: nowrap;">
                            <span style="display: flex; align-items: center;">
                                <MudIcon Icon="@Icons.Material.Filled.Fireplace" Size="Size.Small" class="desktop-icon" />&nbsp;@row.firewall_status
                            </span>
                        </MudTd>

                        <MudTd DataLabel="Antivirus Lösung" @onclick="() => RowClickHandler(row)" class="@GetRowClass(row)" style="white-space: nowrap;">
                            <span style="display: flex; align-items: center;">
                                <MudIcon Icon="@Icons.Material.Filled.Coronavirus" Size="Size.Small" class="desktop-icon" />&nbsp;@row.antivirus_solution
                            </span>
                        </MudTd>

                    </RowTemplate>
                        <PagerContent>
                            <MudTablePager PageSizeOptions="new int[] { 10, 25, 50, 100, 250, 500, int.MaxValue }" RowsPerPageString="Geräte pro Seite" />
                        </PagerContent>
                </MudTable>

                if (!disabled)
                {
                    <MudExpansionPanel Class="mt-5 custom-expansion-panel" @bind-IsExpanded="@expanded" Disabled="disabled" Text="Informationen">
                        <TitleContent>
                            <div class="d-flex">
                                <MudIcon Icon="@Icons.Material.Filled.Info" class="mr-3"></MudIcon>
                                <MudText>Geräte Informationen</MudText>
                            </div>
                        </TitleContent>

                        <ChildContent>

                            <div style="display: flex; align-items: center;">
                                <MudText Class="ml-2 mb-2" Typo="Typo.h6">Verbindung: Statisch</MudText>
                        
                                <MudTooltip Text="Verbindung mit Agenten herstellen">
                                    <MudIconButton Class="ml-2 mb-2" Icon="@Icons.Material.Filled.PlayArrow" Variant="Variant.Filled" Size="Size.Small" Color="Color.Default" @onclick="async () => { events_mysql_data = await Events_Load(notes_tenant_name, notes_location_name, notes_device_name, true); }"></MudIconButton>
                                </MudTooltip>

                                <MudTooltip Text="Verbindung trennen">
                                    <MudIconButton Class="ml-2 mb-2" Icon="@Icons.Material.Filled.Stop" Variant="Variant.Filled" Size="Size.Small" Color="Color.Default" @onclick="async () => { events_mysql_data = await Events_Load(notes_tenant_name, notes_location_name, notes_device_name, true); }"></MudIconButton>
                                </MudTooltip>

                                @if (permissions_devices_deauthorize)
                                {
                                    <MudButton Class="ml-2 mb-2" Size="Size.Small" Color="Color.Warning" Variant="Variant.Filled" StartIcon="@Icons.Material.Filled.DesktopAccessDisabled" @onclick="async () => { await Deauthorize_Device(notes_device_name); }">Deautorisieren</MudButton>
                                }
                            </div>

                            <MudTabs KeepPanelsAlive=true Class="mt-0" Elevation="4" Rounded="false" Color="@Color.Default">
                                
                            @if (permissions_devices_general)
                            {
                                    <MudTabPanel Text="Allgemein">
                                        <MudPaper>
                                            <MudText Class="ml-2" Typo="Typo.h6">Agent</MudText>
                                            <MudText Class="ml-2 d-flex align-center" Typo="Typo.body1"><MudIcon Icon="@Icons.Material.Filled.Update" Title="Status" Size="Size.Small" />&nbsp;Version: @agent_version</MudText>
                                                <MudText Class="ml-2 d-flex align-center" Typo="Typo.body1"><MudIcon Icon="@Icons.Material.Filled.AccessTime" Title="Status" Size="Size.Small" />&nbsp;Letzter Kontakt: @last_access</MudText>
                                                <MudText Class="ml-2 d-flex align-center" Typo="Typo.body1"><MudIcon Icon="@Icons.Material.Filled.NetworkWifi1Bar" Title="Status" Size="Size.Small" />&nbsp;Externe IP-Addresse: @ip_address_external</MudText>
                                                <MudText Class="ml-2 d-flex align-center" Typo="Typo.body1"><MudIcon Icon="@Icons.Material.Filled.Policy" Title="Status" Size="Size.Small" />&nbsp;Richtlinie: @policy_name</MudText>

                                                <MudText Class="mt-5 ml-2" Typo="Typo.h6">Betriebssystem</MudText>
                                                <MudText Class="ml-2 d-flex align-center" Typo="Typo.body1"><MudIcon Icon="@Icons.Material.Filled.DeveloperBoard" Title="Status" Size="Size.Small" />&nbsp;Edition: @operating_system</MudText>
                                                <MudText Class="ml-2 d-flex align-center" Typo="Typo.body1"><MudIcon Icon="@Icons.Material.Filled.Domain" Title="Status" Size="Size.Small" />&nbsp;Domain: @domain</MudText>
                                                <MudText Class="ml-2 d-flex align-center" Typo="Typo.body1"><MudIcon Icon="@Icons.Material.Filled.Pages" Title="Status" Size="Size.Small" />&nbsp;Architektur: @architecture</MudText>
                                                <MudText Class="ml-2 d-flex align-center" Typo="Typo.body1"><MudIcon Icon="@Icons.Material.Filled.Fireplace" Title="Status" Size="Size.Small" />&nbsp;Firewall: @firewall_status</MudText>
                                                <MudText Class="ml-2 d-flex align-center" Typo="Typo.body1"><MudIcon Icon="@Icons.Material.Filled.Coronavirus" Title="Status" Size="Size.Small" />&nbsp;Antivirus: @antivirus_solution</MudText>
                                                <MudText Class="ml-2 d-flex align-center" Typo="Typo.body1"><MudIcon Icon="@Icons.Material.Filled.AvTimer" Title="Status" Size="Size.Small" />&nbsp;Letzter Boot: @last_boot</MudText>
                                                <MudText Class="ml-2 d-flex align-center" Typo="Typo.body1"><MudIcon Icon="@Icons.Material.Filled.Map" Title="Status" Size="Size.Small" />&nbsp;Zeitzone: @timezone</MudText>

                                                <MudText Class="mt-5 ml-2" Typo="Typo.h6">Hardware</MudText>
                                                <MudText Class="ml-2 d-flex align-center" Typo="Typo.body1"><MudIcon Icon="@Icons.Material.Filled.Stream" Title="Status" Size="Size.Small" />&nbsp;Prozessor: @cpu</MudText>
                                                <MudText Class="ml-2 d-flex align-center" Typo="Typo.body1"><MudIcon Icon="@Icons.Material.Filled.DeveloperBoard" Title="Status" Size="Size.Small" />&nbsp;Mainboard: @mainboard</MudText>
                                                <MudText Class="ml-2 d-flex align-center" Typo="Typo.body1"><MudIcon Icon="@Icons.Material.Filled.SimCard" Title="Status" Size="Size.Small" />&nbsp;Grafikkarte: @gpu</MudText>
                                                <MudText Class="ml-2 d-flex align-center" Typo="Typo.body1"><MudIcon Icon="@Icons.Material.Filled.Memory" Title="Status" Size="Size.Small" />&nbsp;Arbeitsspeicher: @ram (GB)</MudText>
                                                <MudText Class="ml-2 d-flex align-center" Typo="Typo.body1"><MudIcon Icon="@Icons.Material.Filled.HeatPump" Title="Status" Size="Size.Small" />&nbsp;TPM: @tpm</MudText>

                                                <MudExpansionPanel Class="mt-0 custom-expansion-panel">
                                                    <TitleContent>
                                                        <div class="d-flex">
                                                            <MudIcon Icon="@Icons.Material.Filled.History" class="mr-3"></MudIcon>
                                                            <MudText>Verlauf</MudText>
                                                        </div>
                                                    </TitleContent>

                                                    <ChildContent>
                                                        <div style="display: flex; align-items: center;">
                                                            <MudDateRangePicker PickerVariant="PickerVariant.Dialog" Label="Zeitraum" @ref="device_information_general_history_table_picker" @bind-DateRange="device_information_general_history_table_dateRange" Style="max-width: 300px;">
                                                                <PickerActions Context="pickerActionsContext">
                                                                    <MudButton Class="mr-auto align-self-start" OnClick="@(() => device_information_general_history_table_picker.Clear())">Zurücksetzen</MudButton>
                                                                    <MudButton OnClick="@(() => device_information_general_history_table_picker.Close(false))">Abbrechen</MudButton>
                                                                    <MudButton Color="Color.Primary" @onclick="async () => { await Device_Information_General_History_Table_Submit_Picker(); }">Bestätigen</MudButton>
                                                                </PickerActions>
                                                            </MudDateRangePicker>

                                                            <MudTooltip Text="Daten exportieren">
                                                                <MudIconButton Class="ml-2 mt-5" Icon="@Icons.Material.Filled.FileDownload" Variant="Variant.Filled" Size="Size.Small" Color="Color.Default" @onclick="Trigger_Export_Device_History_Table_Dialog"></MudIconButton>
                                                            </MudTooltip>
                                                        </div>
                                                        <MudTable Class="mt-2" Height="25vh" FixedHeader="true" FixedFooter="true" Hover="true" RowsPerPage="50" Dense="true" Items="@device_information_general_history_mysql_data" Filter="new Func<Device_Information_General_History_Entity, bool>(Device_Information_General_History_Table_Filter_Func)">
                                                            <ToolBarContent>
                                                                <MudTextField @bind-Value="device_information_general_history_table_search_string" Placeholder="Suche" Adornment="Adornment.Start" AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Medium" Class="mt-0"></MudTextField>
                                                            </ToolBarContent>
                                                            <HeaderContent>
                                                                <MudTh Sortable="true" @onclick="() => device_information_general_history_table_sorted_column = (nameof(Device_Information_General_History_Entity.date))" style="white-space: nowrap;">Datum</MudTh>
                                                                <MudTh Sortable="true" @onclick="() => device_information_general_history_table_sorted_column = (nameof(Device_Information_General_History_Entity.agent_version))" style="white-space: nowrap;">Agenten Version</MudTh>
                                                                <MudTh Sortable="true" @onclick="() => device_information_general_history_table_sorted_column = (nameof(Device_Information_General_History_Entity.policy_name))" style="white-space: nowrap;">Richtlinie</MudTh>
                                                                <MudTh Sortable="true" @onclick="() => device_information_general_history_table_sorted_column = (nameof(Device_Information_General_History_Entity.operating_system))" style="white-space: nowrap;">Betriebssystem</MudTh>
                                                                <MudTh Sortable="true" @onclick="() => device_information_general_history_table_sorted_column = (nameof(Device_Information_General_History_Entity.domain))" style="white-space: nowrap;">Domain</MudTh>
                                                                <MudTh Sortable="true" @onclick="() => device_information_general_history_table_sorted_column = (nameof(Device_Information_General_History_Entity.architecture))" style="white-space: nowrap;">Architektur</MudTh>
                                                                <MudTh Sortable="true" @onclick="() => device_information_general_history_table_sorted_column = (nameof(Device_Information_General_History_Entity.antivirus_solution))" style="white-space: nowrap;">Antivirus</MudTh>
                                                                <MudTh Sortable="true" @onclick="() => device_information_general_history_table_sorted_column = (nameof(Device_Information_General_History_Entity.last_boot))" style="white-space: nowrap;">Letzter Boot</MudTh>
                                                                <MudTh Sortable="true" @onclick="() => device_information_general_history_table_sorted_column = (nameof(Device_Information_General_History_Entity.timezone))" style="white-space: nowrap;">Zeitzone</MudTh>
                                                                <MudTh Sortable="true" @onclick="() => device_information_general_history_table_sorted_column = (nameof(Device_Information_General_History_Entity.cpu))" style="white-space: nowrap;">Prozessor</MudTh>
                                                                <MudTh Sortable="true" @onclick="() => device_information_general_history_table_sorted_column = (nameof(Device_Information_General_History_Entity.mainboard))" style="white-space: nowrap;">Mainboard</MudTh>
                                                                <MudTh Sortable="true" @onclick="() => device_information_general_history_table_sorted_column = (nameof(Device_Information_General_History_Entity.gpu))" style="white-space: nowrap;">Grafikkarte</MudTh>
                                                                <MudTh Sortable="true" @onclick="() => device_information_general_history_table_sorted_column = (nameof(Device_Information_General_History_Entity.ram))" style="white-space: nowrap;">Arbeitsspeicher</MudTh>
                                                                <MudTh Sortable="true" @onclick="() => device_information_general_history_table_sorted_column = (nameof(Device_Information_General_History_Entity.tpm))" style="white-space: nowrap;">TPM</MudTh>
                                                                <MudTh Sortable="true" @onclick="() => device_information_general_history_table_sorted_column = (nameof(Device_Information_General_History_Entity.ip_address_internal))" style="white-space: nowrap;">Interne IP-Addresse(n)</MudTh>
                                                                <MudTh Sortable="true" @onclick="() => device_information_general_history_table_sorted_column = (nameof(Device_Information_General_History_Entity.ip_address_external))" style="white-space: nowrap;">Externe IP-Addresse</MudTh>
                                                                <MudTh Sortable="true" @onclick="() => device_information_general_history_table_sorted_column = (nameof(Device_Information_General_History_Entity.network_adapters))" style="white-space: nowrap;">Netzwerk Adapter</MudTh>
                                                            </HeaderContent>
                                                            <RowTemplate Context="device_information_general_history_row">

                                                                <MudTd DataLabel="Datum" @onclick="() => Device_Information_General_History_RowClickHandler(device_information_general_history_row)" class="@Device_Information_General_History_GetRowClass(device_information_general_history_row)" style="white-space: nowrap;">
                                                                    <span style="display: flex; align-items: center;">
                                                                        &nbsp;@device_information_general_history_row.date
                                                                </span>
                                                            </MudTd>

                                                            <MudTd DataLabel="Version" @onclick="() => Device_Information_General_History_RowClickHandler(device_information_general_history_row)" class="@Device_Information_General_History_GetRowClass(device_information_general_history_row)" style="white-space: nowrap;">
                                                                <span style="display: flex; align-items: center;">
                                                                    &nbsp;@device_information_general_history_row.agent_version
                                                                </span>
                                                            </MudTd>

                                                            <MudTd DataLabel="Richtlinie" @onclick="() => Device_Information_General_History_RowClickHandler(device_information_general_history_row)" class="@Device_Information_General_History_GetRowClass(device_information_general_history_row)" style="white-space: nowrap;">
                                                                <span style="display: flex; align-items: center;">
                                                                    &nbsp;@device_information_general_history_row.policy_name
                                                                </span>
                                                            </MudTd>

                                                            <MudTd DataLabel="Betriebssystem" @onclick="() => Device_Information_General_History_RowClickHandler(device_information_general_history_row)" class="@Device_Information_General_History_GetRowClass(device_information_general_history_row)" style="white-space: nowrap;">
                                                                <span style="display: flex; align-items: center;">
                                                                    &nbsp;@device_information_general_history_row.operating_system
                                                                </span>
                                                            </MudTd>

                                                            <MudTd DataLabel="Domain" @onclick="() => Device_Information_General_History_RowClickHandler(device_information_general_history_row)" class="@Device_Information_General_History_GetRowClass(device_information_general_history_row)" style="white-space: nowrap;">
                                                                <span style="display: flex; align-items: center;">
                                                                    &nbsp;@device_information_general_history_row.domain
                                                                </span>
                                                            </MudTd>

                                                            <MudTd DataLabel="Architektur" @onclick="() => Device_Information_General_History_RowClickHandler(device_information_general_history_row)" class="@Device_Information_General_History_GetRowClass(device_information_general_history_row)" style="white-space: nowrap;">
                                                                <span style="display: flex; align-items: center;">
                                                                    &nbsp;@device_information_general_history_row.architecture
                                                                </span>
                                                            </MudTd>

                                                            <MudTd DataLabel="Antivirus" @onclick="() => Device_Information_General_History_RowClickHandler(device_information_general_history_row)" class="@Device_Information_General_History_GetRowClass(device_information_general_history_row)" style="white-space: nowrap;">
                                                                <span style="display: flex; align-items: center;">
                                                                    &nbsp;@device_information_general_history_row.antivirus_solution
                                                                </span>
                                                            </MudTd>

                                                            <MudTd DataLabel="Letzter Boot" @onclick="() => Device_Information_General_History_RowClickHandler(device_information_general_history_row)" class="@Device_Information_General_History_GetRowClass(device_information_general_history_row)" style="white-space: nowrap;">
                                                                <span style="display: flex; align-items: center;">
                                                                    &nbsp;@device_information_general_history_row.last_boot
                                                                </span>
                                                            </MudTd>

                                                            <MudTd DataLabel="Zeitzone" @onclick="() => Device_Information_General_History_RowClickHandler(device_information_general_history_row)" class="@Device_Information_General_History_GetRowClass(device_information_general_history_row)" style="white-space: nowrap;">
                                                                <span style="display: flex; align-items: center;">
                                                                    &nbsp;@device_information_general_history_row.timezone
                                                                </span>
                                                            </MudTd>

                                                            <MudTd DataLabel="Prozessor" @onclick="() => Device_Information_General_History_RowClickHandler(device_information_general_history_row)" class="@Device_Information_General_History_GetRowClass(device_information_general_history_row)" style="white-space: nowrap;">
                                                                <span style="display: flex; align-items: center;">
                                                                    &nbsp;@device_information_general_history_row.cpu
                                                                </span>
                                                            </MudTd>

                                                            <MudTd DataLabel="Mainboard" @onclick="() => Device_Information_General_History_RowClickHandler(device_information_general_history_row)" class="@Device_Information_General_History_GetRowClass(device_information_general_history_row)" style="white-space: nowrap;">
                                                                <span style="display: flex; align-items: center;">
                                                                    &nbsp;@device_information_general_history_row.mainboard
                                                                </span>
                                                            </MudTd>

                                                            <MudTd DataLabel="Grafikkarte" @onclick="() => Device_Information_General_History_RowClickHandler(device_information_general_history_row)" class="@Device_Information_General_History_GetRowClass(device_information_general_history_row)" style="white-space: nowrap;">
                                                                <span style="display: flex; align-items: center;">
                                                                    &nbsp;@device_information_general_history_row.gpu
                                                                </span>
                                                            </MudTd>

                                                            <MudTd DataLabel="Arbeitsspeicher" @onclick="() => Device_Information_General_History_RowClickHandler(device_information_general_history_row)" class="@Device_Information_General_History_GetRowClass(device_information_general_history_row)" style="white-space: nowrap;">
                                                                <span style="display: flex; align-items: center;">
                                                                    &nbsp;@device_information_general_history_row.ram
                                                                </span>
                                                            </MudTd>

                                                            <MudTd DataLabel="TPM" @onclick="() => Device_Information_General_History_RowClickHandler(device_information_general_history_row)" class="@Device_Information_General_History_GetRowClass(device_information_general_history_row)" style="white-space: nowrap;">
                                                                <span style="display: flex; align-items: center;">
                                                                    &nbsp;@device_information_general_history_row.tpm
                                                                </span>
                                                            </MudTd>

                                                            <MudTd DataLabel="Interne IP-Addresse(n)" @onclick="() => Device_Information_General_History_RowClickHandler(device_information_general_history_row)" class="@Device_Information_General_History_GetRowClass(device_information_general_history_row)" style="white-space: nowrap;">
                                                                <span style="display: flex; align-items: center;">
                                                                    &nbsp;@device_information_general_history_row.ip_address_internal
                                                                </span>
                                                            </MudTd>

                                                            <MudTd DataLabel="Externe IP-Addresse" @onclick="() => Device_Information_General_History_RowClickHandler(device_information_general_history_row)" class="@Device_Information_General_History_GetRowClass(device_information_general_history_row)" style="white-space: nowrap;">
                                                                <span style="display: flex; align-items: center;">
                                                                    &nbsp;@device_information_general_history_row.ip_address_external
                                                                </span>
                                                            </MudTd>

                                                            <MudTd DataLabel="Netzwerk Adapter" @onclick="() => Device_Information_General_History_RowClickHandler(device_information_general_history_row)" class="@Device_Information_General_History_GetRowClass(device_information_general_history_row)" style="white-space: nowrap;">
                                                                <span style="display: flex; align-items: center;">
                                                                    &nbsp;@{
                                                                        try
                                                                        {
                                                                            if (!String.IsNullOrEmpty(device_information_general_history_row.network_adapters))
                                                                            {
                                                                                Logging.Handler.Debug("/devices -> Table", "network_adapters", device_information_general_history_row.network_adapters);

                                                                                string network_adapters_string = String.Empty;

                                                                                // Deserialisierung des JSON-Arrays in dynamische Typen
                                                                                JsonArray network_adapters_array = JsonNode.Parse(device_information_general_history_row.network_adapters).AsArray();

                                                                                // Zugriff auf die Elemente des Arrays
                                                                                foreach (var adapter in network_adapters_array)
                                                                                {
                                                                                    string name = adapter["name"].ToString();
                                                                                    string ipv4_address = adapter["ipv4_address"].ToString();
                                                                                    string ipv6_address = adapter["ipv6_address"].ToString();

                                                                                    network_adapters_string = network_adapters_string + " " + $"{name} ({ipv4_address} & {ipv6_address}), ";
                                                                                }

                                                                                Logging.Handler.Debug("/devices -> Table", "Display network adapters", network_adapters_string);

                                                                                network_adapters_history_display_string = network_adapters_string.Substring(0, network_adapters_string.Length - 2);
                                                                            }
                                                                        }
                                                                        catch (Exception ex)
                                                                        {
                                                                            Logging.Handler.Error("/devices -> Table", "Display network adapters", ex.Message);
                                                                        }
                                                                    }@network_adapters_history_display_string
                                                                </span>
                                                            </MudTd>

                                                        </RowTemplate>
                                                        <PagerContent>
                                                            <MudTablePager PageSizeOptions="new int[] { 10, 25, 50, 100, 250, 500, 750, 1000, 1250, 1500, 1750, 2000, 2250, 2500, 2750, 3000, 3250, 3500, 3750, 4000, 4250, 4500, 4750, 5000, int.MaxValue }" RowsPerPageString="Einträge pro Seite" />
                                                        </PagerContent>
                                                    </MudTable>
                                                </ChildContent>
                                            </MudExpansionPanel>

                                        </MudPaper>

                                        <MudPaper Class="mt-5">
                                            <MudText Class="ml-2 d-flex align-center" Typo="Typo.h6">Prozessor</MudText>

                                            <MudTable FixedHeader="true" FixedFooter="true" Hover="true" Dense="true" Items="@cpu_information_mysql_data">
                                                <HeaderContent>
                                                    <MudTh style="white-space: nowrap;">Name</MudTh>
                                                    <MudTh style="white-space: nowrap;">Prozesse</MudTh>
                                                    <MudTh style="white-space: nowrap;">Threads</MudTh>
                                                    <MudTh style="white-space: nowrap;">Handles</MudTh>
                                                    <MudTh style="white-space: nowrap;">Geschwindigkeit (MHz)</MudTh>
                                                    <MudTh style="white-space: nowrap;">Basisgeschwindigkeit (MHz)</MudTh>
                                                    <MudTh style="white-space: nowrap;">Kerne</MudTh>
                                                    <MudTh style="white-space: nowrap;">Logische Prozessoren</MudTh>
                                                    <MudTh style="white-space: nowrap;">Sockets</MudTh>
                                                    <MudTh style="white-space: nowrap;">Socket Bezeichnung</MudTh>
                                                    <MudTh style="white-space: nowrap;">Virtualisierung</MudTh>
                                                    <MudTh style="white-space: nowrap;">L1-Cache</MudTh>
                                                    <MudTh style="white-space: nowrap;">L2-Cache</MudTh>
                                                    <MudTh style="white-space: nowrap;">L3-Cache</MudTh>
                                                    <MudTh style="white-space: nowrap;">Prozessor ID</MudTh>
                                                    <MudTh style="white-space: nowrap;">Revision</MudTh>
                                                </HeaderContent>
                                                <RowTemplate Context="cpu_information_row">

                                                    <MudTd DataLabel="Name" style="white-space: nowrap;">
                                                        <span style="display: flex; align-items: center;">
                                                            &nbsp;@cpu_information_row.name
                                                        </span>
                                                    </MudTd>

                                                    <MudTd DataLabel="Prozesse" style="white-space: nowrap;">
                                                        <span style="display: flex; align-items: center;">
                                                            &nbsp;@cpu_information_row.processes
                                                        </span>
                                                    </MudTd>

                                                    <MudTd DataLabel="Threads" style="white-space: nowrap;">
                                                        <span style="display: flex; align-items: center;">
                                                            &nbsp;@cpu_information_row.threads
                                                        </span>
                                                    </MudTd>

                                                    <MudTd DataLabel="Handles" style="white-space: nowrap;">
                                                        <span style="display: flex; align-items: center;">
                                                            &nbsp;@cpu_information_row.handles
                                                        </span>
                                                    </MudTd>

                                                    <MudTd DataLabel="Geschwindigkeit" style="white-space: nowrap;">
                                                        <span style="display: flex; align-items: center;">
                                                            &nbsp;@cpu_information_row.currentclockspeed
                                                        </span>
                                                    </MudTd>

                                                    <MudTd DataLabel="Basisgeschwindigkeit" style="white-space: nowrap;">
                                                        <span style="display: flex; align-items: center;">
                                                            &nbsp;@cpu_information_row.maxclockspeed
                                                        </span>
                                                    </MudTd>

                                                    <MudTd DataLabel="Kerne" style="white-space: nowrap;">
                                                        <span style="display: flex; align-items: center;">
                                                            &nbsp;@cpu_information_row.cores
                                                        </span>
                                                    </MudTd>

                                                    <MudTd DataLabel="Logische Prozessoren" style="white-space: nowrap;">
                                                        <span style="display: flex; align-items: center;">
                                                            &nbsp;@cpu_information_row.logical_processors
                                                        </span>
                                                    </MudTd>

                                                    <MudTd DataLabel="Sockets" style="white-space: nowrap;">
                                                        <span style="display: flex; align-items: center;">
                                                            &nbsp;@cpu_information_row.sockets
                                                        </span>
                                                    </MudTd>

                                                    <MudTd DataLabel="Socket Bezeichnung" style="white-space: nowrap;">
                                                        <span style="display: flex; align-items: center;">
                                                            &nbsp;@cpu_information_row.socket_designation
                                                        </span>
                                                    </MudTd>

                                                    <MudTd DataLabel="Virtualisierung" style="white-space: nowrap;">
                                                        <span style="display: flex; align-items: center;">
                                                            &nbsp;@cpu_information_row.virtualization
                                                        </span>
                                                    </MudTd>

                                                    <MudTd DataLabel="L1-Cache" style="white-space: nowrap;">
                                                        <span style="display: flex; align-items: center;">
                                                            &nbsp;@cpu_information_row.l1_cache
                                                        </span>
                                                    </MudTd>

                                                    <MudTd DataLabel="L2-Cache" style="white-space: nowrap;">
                                                        <span style="display: flex; align-items: center;">
                                                            &nbsp;@cpu_information_row.l2_cache
                                                        </span>
                                                    </MudTd>

                                                    <MudTd DataLabel="L3-Cache" style="white-space: nowrap;">
                                                        <span style="display: flex; align-items: center;">
                                                            &nbsp;@cpu_information_row.l3_cache
                                                        </span>
                                                    </MudTd>

                                                    <MudTd DataLabel="Prozessor ID" style="white-space: nowrap;">
                                                        <span style="display: flex; align-items: center;">
                                                            &nbsp;@cpu_information_row.processor_id
                                                        </span>
                                                    </MudTd>

                                                    <MudTd DataLabel="Revision" style="white-space: nowrap;">
                                                        <span style="display: flex; align-items: center;">
                                                            &nbsp;@cpu_information_row.revision
                                                        </span>
                                                    </MudTd>

                                                </RowTemplate>
                                            </MudTable>

                                            <MudExpansionPanel Class="mt-2 custom-expansion-panel">
                                                <TitleContent>
                                                    <div class="d-flex">
                                                        <MudIcon Icon="@Icons.Material.Filled.History" class="mr-3"></MudIcon>
                                                        <MudText>Verlauf</MudText>
                                                    </div>
                                                </TitleContent>

                                                <ChildContent>
                                                    <div style="display: flex; align-items: center;">
                                                        <MudDateRangePicker PickerVariant="PickerVariant.Dialog" Label="Zeitraum" @ref="device_information_cpu_history_table_picker" @bind-DateRange="device_information_cpu_history_table_dateRange" Style="max-width: 300px;">
                                                            <PickerActions Context="pickerActionsContext">
                                                                <MudButton Class="mr-auto align-self-start" OnClick="@(() => device_information_cpu_history_table_picker.Clear())">Zurücksetzen</MudButton>
                                                                <MudButton OnClick="@(() => device_information_cpu_history_table_picker.Close(false))">Abbrechen</MudButton>
                                                                <MudButton Color="Color.Primary" @onclick="async () => { await Device_Information_CPU_History_Table_Submit_Picker(); }">Bestätigen</MudButton>
                                                            </PickerActions>
                                                        </MudDateRangePicker>

                                                        <MudTooltip Text="Daten exportieren">
                                                            <MudIconButton Class="ml-2 mt-5" Icon="@Icons.Material.Filled.FileDownload" Variant="Variant.Filled" Size="Size.Small" Color="Color.Default" @onclick="Export_CPU_History_Table_Dialog"></MudIconButton>
                                                        </MudTooltip>
                                                    </div>

                                                    <MudTable Class="mt-2" Height="25vh" FixedHeader="true" FixedFooter="true" Hover="true" RowsPerPage="25" Dense="true" Items="@device_information_cpu_history_mysql_data">
                                                        <ToolBarContent>
                                                            <MudTextField @bind-Value="device_information_cpu_history_table_search_string" Placeholder="Suche" Adornment="Adornment.Start" AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Medium" Class="mt-0"></MudTextField>
                                                        </ToolBarContent>
                                                        <HeaderContent>
                                                            <MudTh Sortable="true" @onclick="() => device_information_cpu_history_table_sorted_column = (nameof(Device_Information_CPU_History_Entity.date))" style="white-space: nowrap;">Datum</MudTh>
                                                            <MudTh Sortable="true" @onclick="() => device_information_cpu_history_table_sorted_column = (nameof(Device_Information_CPU_History_Entity.name))" style="white-space: nowrap;">Name</MudTh>
                                                            <MudTh Sortable="true" @onclick="() => device_information_cpu_history_table_sorted_column = (nameof(Device_Information_CPU_History_Entity.processes))" style="white-space: nowrap;">Prozesse</MudTh>
                                                            <MudTh Sortable="true" @onclick="() => device_information_cpu_history_table_sorted_column = (nameof(Device_Information_CPU_History_Entity.threads))" style="white-space: nowrap;">Threads</MudTh>
                                                            <MudTh Sortable="true" @onclick="() => device_information_cpu_history_table_sorted_column = (nameof(Device_Information_CPU_History_Entity.handles))" style="white-space: nowrap;">Handles</MudTh>
                                                            <MudTh Sortable="true" @onclick="() => device_information_cpu_history_table_sorted_column = (nameof(Device_Information_CPU_History_Entity.currentclockspeed))" style="white-space: nowrap;">Geschwindigkeit (MHz)</MudTh>
                                                            <MudTh Sortable="true" @onclick="() => device_information_cpu_history_table_sorted_column = (nameof(Device_Information_CPU_History_Entity.maxclockspeed))" style="white-space: nowrap;">Basisgeschwindigkeit (MHz)</MudTh>
                                                            <MudTh Sortable="true" @onclick="() => device_information_cpu_history_table_sorted_column = (nameof(Device_Information_CPU_History_Entity.cores))" style="white-space: nowrap;">Kerne</MudTh>
                                                            <MudTh Sortable="true" @onclick="() => device_information_cpu_history_table_sorted_column = (nameof(Device_Information_CPU_History_Entity.logical_processors))" style="white-space: nowrap;">Logische Prozessoren</MudTh>
                                                            <MudTh Sortable="true" @onclick="() => device_information_cpu_history_table_sorted_column = (nameof(Device_Information_CPU_History_Entity.sockets))" style="white-space: nowrap;">Sockets</MudTh>
                                                            <MudTh Sortable="true" @onclick="() => device_information_cpu_history_table_sorted_column = (nameof(Device_Information_CPU_History_Entity.socket_designation))" style="white-space: nowrap;">Socket Bezeichnung</MudTh>
                                                            <MudTh Sortable="true" @onclick="() => device_information_cpu_history_table_sorted_column = (nameof(Device_Information_CPU_History_Entity.virtualization))" style="white-space: nowrap;">Virtualisierung</MudTh>
                                                            <MudTh Sortable="true" @onclick="() => device_information_cpu_history_table_sorted_column = (nameof(Device_Information_CPU_History_Entity.l1_cache))" style="white-space: nowrap;">L1-Cache</MudTh>
                                                            <MudTh Sortable="true" @onclick="() => device_information_cpu_history_table_sorted_column = (nameof(Device_Information_CPU_History_Entity.l2_cache))" style="white-space: nowrap;">L2-Cache</MudTh>
                                                            <MudTh Sortable="true" @onclick="() => device_information_cpu_history_table_sorted_column = (nameof(Device_Information_CPU_History_Entity.l3_cache))" style="white-space: nowrap;">L3-Cache</MudTh>
                                                            <MudTh Sortable="true" @onclick="() => device_information_cpu_history_table_sorted_column = (nameof(Device_Information_CPU_History_Entity.processor_id))" style="white-space: nowrap;">Prozessor ID</MudTh>
                                                            <MudTh Sortable="true" @onclick="() => device_information_cpu_history_table_sorted_column = (nameof(Device_Information_CPU_History_Entity.revision))" style="white-space: nowrap;">Revision</MudTh>
                                                        </HeaderContent>
                                                        <RowTemplate Context="device_information_cpu_history_row">

                                                            <MudTd DataLabel="Datum" @onclick="() => Device_Information_CPU_History_RowClickHandler(device_information_cpu_history_row)" class="@Device_Information_CPU_History_GetRowClass(device_information_cpu_history_row)" style="white-space: nowrap;">
                                                                <span style="display: flex; align-items: center;">
                                                                    &nbsp;@device_information_cpu_history_row.date
                                                                </span>
                                                            </MudTd>

                                                            <MudTd DataLabel="Name" @onclick="() => Device_Information_CPU_History_RowClickHandler(device_information_cpu_history_row)" class="@Device_Information_CPU_History_GetRowClass(device_information_cpu_history_row)" style="white-space: nowrap;">
                                                                <span style="display: flex; align-items: center;">
                                                                    &nbsp;@device_information_cpu_history_row.name
                                                                </span>
                                                            </MudTd>

                                                            <MudTd DataLabel="Prozesse" @onclick="() => Device_Information_CPU_History_RowClickHandler(device_information_cpu_history_row)" class="@Device_Information_CPU_History_GetRowClass(device_information_cpu_history_row)" style="white-space: nowrap;">
                                                                <span style="display: flex; align-items: center;">
                                                                    &nbsp;@device_information_cpu_history_row.processes
                                                                </span>
                                                            </MudTd>

                                                            <MudTd DataLabel="Threads" @onclick="() => Device_Information_CPU_History_RowClickHandler(device_information_cpu_history_row)" class="@Device_Information_CPU_History_GetRowClass(device_information_cpu_history_row)" style="white-space: nowrap;">
                                                                <span style="display: flex; align-items: center;">
                                                                    &nbsp;@device_information_cpu_history_row.threads
                                                                </span>
                                                            </MudTd>

                                                            <MudTd DataLabel="Handles" @onclick="() => Device_Information_CPU_History_RowClickHandler(device_information_cpu_history_row)" class="@Device_Information_CPU_History_GetRowClass(device_information_cpu_history_row)" style="white-space: nowrap;">
                                                                <span style="display: flex; align-items: center;">
                                                                    &nbsp;@device_information_cpu_history_row.handles
                                                                </span>
                                                            </MudTd>

                                                            <MudTd DataLabel="Geschwindigkeit (MHz)" @onclick="() => Device_Information_CPU_History_RowClickHandler(device_information_cpu_history_row)" class="@Device_Information_CPU_History_GetRowClass(device_information_cpu_history_row)" style="white-space: nowrap;">
                                                                <span style="display: flex; align-items: center;">
                                                                    &nbsp;@device_information_cpu_history_row.currentclockspeed
                                                                </span>
                                                            </MudTd>

                                                            <MudTd DataLabel="Basisgeschwindigkeit (MHz)" @onclick="() => Device_Information_CPU_History_RowClickHandler(device_information_cpu_history_row)" class="@Device_Information_CPU_History_GetRowClass(device_information_cpu_history_row)" style="white-space: nowrap;">
                                                                <span style="display: flex; align-items: center;">
                                                                    &nbsp;@device_information_cpu_history_row.maxclockspeed
                                                                </span>
                                                            </MudTd>

                                                            <MudTd DataLabel="Kerne" @onclick="() => Device_Information_CPU_History_RowClickHandler(device_information_cpu_history_row)" class="@Device_Information_CPU_History_GetRowClass(device_information_cpu_history_row)" style="white-space: nowrap;">
                                                                <span style="display: flex; align-items: center;">
                                                                    &nbsp;@device_information_cpu_history_row.cores
                                                                </span>
                                                            </MudTd>

                                                            <MudTd DataLabel="Logische Prozessoren" @onclick="() => Device_Information_CPU_History_RowClickHandler(device_information_cpu_history_row)" class="@Device_Information_CPU_History_GetRowClass(device_information_cpu_history_row)" style="white-space: nowrap;">
                                                                <span style="display: flex; align-items: center;">
                                                                    &nbsp;@device_information_cpu_history_row.logical_processors
                                                                </span>
                                                            </MudTd>

                                                            <MudTd DataLabel="Sockets" @onclick="() => Device_Information_CPU_History_RowClickHandler(device_information_cpu_history_row)" class="@Device_Information_CPU_History_GetRowClass(device_information_cpu_history_row)" style="white-space: nowrap;">
                                                                <span style="display: flex; align-items: center;">
                                                                    &nbsp;@device_information_cpu_history_row.sockets
                                                                </span>
                                                            </MudTd>

                                                            <MudTd DataLabel="Socket Bezeichnung" @onclick="() => Device_Information_CPU_History_RowClickHandler(device_information_cpu_history_row)" class="@Device_Information_CPU_History_GetRowClass(device_information_cpu_history_row)" style="white-space: nowrap;">
                                                                <span style="display: flex; align-items: center;">
                                                                    &nbsp;@device_information_cpu_history_row.socket_designation
                                                                </span>
                                                            </MudTd>

                                                            <MudTd DataLabel="Virtualisierung" @onclick="() => Device_Information_CPU_History_RowClickHandler(device_information_cpu_history_row)" class="@Device_Information_CPU_History_GetRowClass(device_information_cpu_history_row)" style="white-space: nowrap;">
                                                                <span style="display: flex; align-items: center;">
                                                                    &nbsp;@device_information_cpu_history_row.virtualization
                                                                </span>
                                                            </MudTd>

                                                            <MudTd DataLabel="L1-Cache" @onclick="() => Device_Information_CPU_History_RowClickHandler(device_information_cpu_history_row)" class="@Device_Information_CPU_History_GetRowClass(device_information_cpu_history_row)" style="white-space: nowrap;">
                                                                <span style="display: flex; align-items: center;">
                                                                    &nbsp;@device_information_cpu_history_row.l1_cache
                                                                </span>
                                                            </MudTd>

                                                            <MudTd DataLabel="L2-Cache" @onclick="() => Device_Information_CPU_History_RowClickHandler(device_information_cpu_history_row)" class="@Device_Information_CPU_History_GetRowClass(device_information_cpu_history_row)" style="white-space: nowrap;">
                                                                <span style="display: flex; align-items: center;">
                                                                    &nbsp;@device_information_cpu_history_row.l2_cache
                                                                </span>
                                                            </MudTd>

                                                            <MudTd DataLabel="L3-Cache" @onclick="() => Device_Information_CPU_History_RowClickHandler(device_information_cpu_history_row)" class="@Device_Information_CPU_History_GetRowClass(device_information_cpu_history_row)" style="white-space: nowrap;">
                                                                <span style="display: flex; align-items: center;">
                                                                    &nbsp;@device_information_cpu_history_row.l3_cache
                                                                </span>
                                                            </MudTd>

                                                            <MudTd DataLabel="Prozessor ID" @onclick="() => Device_Information_CPU_History_RowClickHandler(device_information_cpu_history_row)" class="@Device_Information_CPU_History_GetRowClass(device_information_cpu_history_row)" style="white-space: nowrap;">
                                                                <span style="display: flex; align-items: center;">
                                                                    &nbsp;@device_information_cpu_history_row.processor_id
                                                                </span>
                                                            </MudTd>

                                                            <MudTd DataLabel="Revision" @onclick="() => Device_Information_CPU_History_RowClickHandler(device_information_cpu_history_row)" class="@Device_Information_CPU_History_GetRowClass(device_information_cpu_history_row)" style="white-space: nowrap;">
                                                                <span style="display: flex; align-items: center;">
                                                                    &nbsp;@device_information_cpu_history_row.revision
                                                                </span>
                                                            </MudTd>

                                                        </RowTemplate>
                                                        <PagerContent>
                                                            <MudTablePager PageSizeOptions="new int[] { 10, 25, 50, 100, 250, 500, int.MaxValue }" RowsPerPageString="Einträge pro Seite" />
                                                        </PagerContent>
                                                    </MudTable>
                                                </ChildContent>
                                            </MudExpansionPanel>

                                        </MudPaper>

                                        <MudPaper Class="mt-5">
                                            <MudText Class="ml-2 d-flex align-center" Typo="Typo.h6">Arbeitsspeicher</MudText>

                                            <MudTable FixedHeader="true" FixedFooter="true" Hover="true" Dense="true" Items="@ram_information_mysql_data">
                                                <HeaderContent>
                                                    <MudTh style="white-space: nowrap;">Name</MudTh>
                                                    <MudTh style="white-space: nowrap;">Verfügbar (MB)</MudTh>
                                                    <!-- <MudTh style="white-space: nowrap;">Zugesichert (GB)</MudTh> -->
                                                    <MudTh style="white-space: nowrap;">Im Cache (MB)</MudTh>
                                                    <MudTh style="white-space: nowrap;">Ausgelagerter Pool (MB)</MudTh>
                                                    <MudTh style="white-space: nowrap;">Nicht ausgelagerter Pool (MB)</MudTh>
                                                    <MudTh style="white-space: nowrap;">Geschwindigkeit (MHz)</MudTh>
                                                    <MudTh style="white-space: nowrap;">Steckplätze</MudTh>
                                                    <MudTh style="white-space: nowrap;">Steckplätze verwendet</MudTh>
                                                    <MudTh style="white-space: nowrap;">Formfaktor</MudTh>
                                                    <MudTh style="white-space: nowrap;">Für Hardware reserviert (MB)</MudTh>
                                                </HeaderContent>
                                                <RowTemplate Context="ram_information_row">

                                                    <MudTd DataLabel="Name" style="white-space: nowrap;">
                                                        <span style="display: flex; align-items: center;">
                                                            &nbsp;@ram_information_row.name
                                                        </span>
                                                    </MudTd>

                                                    <MudTd DataLabel="Verfügbar (MB)" style="white-space: nowrap;">
                                                        <span style="display: flex; align-items: center;">
                                                            &nbsp;@ram_information_row.available
                                                        </span>
                                                    </MudTd>

                                                    <!-- <MudTd DataLabel="Zugesichert (GB)" style="white-space: nowrap;">
                                                        <span style="display: flex; align-items: center;">
                                                            &nbsp;@ram_information_row.assured
                                                        </span>
                                                    </MudTd> -->

                                                    <MudTd DataLabel="Im Cache (MB)" style="white-space: nowrap;">
                                                        <span style="display: flex; align-items: center;">
                                                            &nbsp;@ram_information_row.cache
                                                        </span>
                                                    </MudTd>

                                                    <MudTd DataLabel="Ausgelagerter Pool (MB)" style="white-space: nowrap;">
                                                        <span style="display: flex; align-items: center;">
                                                            &nbsp;@ram_information_row.outsourced_pool
                                                        </span>
                                                    </MudTd>

                                                    <MudTd DataLabel="Nicht ausgelagerter Pool (MB)" style="white-space: nowrap;">
                                                        <span style="display: flex; align-items: center;">
                                                            &nbsp;@ram_information_row.not_outsourced_pool
                                                        </span>
                                                    </MudTd>

                                                    <MudTd DataLabel="Geschwindigkeit (MHz)" style="white-space: nowrap;">
                                                        <span style="display: flex; align-items: center;">
                                                            &nbsp;@ram_information_row.speed
                                                        </span>
                                                    </MudTd>

                                                    <MudTd DataLabel="Steckplätze" style="white-space: nowrap;">
                                                        <span style="display: flex; align-items: center;">
                                                            &nbsp;@ram_information_row.slots
                                                        </span>
                                                    </MudTd>

                                                    <MudTd DataLabel="Steckplätze verwendet" style="white-space: nowrap;">
                                                        <span style="display: flex; align-items: center;">
                                                            &nbsp;@ram_information_row.slots_used
                                                        </span>
                                                    </MudTd>

                                                    <MudTd DataLabel="Formfaktor" style="white-space: nowrap;">
                                                        <span style="display: flex; align-items: center;">
                                                            &nbsp;@ram_information_row.form_factor
                                                        </span>
                                                    </MudTd>

                                                    <MudTd DataLabel="Für Hardware reserviert (MB)" style="white-space: nowrap;">
                                                        <span style="display: flex; align-items: center;">
                                                            &nbsp;@ram_information_row.hardware_reserved
                                                        </span>
                                                    </MudTd>

                                                </RowTemplate>
                                            </MudTable>

                                            <MudExpansionPanel Class="mt-2 custom-expansion-panel">
                                                <TitleContent>
                                                    <div class="d-flex">
                                                        <MudIcon Icon="@Icons.Material.Filled.History" class="mr-3"></MudIcon>
                                                        <MudText>Verlauf</MudText>
                                                    </div>
                                                </TitleContent>

                                                <ChildContent>
                                                    <div style="display: flex; align-items: center;">
                                                        <MudDateRangePicker PickerVariant="PickerVariant.Dialog" Label="Zeitraum" @ref="ram_history_table_picker" @bind-DateRange="ram_history_table_dateRange" Style="max-width: 300px;">
                                                            <PickerActions Context="pickerActionsContext">
                                                                <MudButton Class="mr-auto align-self-start" OnClick="@(() => ram_history_table_picker.Clear())">Zurücksetzen</MudButton>
                                                                <MudButton OnClick="@(() => ram_history_table_picker.Close(false))">Abbrechen</MudButton>
                                                                <MudButton Color="Color.Primary" @onclick="async () => { await RAM_History_Table_Submit_Picker(); }">Bestätigen</MudButton>
                                                            </PickerActions>
                                                        </MudDateRangePicker>

                                                        <MudTooltip Text="Daten exportieren">
                                                            <MudIconButton Class="ml-2 mt-5" Icon="@Icons.Material.Filled.FileDownload" Variant="Variant.Filled" Size="Size.Small" Color="Color.Default" @onclick="Export_RAM_History_Table_Dialog"></MudIconButton>
                                                        </MudTooltip>
                                                    </div>

                                                    <MudTable Class="mt-2" Height="25vh" FixedHeader="true" FixedFooter="true" Hover="true" RowsPerPage="int.MaxValue" Dense="true" Items="@ram_history_mysql_data" Filter="new Func<RAM_History_Entity, bool>(RAM_History_Table_Filter_Func)">
                                                        <ToolBarContent>
                                                            <MudTextField Class="mt-0" @bind-Value="ram_history_table_search_string" Placeholder="Suche" Adornment="Adornment.Start" AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Medium"></MudTextField>
                                                        </ToolBarContent>
                                                        <HeaderContent>
                                                            <MudTh Sortable="true" @onclick="() => ram_history_table_sorted_column = (nameof(RAM_History_Entity.date))" style="white-space: nowrap;">Datum</MudTh>
                                                            <MudTh Sortable="true" @onclick="() => ram_history_table_sorted_column = (nameof(RAM_History_Entity.name))" style="white-space: nowrap;">Name</MudTh>
                                                            <MudTh Sortable="true" @onclick="() => ram_history_table_sorted_column = (nameof(RAM_History_Entity.available))" style="white-space: nowrap;">Verfügbar (MB)</MudTh>
                                                            <!--<MudTh Sortable="true" @onclick="() => ram_history_table_sorted_column = (nameof(RAM_History_Entity.assured))" style="white-space: nowrap;">Zugesichert (GB)</MudTh>-->
                                                            <MudTh Sortable="true" @onclick="() => ram_history_table_sorted_column = (nameof(RAM_History_Entity.cache))" style="white-space: nowrap;">Im Cache (MB)</MudTh>
                                                            <MudTh Sortable="true" @onclick="() => ram_history_table_sorted_column = (nameof(RAM_History_Entity.outsourced_pool))" style="white-space: nowrap;">Ausgelagerter Pool (MB)</MudTh>
                                                            <MudTh Sortable="true" @onclick="() => ram_history_table_sorted_column = (nameof(RAM_History_Entity.not_outsourced_pool))" style="white-space: nowrap;">Nicht ausgelagerter Pool (MB)</MudTh>
                                                            <MudTh Sortable="true" @onclick="() => ram_history_table_sorted_column = (nameof(RAM_History_Entity.speed))" style="white-space: nowrap;">Geschwindigkeit (MHz)</MudTh>
                                                            <MudTh Sortable="true" @onclick="() => ram_history_table_sorted_column = (nameof(RAM_History_Entity.slots))" style="white-space: nowrap;">Steckplätze</MudTh>
                                                            <MudTh Sortable="true" @onclick="() => ram_history_table_sorted_column = (nameof(RAM_History_Entity.slots_used))" style="white-space: nowrap;">Steckplätze verwendet</MudTh>
                                                            <MudTh Sortable="true" @onclick="() => ram_history_table_sorted_column = (nameof(RAM_History_Entity.form_factor))" style="white-space: nowrap;">Formfaktor</MudTh>
                                                            <MudTh Sortable="true" @onclick="() => ram_history_table_sorted_column = (nameof(RAM_History_Entity.hardware_reserved))" style="white-space: nowrap;">Für Hardware reserviert (MB)</MudTh>
                                                        </HeaderContent>

                                                        <RowTemplate Context="ram_history_row">

                                                            <MudTd DataLabel="Datum" @onclick="() => RAM_History_RowClickHandler(ram_history_row)" class="@RAM_History_GetRowClass(ram_history_row)" style="white-space: nowrap;">
                                                                <span style="display: flex; align-items: center;">
                                                                    &nbsp;@ram_history_row.date
                                                                </span>
                                                            </MudTd>

                                                            <MudTd DataLabel="Name" @onclick="() => RAM_History_RowClickHandler(ram_history_row)" class="@RAM_History_GetRowClass(ram_history_row)" style="white-space: nowrap;">
                                                                <span style="display: flex; align-items: center;">
                                                                    &nbsp;@ram_history_row.name
                                                                </span>
                                                            </MudTd>

                                                            <MudTd DataLabel="Verfügbar (MB)" @onclick="() => RAM_History_RowClickHandler(ram_history_row)" class="@RAM_History_GetRowClass(ram_history_row)" style="white-space: nowrap;">
                                                                <span style="display: flex; align-items: center;">
                                                                    &nbsp;@ram_history_row.available
                                                                </span>
                                                            </MudTd>

                                                            <!--<MudTd DataLabel="Zugesichert (GB)" @onclick="() => RAM_History_RowClickHandler(ram_history_row)" class="@RAM_History_GetRowClass(ram_history_row)" style="white-space: nowrap;">
                                                                <span style="display: flex; align-items: center;">
                                                                    &nbsp;@ram_history_row.assured
                                                                </span>
                                                            </MudTd>-->

                                                            <MudTd DataLabel="Im Cache (MB)" @onclick="() => RAM_History_RowClickHandler(ram_history_row)" class="@RAM_History_GetRowClass(ram_history_row)" style="white-space: nowrap;">
                                                                <span style="display: flex; align-items: center;">
                                                                    &nbsp;@ram_history_row.cache
                                                                </span>
                                                            </MudTd>

                                                            <MudTd DataLabel="Ausgelagerter Pool (MB)" @onclick="() => RAM_History_RowClickHandler(ram_history_row)" class="@RAM_History_GetRowClass(ram_history_row)" style="white-space: nowrap;">
                                                                <span style="display: flex; align-items: center;">
                                                                    &nbsp;@ram_history_row.outsourced_pool
                                                                </span>
                                                            </MudTd>

                                                            <MudTd DataLabel="Nicht ausgelagerter Pool (MB)" @onclick="() => RAM_History_RowClickHandler(ram_history_row)" class="@RAM_History_GetRowClass(ram_history_row)" style="white-space: nowrap;">
                                                                <span style="display: flex; align-items: center;">
                                                                    &nbsp;@ram_history_row.not_outsourced_pool
                                                                </span>
                                                            </MudTd>

                                                            <MudTd DataLabel="Geschwindigkeit (MHz)" @onclick="() => RAM_History_RowClickHandler(ram_history_row)" class="@RAM_History_GetRowClass(ram_history_row)" style="white-space: nowrap;">
                                                                <span style="display: flex; align-items: center;">
                                                                    &nbsp;@ram_history_row.speed
                                                                </span>
                                                            </MudTd>

                                                            <MudTd DataLabel="Steckplätze" @onclick="() => RAM_History_RowClickHandler(ram_history_row)" class="@RAM_History_GetRowClass(ram_history_row)" style="white-space: nowrap;">
                                                                <span style="display: flex; align-items: center;">
                                                                    &nbsp;@ram_history_row.slots
                                                                </span>
                                                            </MudTd>

                                                            <MudTd DataLabel="Steckplätze verwendet" @onclick="() => RAM_History_RowClickHandler(ram_history_row)" class="@RAM_History_GetRowClass(ram_history_row)" style="white-space: nowrap;">
                                                                <span style="display: flex; align-items: center;">
                                                                    &nbsp;@ram_history_row.slots_used
                                                                </span>
                                                            </MudTd>

                                                            <MudTd DataLabel="Formfaktor" @onclick="() => RAM_History_RowClickHandler(ram_history_row)" class="@RAM_History_GetRowClass(ram_history_row)" style="white-space: nowrap;">
                                                                <span style="display: flex; align-items: center;">
                                                                    &nbsp;@ram_history_row.form_factor
                                                                </span>
                                                            </MudTd>

                                                            <MudTd DataLabel="Für Hardware reserviert (MB)" @onclick="() => RAM_History_RowClickHandler(ram_history_row)" class="@RAM_History_GetRowClass(ram_history_row)" style="white-space: nowrap;">
                                                                <span style="display: flex; align-items: center;">
                                                                    &nbsp;@ram_history_row.hardware_reserved
                                                                </span>
                                                            </MudTd>


                                                        </RowTemplate>
                                                        <PagerContent>
                                                            <MudTablePager PageSizeOptions="new int[] { 10, 25, 50, 100, 250, 500, int.MaxValue }" RowsPerPageString="Einträge pro Seite" />
                                                        </PagerContent>
                                                    </MudTable>
                                                </ChildContent>
                                            </MudExpansionPanel>
                                        </MudPaper>

                                        <MudPaper Class="mt-5">
                                            <MudText Class="ml-2 d-flex align-center" Typo="Typo.h6">Netzwerk</MudText>

                                            <MudTable FixedHeader="true" FixedFooter="true" Hover="true" Dense="true" Items="@network_information_mysql_data">
                                                <HeaderContent>
                                                    <MudTh style="white-space: nowrap;">Name</MudTh>
                                                    <MudTh style="white-space: nowrap;">Beschreibung</MudTh>
                                                    <MudTh style="white-space: nowrap;">Verbindungstyp</MudTh>
                                                    <MudTh style="white-space: nowrap;">Link-Geschwindigkeit (MBit/s)</MudTh>
                                                    <MudTh style="white-space: nowrap;">Service</MudTh>
                                                    <MudTh style="white-space: nowrap;">DNS Domain</MudTh>
                                                    <MudTh style="white-space: nowrap;">DNS Hostname</MudTh>
                                                    <MudTh style="white-space: nowrap;">DHCP aktiviert</MudTh>
                                                    <MudTh style="white-space: nowrap;">DHCP Server</MudTh>
                                                    <MudTh style="white-space: nowrap;">IPv4-Adresse</MudTh>
                                                    <MudTh style="white-space: nowrap;">IPv6-Adresse</MudTh>
                                                    <MudTh style="white-space: nowrap;">Subnet Maske</MudTh>
                                                    <MudTh style="white-space: nowrap;">MAC-Adresse</MudTh>
                                                    <MudTh style="white-space: nowrap;">Senden (KBit/s)</MudTh>
                                                    <MudTh style="white-space: nowrap;">Empfangen (KBit/s)</MudTh>
                                                </HeaderContent>
                                                <RowTemplate Context="ram_information_row">

                                                    <MudTd DataLabel="Name" style="white-space: nowrap;">
                                                        <span style="display: flex; align-items: center;">
                                                            &nbsp;@ram_information_row.name
                                                        </span>
                                                    </MudTd>

                                                    <MudTd DataLabel="Beschreibung" style="white-space: nowrap;">
                                                        <span style="display: flex; align-items: center;">
                                                            &nbsp;@ram_information_row.description
                                                        </span>
                                                    </MudTd>

                                                    <MudTd DataLabel="Verbindungstyp" style="white-space: nowrap;">
                                                        <span style="display: flex; align-items: center;">
                                                            &nbsp;@ram_information_row.type
                                                        </span>
                                                    </MudTd>

                                                    <MudTd DataLabel="Link-Geschwindigkeit (MBit/s)" style="white-space: nowrap;">
                                                        <span style="display: flex; align-items: center;">
                                                            &nbsp;@ram_information_row.link_speed
                                                        </span>
                                                    </MudTd>

                                                    <MudTd DataLabel="Service" style="white-space: nowrap;">
                                                        <span style="display: flex; align-items: center;">
                                                            &nbsp;@ram_information_row.service_name
                                                        </span>
                                                    </MudTd>

                                                    <MudTd DataLabel="DNS Domain" style="white-space: nowrap;">
                                                        <span style="display: flex; align-items: center;">
                                                            &nbsp;@ram_information_row.dns_domain
                                                        </span>
                                                    </MudTd>

                                                    <MudTd DataLabel="DNS Hostname" style="white-space: nowrap;">
                                                        <span style="display: flex; align-items: center;">
                                                            &nbsp;@ram_information_row.dns_hostname
                                                        </span>
                                                    </MudTd>

                                                    <MudTd DataLabel="DHCP aktiviert" style="white-space: nowrap;">
                                                        <span style="display: flex; align-items: center;">
                                                            &nbsp;@ram_information_row.dhcp_enabled
                                                        </span>
                                                    </MudTd>

                                                    <MudTd DataLabel="DHCP Server" style="white-space: nowrap;">
                                                        <span style="display: flex; align-items: center;">
                                                            &nbsp;@ram_information_row.dhcp_server
                                                        </span>
                                                    </MudTd>

                                                    <MudTd DataLabel="IPv4-Adresse" style="white-space: nowrap;">
                                                        <span style="display: flex; align-items: center;">
                                                            &nbsp;@ram_information_row.ipv4_address
                                                        </span>
                                                    </MudTd>

                                                    <MudTd DataLabel="IPv6-Adresse" style="white-space: nowrap;">
                                                        <span style="display: flex; align-items: center;">
                                                            &nbsp;@ram_information_row.ipv6_address
                                                        </span>
                                                    </MudTd>

                                                    <MudTd DataLabel="Subnet Maske" style="white-space: nowrap;">
                                                        <span style="display: flex; align-items: center;">
                                                            &nbsp;@ram_information_row.subnet_mask
                                                        </span>
                                                    </MudTd>

                                                    <MudTd DataLabel="MAC-Adresse" style="white-space: nowrap;">
                                                        <span style="display: flex; align-items: center;">
                                                            &nbsp;@ram_information_row.mac_address
                                                        </span>
                                                    </MudTd>

                                                    <MudTd DataLabel="Senden (KBit/s)" style="white-space: nowrap;">
                                                        <span style="display: flex; align-items: center;">
                                                            &nbsp;@ram_information_row.sending
                                                        </span>
                                                    </MudTd>

                                                    <MudTd DataLabel="Empfangen (KBit/s)" style="white-space: nowrap;">
                                                        <span style="display: flex; align-items: center;">
                                                            &nbsp;@ram_information_row.receive
                                                        </span>
                                                    </MudTd>

                                                </RowTemplate>
                                            </MudTable>

                                            <MudExpansionPanel Class="mt-2 custom-expansion-panel">
                                                <TitleContent>
                                                    <div class="d-flex">
                                                        <MudIcon Icon="@Icons.Material.Filled.History" class="mr-3"></MudIcon>
                                                        <MudText>Verlauf</MudText>
                                                    </div>
                                                </TitleContent>

                                                <ChildContent>
                                                    <div style="display: flex; align-items: center;">
                                                        <MudDateRangePicker PickerVariant="PickerVariant.Dialog" Label="Zeitraum" @ref="device_information_network_adapters_history_table_picker" @bind-DateRange="device_information_network_adapters_history_table_dateRange" Style="max-width: 300px;">
                                                            <PickerActions Context="pickerActionsContext">
                                                                <MudButton Class="mr-auto align-self-start" OnClick="@(() => device_information_network_adapters_history_table_picker.Clear())">Zurücksetzen</MudButton>
                                                                <MudButton OnClick="@(() => device_information_network_adapters_history_table_picker.Close(false))">Abbrechen</MudButton>
                                                                <MudButton Color="Color.Primary" @onclick="async () => { await Device_Information_Network_Adapters_History_Table_Submit_Picker(); }">Bestätigen</MudButton>
                                                            </PickerActions>
                                                        </MudDateRangePicker>

                                                        <MudTooltip Text="Daten exportieren">
                                                            <MudIconButton Class="ml-2 mt-5" Icon="@Icons.Material.Filled.FileDownload" Variant="Variant.Filled" Size="Size.Small" Color="Color.Default" @onclick="Export_Network_Adapters_History_Table_Dialog"></MudIconButton>
                                                        </MudTooltip>
                                                    </div>

                                                    <MudTable Class="mt-2" Height="25vh" FixedHeader="true" FixedFooter="true" Hover="true" RowsPerPage="int.MaxValue" Dense="true" Items="@device_information_network_adapters_history_mysql_data" GroupBy="@device_information_network_adapters_history_groupDefinition" Filter="new Func<Device_Information_Network_Adapters_History_Entity, bool>(Device_Information_Network_Adapters_History_Table_Filter_Func)">
                                                        <ToolBarContent>
                                                            <MudTextField Class="mt-0" @bind-Value="device_information_network_adapters_history_table_search_string" Placeholder="Suche" Adornment="Adornment.Start" AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Medium"></MudTextField>
                                                        </ToolBarContent>
                                                        <HeaderContent>
                                                            <MudTh Sortable="true" @onclick="() => device_information_network_adapters_history_table_sorted_column = (nameof(Device_Information_Network_Adapters_History_Entity.date))" style="white-space: nowrap;">Datum</MudTh>
                                                            <MudTh Sortable="true" @onclick="() => device_information_network_adapters_history_table_sorted_column = (nameof(Device_Information_Network_Adapters_History_Entity.name))" style="white-space: nowrap;">Name</MudTh>
                                                            <MudTh Sortable="true" @onclick="() => device_information_network_adapters_history_table_sorted_column = (nameof(Device_Information_Network_Adapters_History_Entity.description))" style="white-space: nowrap;">Beschreibung</MudTh>
                                                            <MudTh Sortable="true" @onclick="() => device_information_network_adapters_history_table_sorted_column = (nameof(Device_Information_Network_Adapters_History_Entity.type))" style="white-space: nowrap;">Verbindungstyp</MudTh>
                                                            <MudTh Sortable="true" @onclick="() => device_information_network_adapters_history_table_sorted_column = (nameof(Device_Information_Network_Adapters_History_Entity.link_speed))" style="white-space: nowrap;">Link-Geschwindigkeit (MBit/s)</MudTh>
                                                            <MudTh Sortable="true" @onclick="() => device_information_network_adapters_history_table_sorted_column = (nameof(Device_Information_Network_Adapters_History_Entity.service_name))" style="white-space: nowrap;">Service</MudTh>
                                                            <MudTh Sortable="true" @onclick="() => device_information_network_adapters_history_table_sorted_column = (nameof(Device_Information_Network_Adapters_History_Entity.dns_domain))" style="white-space: nowrap;">DNS Domain</MudTh>
                                                            <MudTh Sortable="true" @onclick="() => device_information_network_adapters_history_table_sorted_column = (nameof(Device_Information_Network_Adapters_History_Entity.dns_hostname))" style="white-space: nowrap;">DNS Hostname</MudTh>
                                                            <MudTh Sortable="true" @onclick="() => device_information_network_adapters_history_table_sorted_column = (nameof(Device_Information_Network_Adapters_History_Entity.dhcp_enabled))" style="white-space: nowrap;">DHCP aktiviert</MudTh>
                                                            <MudTh Sortable="true" @onclick="() => device_information_network_adapters_history_table_sorted_column = (nameof(Device_Information_Network_Adapters_History_Entity.dhcp_server))" style="white-space: nowrap;">DHCP Server</MudTh>
                                                            <MudTh Sortable="true" @onclick="() => device_information_network_adapters_history_table_sorted_column = (nameof(Device_Information_Network_Adapters_History_Entity.ipv4_address))" style="white-space: nowrap;">IPv4-Adresse</MudTh>
                                                            <MudTh Sortable="true" @onclick="() => device_information_network_adapters_history_table_sorted_column = (nameof(Device_Information_Network_Adapters_History_Entity.ipv6_address))" style="white-space: nowrap;">IPv6-Adresse</MudTh>
                                                            <MudTh Sortable="true" @onclick="() => device_information_network_adapters_history_table_sorted_column = (nameof(Device_Information_Network_Adapters_History_Entity.subnet_mask))" style="white-space: nowrap;">Subnet Maske</MudTh>
                                                            <MudTh Sortable="true" @onclick="() => device_information_network_adapters_history_table_sorted_column = (nameof(Device_Information_Network_Adapters_History_Entity.mac_address))" style="white-space: nowrap;">MAC-Adresse</MudTh>
                                                            <MudTh Sortable="true" @onclick="() => device_information_network_adapters_history_table_sorted_column = (nameof(Device_Information_Network_Adapters_History_Entity.sending))" style="white-space: nowrap;">Senden (KBit/s)</MudTh>
                                                            <MudTh Sortable="true" @onclick="() => device_information_network_adapters_history_table_sorted_column = (nameof(Device_Information_Network_Adapters_History_Entity.receive))" style="white-space: nowrap;">Empfangen (KBit/s)</MudTh>
                                                        </HeaderContent>
                                                        <GroupHeaderTemplate Context="groupContext">
    	                                                    <MudTh Class="mud-table-cell-custom-group" colspan="6">@($"{groupContext.GroupName}: {groupContext.Key}") </MudTh>
                                                        </GroupHeaderTemplate>

                                                        <RowTemplate Context="network_adapters_history_row">

                                                            <MudTd DataLabel="Datum" @onclick="() => Device_Information_Network_Adapters_History_RowClickHandler(network_adapters_history_row)" class="@Device_Information_Network_Adapters_History_GetRowClass(network_adapters_history_row)" style="white-space: nowrap;">
                                                                <span style="display: flex; align-items: center;">
                                                                    &nbsp;@network_adapters_history_row.date
                                                                </span>
                                                            </MudTd>

                                                            <MudTd DataLabel="Name" @onclick="() => Device_Information_Network_Adapters_History_RowClickHandler(network_adapters_history_row)" class="@Device_Information_Network_Adapters_History_GetRowClass(network_adapters_history_row)" style="white-space: nowrap;">
                                                                <span style="display: flex; align-items: center;">
                                                                    &nbsp;@network_adapters_history_row.name
                                                                </span>
                                                            </MudTd>

                                                            <MudTd DataLabel="Beschreibung" @onclick="() => Device_Information_Network_Adapters_History_RowClickHandler(network_adapters_history_row)" class="@Device_Information_Network_Adapters_History_GetRowClass(network_adapters_history_row)" style="white-space: nowrap;">
                                                                <span style="display: flex; align-items: center;">
                                                                    &nbsp;@network_adapters_history_row.description
                                                                </span>
                                                            </MudTd>

                                                            <MudTd DataLabel="Verbindungstyp" @onclick="() => Device_Information_Network_Adapters_History_RowClickHandler(network_adapters_history_row)" class="@Device_Information_Network_Adapters_History_GetRowClass(network_adapters_history_row)" style="white-space: nowrap;">
                                                                <span style="display: flex; align-items: center;">
                                                                    &nbsp;@network_adapters_history_row.type
                                                                </span>
                                                            </MudTd>

                                                            <MudTd DataLabel="Link-Geschwindigkeit MBit/s" @onclick="() => Device_Information_Network_Adapters_History_RowClickHandler(network_adapters_history_row)" class="@Device_Information_Network_Adapters_History_GetRowClass(network_adapters_history_row)" style="white-space: nowrap;">
                                                                <span style="display: flex; align-items: center;">
                                                                    &nbsp;@network_adapters_history_row.link_speed
                                                                </span>
                                                            </MudTd>

                                                            <MudTd DataLabel="Service" @onclick="() => Device_Information_Network_Adapters_History_RowClickHandler(network_adapters_history_row)" class="@Device_Information_Network_Adapters_History_GetRowClass(network_adapters_history_row)" style="white-space: nowrap;">
                                                                <span style="display: flex; align-items: center;">
                                                                    &nbsp;@network_adapters_history_row.service_name
                                                                </span>
                                                            </MudTd>

                                                            <MudTd DataLabel="DNS Domain" @onclick="() => Device_Information_Network_Adapters_History_RowClickHandler(network_adapters_history_row)" class="@Device_Information_Network_Adapters_History_GetRowClass(network_adapters_history_row)" style="white-space: nowrap;">
                                                                <span style="display: flex; align-items: center;">
                                                                    &nbsp;@network_adapters_history_row.dns_domain
                                                                </span>
                                                            </MudTd>

                                                            <MudTd DataLabel="DNS Hostname" @onclick="() => Device_Information_Network_Adapters_History_RowClickHandler(network_adapters_history_row)" class="@Device_Information_Network_Adapters_History_GetRowClass(network_adapters_history_row)" style="white-space: nowrap;">
                                                                <span style="display: flex; align-items: center;">
                                                                    &nbsp;@network_adapters_history_row.dns_hostname
                                                                </span>
                                                            </MudTd>

                                                            <MudTd DataLabel="DHCP aktiviert" @onclick="() => Device_Information_Network_Adapters_History_RowClickHandler(network_adapters_history_row)" class="@Device_Information_Network_Adapters_History_GetRowClass(network_adapters_history_row)" style="white-space: nowrap;">
                                                                <span style="display: flex; align-items: center;">
                                                                    &nbsp;@network_adapters_history_row.dhcp_enabled
                                                                </span>
                                                            </MudTd>

                                                            <MudTd DataLabel="DHCP Server" @onclick="() => Device_Information_Network_Adapters_History_RowClickHandler(network_adapters_history_row)" class="@Device_Information_Network_Adapters_History_GetRowClass(network_adapters_history_row)" style="white-space: nowrap;">
                                                                <span style="display: flex; align-items: center;">
                                                                    &nbsp;@network_adapters_history_row.dhcp_server
                                                                </span>
                                                            </MudTd>

                                                            <MudTd DataLabel="IPv4-Adresse" @onclick="() => Device_Information_Network_Adapters_History_RowClickHandler(network_adapters_history_row)" class="@Device_Information_Network_Adapters_History_GetRowClass(network_adapters_history_row)" style="white-space: nowrap;">
                                                                <span style="display: flex; align-items: center;">
                                                                    &nbsp;@network_adapters_history_row.ipv4_address
                                                                </span>
                                                            </MudTd>

                                                            <MudTd DataLabel="IPv6-Adresse" @onclick="() => Device_Information_Network_Adapters_History_RowClickHandler(network_adapters_history_row)" class="@Device_Information_Network_Adapters_History_GetRowClass(network_adapters_history_row)" style="white-space: nowrap;">
                                                                <span style="display: flex; align-items: center;">
                                                                    &nbsp;@network_adapters_history_row.ipv6_address
                                                                </span>
                                                            </MudTd>

                                                            <MudTd DataLabel="Subnet Maske" @onclick="() => Device_Information_Network_Adapters_History_RowClickHandler(network_adapters_history_row)" class="@Device_Information_Network_Adapters_History_GetRowClass(network_adapters_history_row)" style="white-space: nowrap;">
                                                                <span style="display: flex; align-items: center;">
                                                                    &nbsp;@network_adapters_history_row.subnet_mask
                                                                </span>
                                                            </MudTd>

                                                            <MudTd DataLabel="MAC-Adresse" @onclick="() => Device_Information_Network_Adapters_History_RowClickHandler(network_adapters_history_row)" class="@Device_Information_Network_Adapters_History_GetRowClass(network_adapters_history_row)" style="white-space: nowrap;">
                                                                <span style="display: flex; align-items: center;">
                                                                    &nbsp;@network_adapters_history_row.mac_address
                                                                </span>
                                                            </MudTd>

                                                            <MudTd DataLabel="Senden (KBit/s)" @onclick="() => Device_Information_Network_Adapters_History_RowClickHandler(network_adapters_history_row)" class="@Device_Information_Network_Adapters_History_GetRowClass(network_adapters_history_row)" style="white-space: nowrap;">
                                                                <span style="display: flex; align-items: center;">
                                                                    &nbsp;@network_adapters_history_row.sending
                                                                </span>
                                                            </MudTd>

                                                            <MudTd DataLabel="Empfangen (KBit/s)" @onclick="() => Device_Information_Network_Adapters_History_RowClickHandler(network_adapters_history_row)" class="@Device_Information_Network_Adapters_History_GetRowClass(network_adapters_history_row)" style="white-space: nowrap;">
                                                                <span style="display: flex; align-items: center;">
                                                                    &nbsp;@network_adapters_history_row.receive
                                                                </span>
                                                            </MudTd>

                                                        </RowTemplate>
                                                        <PagerContent>
                                                            <MudTablePager PageSizeOptions="new int[] { 10, 25, 50, 100, 250, 500, int.MaxValue }" RowsPerPageString="Einträge pro Seite" />
                                                        </PagerContent>
                                                    </MudTable>
                                                </ChildContent>
                                            </MudExpansionPanel>
                                        </MudPaper>

                                        <MudPaper Class="mt-5">
                                            <MudText Class="ml-2" Typo="Typo.h6">Laufwerke</MudText>

                                            @{
                                                try
                                                {
                                                    // Deserialisierung des JSON-Arrays in dynamische Typen
                                                    JsonArray disksArray = JsonNode.Parse(disks).AsArray();

                                                    <div style="display: flex; flex-wrap: wrap; gap: 90px; justify-content: flex-start; align-items: center;">
                                                        @foreach (var disks in disksArray)
                                                        {
                                                            try
                                                            {
                                                                string letter = disks["letter"].ToString();
                                                                string label = disks["label"].ToString();
                                                                string capacity = disks["capacity"].ToString();
                                                                string usage = disks["usage"].ToString();
                                                                string model = disks["model"].ToString();
                                                                string firmware_revision = disks["firmware_revision"].ToString();
                                                                string serial_number = disks["serial_number"].ToString();
                                                                string interface_type = disks["interface_type"].ToString();
                                                                string drive_type = disks["drive_type"].ToString();
                                                                string drive_format = disks["drive_format"].ToString();
                                                                string drive_ready = disks["drive_ready"].ToString();

                                                                double capacityGB = Math.Round(double.Parse(capacity), 2);
                                                                double usedSpaceGB = Math.Round((double.Parse(capacity) * double.Parse(usage)) / 100, 2);
                                                                double freeSpaceGB = Math.Round(double.Parse(capacity) - usedSpaceGB, 2);

                                                                usedSpaceGB = Math.Truncate(usedSpaceGB * 100) / 100;
                                                                freeSpaceGB = Math.Truncate(freeSpaceGB * 100) / 100;

                                                                double[] data = { freeSpaceGB, usedSpaceGB };

                                                                string[] driveLabels = { $"Frei: {freeSpaceGB} (GB)", $"Belegt: {usedSpaceGB} (GB)" };

                                                                <div class="ml-2">
                                                                    <MudText Typo="Typo.body1">&nbsp;Modell: @model</MudText>
                                                                    <MudText Typo="Typo.body1">&nbsp;Firmware Revision: @firmware_revision</MudText>
                                                                    <MudText Typo="Typo.body1">&nbsp;Seriennummer: @serial_number</MudText>
                                                                    <MudText Typo="Typo.body1">&nbsp;Interface: @interface_type</MudText>
                                                                    <MudText Typo="Typo.body1">&nbsp;Typ: @drive_type</MudText>
                                                                    <MudText Typo="Typo.body1">&nbsp;Dateisystem: @drive_format</MudText>
                                                                    <MudText Typo="Typo.body1">&nbsp;Bereit: @drive_ready</MudText>

                                                                    <MudChart ChartType="MudBlazor.ChartType.Donut" Width="300px" Height="300px" InputData="@data" InputLabels="@driveLabels" ChartOptions="drive_chart_options">
                                                                        <CustomGraphics>
                                                                            <text class="donut-inner-text" x="50%" y="30%" dominant-baseline="middle" text-anchor="middle" fill="black" font-family="Helvetica" font-size="2">@letter</text>
                                                                            <text class="donut-inner-text" x="50%" y="40%" dominant-baseline="middle" text-anchor="middle" fill="black" font-family="Helvetica" font-size="2">(@label)</text>
                                                                            <text class="donut-inner-text" x="50%" y="50%" dominant-baseline="middle" text-anchor="middle" fill="black" font-family="Helvetica" font-size="3">@capacityGB.ToString() (GB)</text>
                                                                            <text class="donut-inner-text" x="50%" y="60%" dominant-baseline="middle" text-anchor="middle" fill="black" font-family="Helvetica" font-size="2">Belegt: @usage (%)</text>
                                                                        </CustomGraphics>
                                                                    </MudChart>
                                                                </div>
                                                            }
                                                            catch (Exception ex)
                                                            {
                                                                Logging.Handler.Error("/devices -> Table", "Display disks", ex.Message);
                                                            }
                                                        }
                                                    </div>
                                                }
                                                catch (Exception ex)
                                                {
                                                    Logging.Handler.Error("/devices -> Table", "Display disks", ex.Message);
                                                }
                                            }

                                            <MudExpansionPanel Class="mt-2 custom-expansion-panel">
                                                <TitleContent>
                                                    <div class="d-flex">
                                                        <MudIcon Icon="@Icons.Material.Filled.History" class="mr-3"></MudIcon>
                                                        <MudText>Verlauf</MudText>
                                                    </div>
                                                </TitleContent>

                                                <ChildContent>
                                                    <div style="display: flex; align-items: center;">
                                                        <MudDateRangePicker PickerVariant="PickerVariant.Dialog" Label="Zeitraum" @ref="device_information_disks_history_table_picker" @bind-DateRange="device_information_disks_history_table_dateRange" Style="max-width: 300px;">
                                                            <PickerActions Context="pickerActionsContext">
                                                                <MudButton Class="mr-auto align-self-start" OnClick="@(() => device_information_disks_history_table_picker.Clear())">Zurücksetzen</MudButton>
                                                                <MudButton OnClick="@(() => device_information_disks_history_table_picker.Close(false))">Abbrechen</MudButton>
                                                                <MudButton Color="Color.Primary" @onclick="async () => { await Device_Information_Disks_History_Table_Submit_Picker(); }">Bestätigen</MudButton>
                                                            </PickerActions>
                                                        </MudDateRangePicker>

                                                        <MudTooltip Text="Daten exportieren">
                                                            <MudIconButton Class="ml-2 mt-5" Icon="@Icons.Material.Filled.FileDownload" Variant="Variant.Filled" Size="Size.Small" Color="Color.Default" @onclick="Export_Disks_History_Table_Dialog"></MudIconButton>
                                                        </MudTooltip>
                                                    </div>

                                                    <MudTable Class="mt-2" Height="25vh" FixedHeader="true" FixedFooter="true" Hover="true" RowsPerPage="int.MaxValue" Dense="true" Items="@device_information_disks_history_mysql_data" GroupBy="@device_information_disks_history_groupDefinition" Filter="new Func<Device_Information_Disks_History_Entity, bool>(Device_Information_Disks_History_Table_Filter_Func)">
                                                        <ToolBarContent>
                                                            <MudTextField Class="mt-0" @bind-Value="device_information_disks_history_table_search_string" Placeholder="Suche" Adornment="Adornment.Start" AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Medium"></MudTextField>
                                                        </ToolBarContent>
                                                        <HeaderContent>
                                                            <MudTh Sortable="true" @onclick="() => device_information_disks_history_table_sorted_column = (nameof(Device_Information_Disks_History_Entity.date))" style="white-space: nowrap;">Datum</MudTh>
                                                            <MudTh Sortable="true" @onclick="() => device_information_disks_history_table_sorted_column = (nameof(Device_Information_Disks_History_Entity.letter))" style="white-space: nowrap;">Buchstabe</MudTh>
                                                            <MudTh Sortable="true" @onclick="() => device_information_disks_history_table_sorted_column = (nameof(Device_Information_Disks_History_Entity.label))" style="white-space: nowrap;">Label</MudTh>
                                                            <MudTh Sortable="true" @onclick="() => device_information_disks_history_table_sorted_column = (nameof(Device_Information_Disks_History_Entity.model))" style="white-space: nowrap;">Modell</MudTh>
                                                            <MudTh Sortable="true" @onclick="() => device_information_disks_history_table_sorted_column = (nameof(Device_Information_Disks_History_Entity.firmware_revision))" style="white-space: nowrap;">Firmware Revision</MudTh>
                                                            <MudTh Sortable="true" @onclick="() => device_information_disks_history_table_sorted_column = (nameof(Device_Information_Disks_History_Entity.serial_number))" style="white-space: nowrap;">Seriennummer</MudTh>
                                                            <MudTh Sortable="true" @onclick="() => device_information_disks_history_table_sorted_column = (nameof(Device_Information_Disks_History_Entity.interface_type))" style="white-space: nowrap;">Interface</MudTh>
                                                            <MudTh Sortable="true" @onclick="() => device_information_disks_history_table_sorted_column = (nameof(Device_Information_Disks_History_Entity.drive_type))" style="white-space: nowrap;">Typ</MudTh>
                                                            <MudTh Sortable="true" @onclick="() => device_information_disks_history_table_sorted_column = (nameof(Device_Information_Disks_History_Entity.drive_format))" style="white-space: nowrap;">Dateisystem</MudTh>
                                                            <MudTh Sortable="true" @onclick="() => device_information_disks_history_table_sorted_column = (nameof(Device_Information_Disks_History_Entity.drive_ready))" style="white-space: nowrap;">Bereit</MudTh>
                                                            <MudTh Sortable="true" @onclick="() => device_information_disks_history_table_sorted_column = (nameof(Device_Information_Disks_History_Entity.capacity))" style="white-space: nowrap;">Kapazität (GB)</MudTh>
                                                            <MudTh Sortable="true" @onclick="() => device_information_disks_history_table_sorted_column = (nameof(Device_Information_Disks_History_Entity.usage))" style="white-space: nowrap;">Belegt (%)</MudTh>
                                                            <MudTh Sortable="true" @onclick="() => device_information_disks_history_table_sorted_column = (nameof(Device_Information_Disks_History_Entity.status))" style="white-space: nowrap;">Status</MudTh>
                                                        </HeaderContent>
                                                        <GroupHeaderTemplate Context="groupContext">
                                                            <MudTh Class="mud-table-cell-custom-group" colspan="6">@($"{groupContext.GroupName}: {groupContext.Key}") </MudTh>
                                                        </GroupHeaderTemplate>
                                                        <RowTemplate Context="device_information_disks_history_row">

                                                            <MudTd DataLabel="Datum" @onclick="() => Device_Information_Disks_History_RowClickHandler(device_information_disks_history_row)" class="@Device_Information_Disks_History_GetRowClass(device_information_disks_history_row)" style="white-space: nowrap;">
                                                                <span style="display: flex; align-items: center;">
                                                                    &nbsp;@device_information_disks_history_row.date
                                                                </span>
                                                            </MudTd>
                                                            <MudTd DataLabel="Buchstabe" @onclick="() => Device_Information_Disks_History_RowClickHandler(device_information_disks_history_row)" class="@Device_Information_Disks_History_GetRowClass(device_information_disks_history_row)" style="white-space: nowrap;">
                                                                <span style="display: flex; align-items: center;">
                                                                    &nbsp;@device_information_disks_history_row.letter
                                                                </span>
                                                            </MudTd>
                                                            <MudTd DataLabel="Label" @onclick="() => Device_Information_Disks_History_RowClickHandler(device_information_disks_history_row)" class="@Device_Information_Disks_History_GetRowClass(device_information_disks_history_row)" style="white-space: nowrap;">
                                                                <span style="display: flex; align-items: center;">
                                                                    &nbsp;@device_information_disks_history_row.label
                                                                </span>
                                                            </MudTd>
                                                            <MudTd DataLabel="Modell" @onclick="() => Device_Information_Disks_History_RowClickHandler(device_information_disks_history_row)" class="@Device_Information_Disks_History_GetRowClass(device_information_disks_history_row)" style="white-space: nowrap;">
                                                                <span style="display: flex; align-items: center;">
                                                                    &nbsp;@device_information_disks_history_row.model
                                                                </span>
                                                            </MudTd>
                                                            <MudTd DataLabel="Firmware Revision" @onclick="() => Device_Information_Disks_History_RowClickHandler(device_information_disks_history_row)" class="@Device_Information_Disks_History_GetRowClass(device_information_disks_history_row)" style="white-space: nowrap;">
                                                                <span style="display: flex; align-items: center;">
                                                                    &nbsp;@device_information_disks_history_row.firmware_revision
                                                                </span>
                                                            </MudTd>

                                                            <MudTd DataLabel="Seriennummer" @onclick="() => Device_Information_Disks_History_RowClickHandler(device_information_disks_history_row)" class="@Device_Information_Disks_History_GetRowClass(device_information_disks_history_row)" style="white-space: nowrap;">
                                                                <span style="display: flex; align-items: center;">
                                                                    &nbsp;@device_information_disks_history_row.serial_number
                                                                </span>
                                                            </MudTd>

                                                            <MudTd DataLabel="Interface" @onclick="() => Device_Information_Disks_History_RowClickHandler(device_information_disks_history_row)" class="@Device_Information_Disks_History_GetRowClass(device_information_disks_history_row)" style="white-space: nowrap;">
                                                                <span style="display: flex; align-items: center;">
                                                                    &nbsp;@device_information_disks_history_row.interface_type
                                                                </span>
                                                            </MudTd>

                                                            <MudTd DataLabel="Typ" @onclick="() => Device_Information_Disks_History_RowClickHandler(device_information_disks_history_row)" class="@Device_Information_Disks_History_GetRowClass(device_information_disks_history_row)" style="white-space: nowrap;">
                                                                <span style="display: flex; align-items: center;">
                                                                    &nbsp;@device_information_disks_history_row.drive_type
                                                                </span>
                                                            </MudTd>

                                                            <MudTd DataLabel="Dateisystem" @onclick="() => Device_Information_Disks_History_RowClickHandler(device_information_disks_history_row)" class="@Device_Information_Disks_History_GetRowClass(device_information_disks_history_row)" style="white-space: nowrap;">
                                                                <span style="display: flex; align-items: center;">
                                                                    &nbsp;@device_information_disks_history_row.drive_format
                                                                </span>
                                                            </MudTd>

                                                            <MudTd DataLabel="Bereit" @onclick="() => Device_Information_Disks_History_RowClickHandler(device_information_disks_history_row)" class="@Device_Information_Disks_History_GetRowClass(device_information_disks_history_row)" style="white-space: nowrap;">
                                                                <span style="display: flex; align-items: center;">
                                                                    &nbsp;@device_information_disks_history_row.drive_ready
                                                                </span>
                                                            </MudTd>

                                                            <MudTd DataLabel="Kapazität (GB)" @onclick="() => Device_Information_Disks_History_RowClickHandler(device_information_disks_history_row)" class="@Device_Information_Disks_History_GetRowClass(device_information_disks_history_row)" style="white-space: nowrap;">
                                                                <span style="display: flex; align-items: center;">
                                                                    &nbsp;@device_information_disks_history_row.capacity
                                                                </span>
                                                            </MudTd>

                                                            <MudTd DataLabel="Belegt (%)" @onclick="() => Device_Information_Disks_History_RowClickHandler(device_information_disks_history_row)" class="@Device_Information_Disks_History_GetRowClass(device_information_disks_history_row)" style="white-space: nowrap;">
                                                                <span style="display: flex; align-items: center;">
                                                                    &nbsp;@device_information_disks_history_row.usage
                                                                </span>
                                                            </MudTd>

                                                            <MudTd DataLabel="Status" @onclick="() => Device_Information_Disks_History_RowClickHandler(device_information_disks_history_row)" class="@Device_Information_Disks_History_GetRowClass(device_information_disks_history_row)" style="white-space: nowrap;">
                                                                <span style="display: flex; align-items: center;">
                                                                    &nbsp;@device_information_disks_history_row.status
                                                                </span>
                                                            </MudTd>

                                                        </RowTemplate>
                                                        <PagerContent>
                                                            <MudTablePager PageSizeOptions="new int[] { 10, 25, 50, 100, 250, 500, int.MaxValue }" RowsPerPageString="Einträge pro Seite" />
                                                        </PagerContent>
                                                    </MudTable>
                                                </ChildContent>
                                            </MudExpansionPanel>
                                        </MudPaper>

                                        <MudPaper Class="mt-5">
                                            <MudText Class="ml-2 d-flex align-center" Typo="Typo.h6">Antivirus Produkte</MudText>

                                            <MudTable FixedHeader="true" FixedFooter="true" Hover="true" RowsPerPage="int.MaxValue" Dense="true" Items="@antivirus_products_mysql_data" Filter="new Func<Antivirus_Products_Entity, bool>(Antivirus_Products_Table_Filter_Func)">
                                                <HeaderContent>
                                                    <MudTh Sortable="true" @onclick="() => antivirus_products_table_sorted_column = (nameof(Antivirus_Products_Entity.display_name))" style="white-space: nowrap;">Anzeigename</MudTh>
                                                    <MudTh Sortable="true" @onclick="() => antivirus_products_table_sorted_column = (nameof(Antivirus_Products_Entity.instance_guid))" style="white-space: nowrap;">Instanz-GUID</MudTh>
                                                    <MudTh Sortable="true" @onclick="() => antivirus_products_table_sorted_column = (nameof(Antivirus_Products_Entity.path_to_signed_product_exe))" style="white-space: nowrap;">Pfad zur signierten Produkt Executable</MudTh>
                                                    <MudTh Sortable="true" @onclick="() => antivirus_products_table_sorted_column = (nameof(Antivirus_Products_Entity.path_to_signed_reporting_exe))" style="white-space: nowrap;">Pfad zur signierten Reporting Executable</MudTh>
                                                    <MudTh Sortable="true" @onclick="() => antivirus_products_table_sorted_column = (nameof(Antivirus_Products_Entity.product_state))" style="white-space: nowrap;">Product State</MudTh>
                                                    <MudTh Sortable="true" @onclick="() => antivirus_products_table_sorted_column = (nameof(Antivirus_Products_Entity.timestamp))" style="white-space: nowrap;">Timestamp</MudTh>
                                                </HeaderContent>

                                                <RowTemplate Context="antivirus_products_row">

                                                    <MudTd DataLabel="Anzeigename" @onclick="() => Antivirus_Products_RowClickHandler(antivirus_products_row)" class="@Antivirus_Products_GetRowClass(antivirus_products_row)" style="white-space: nowrap;">
                                                        <span style="display: flex; align-items: center;">
                                                            &nbsp;@antivirus_products_row.display_name
                                                        </span>
                                                    </MudTd>

                                                    <MudTd DataLabel="Instanz-GUID" @onclick="() => Antivirus_Products_RowClickHandler(antivirus_products_row)" class="@Antivirus_Products_GetRowClass(antivirus_products_row)" style="white-space: nowrap;">
                                                        <span style="display: flex; align-items: center;">
                                                            &nbsp;@antivirus_products_row.instance_guid
                                                        </span>
                                                    </MudTd>

                                                    <MudTd DataLabel="Pfad zur signierten Produkt Executable" @onclick="() => Antivirus_Products_RowClickHandler(antivirus_products_row)" class="@Antivirus_Products_GetRowClass(antivirus_products_row)" style="white-space: nowrap;">
                                                        <span style="display: flex; align-items: center;">
                                                            &nbsp;@antivirus_products_row.path_to_signed_product_exe
                                                        </span>
                                                    </MudTd>

                                                    <MudTd DataLabel="Pfad zur signierten Reporting Executable" @onclick="() => Antivirus_Products_RowClickHandler(antivirus_products_row)" class="@Antivirus_Products_GetRowClass(antivirus_products_row)" style="white-space: nowrap;">
                                                        <span style="display: flex; align-items: center;">
                                                            &nbsp;@antivirus_products_row.path_to_signed_reporting_exe
                                                        </span>
                                                    </MudTd>

                                                    <MudTd DataLabel="Product State" @onclick="() => Antivirus_Products_RowClickHandler(antivirus_products_row)" class="@Antivirus_Products_GetRowClass(antivirus_products_row)" style="white-space: nowrap;">
                                                        <span style="display: flex; align-items: center;">
                                                            &nbsp;@antivirus_products_row.product_state
                                                        </span>
                                                    </MudTd>

                                                    <MudTd DataLabel="Timestamp" @onclick="() => Antivirus_Products_RowClickHandler(antivirus_products_row)" class="@Antivirus_Products_GetRowClass(antivirus_products_row)" style="white-space: nowrap;">
                                                        <span style="display: flex; align-items: center;">
                                                            &nbsp;@antivirus_products_row.timestamp
                                                        </span>
                                                    </MudTd>

                                                </RowTemplate>
                                            </MudTable>

                                            <MudExpansionPanel Class="mt-2 custom-expansion-panel">
                                                <TitleContent>
                                                    <div class="d-flex">
                                                        <MudIcon Icon="@Icons.Material.Filled.History" class="mr-3"></MudIcon>
                                                        <MudText>Verlauf</MudText>
                                                    </div>
                                                </TitleContent>

                                                <ChildContent>
                                                    <div style="display: flex; align-items: center;">
                                                        <MudDateRangePicker PickerVariant="PickerVariant.Dialog" Label="Zeitraum" @ref="antivirus_products_history_table_picker" @bind-DateRange="antivirus_products_history_table_dateRange" Style="max-width: 300px;">
                                                            <PickerActions Context="pickerActionsContext">
                                                                <MudButton Class="mr-auto align-self-start" OnClick="@(() => antivirus_products_history_table_picker.Clear())">Zurücksetzen</MudButton>
                                                                <MudButton OnClick="@(() => antivirus_products_history_table_picker.Close(false))">Abbrechen</MudButton>
                                                                <MudButton Color="Color.Primary" @onclick="async () => { await Antivirus_Products_History_Table_Submit_Picker(); }">Bestätigen</MudButton>
                                                            </PickerActions>
                                                        </MudDateRangePicker>

                                                        <MudTooltip Text="Daten exportieren">
                                                            <MudIconButton Class="ml-2 mt-5" Icon="@Icons.Material.Filled.FileDownload" Variant="Variant.Filled" Size="Size.Small" Color="Color.Default" @onclick="Export_Antivirus_Products_History_Table_Dialog"></MudIconButton>
                                                        </MudTooltip>
                                                    </div>

                                                    <MudTable Class="mt-5" Height="50vh" FixedHeader="true" FixedFooter="true" Hover="true" RowsPerPage="int.MaxValue" Dense="true" Items="@antivirus_products_history_mysql_data" GroupBy="@antivirus_products_history_groupDefinition" Filter="new Func<Antivirus_Products_History_Entity, bool>(Antivirus_Products_History_Table_Filter_Func)">
                                                        <ToolBarContent>
                                                            <MudTextField Class="mt-0" @bind-Value="antivirus_products_history_table_search_string" Placeholder="Suche" Adornment="Adornment.Start" AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Medium"></MudTextField>
                                                        </ToolBarContent>
                                                        <HeaderContent>
                                                            <MudTh Sortable="true" @onclick="() => antivirus_products_history_table_sorted_column = (nameof(Antivirus_Products_History_Entity.display_name))" style="white-space: nowrap;">Anzeigename</MudTh>
                                                            <MudTh Sortable="true" @onclick="() => antivirus_products_history_table_sorted_column = (nameof(Antivirus_Products_History_Entity.instance_guid))" style="white-space: nowrap;">Instanz-GUID</MudTh>
                                                            <MudTh Sortable="true" @onclick="() => antivirus_products_history_table_sorted_column = (nameof(Antivirus_Products_History_Entity.path_to_signed_product_exe))" style="white-space: nowrap;">Signierte Produkt Executable</MudTh>
                                                            <MudTh Sortable="true" @onclick="() => antivirus_products_history_table_sorted_column = (nameof(Antivirus_Products_History_Entity.path_to_signed_reporting_exe))" style="white-space: nowrap;">Signierte Reporting Executable</MudTh>
                                                            <MudTh Sortable="true" @onclick="() => antivirus_products_history_table_sorted_column = (nameof(Antivirus_Products_History_Entity.product_state))" style="white-space: nowrap;">Product State</MudTh>
                                                            <MudTh Sortable="true" @onclick="() => antivirus_products_history_table_sorted_column = (nameof(Antivirus_Products_History_Entity.timestamp))" style="white-space: nowrap;">Zeitstempel</MudTh>
                                                        </HeaderContent>
                                                        <GroupHeaderTemplate Context="groupContext">
                                                            <MudTh Class="mud-table-cell-custom-group" colspan="6">@($"{groupContext.GroupName}: {groupContext.Key}") </MudTh>
                                                        </GroupHeaderTemplate>
                                                        <RowTemplate Context="antivirus_products_history_row">

                                                            <MudTd DataLabel="Anzeigename" @onclick="() => Antivirus_Products_History_RowClickHandler(antivirus_products_history_row)" class="@Antivirus_Products_History_GetRowClass(antivirus_products_history_row)" style="white-space: nowrap;">
                                                                <span style="display: flex; align-items: center;">
                                                                    &nbsp;@antivirus_products_history_row.display_name
                                                                </span>
                                                            </MudTd>
                                                            <MudTd DataLabel="Instanz-GUID" @onclick="() => Antivirus_Products_History_RowClickHandler(antivirus_products_history_row)" class="@Antivirus_Products_History_GetRowClass(antivirus_products_history_row)" style="white-space: nowrap;">
                                                                <span style="display: flex; align-items: center;">
                                                                    &nbsp;@antivirus_products_history_row.instance_guid
                                                                </span>
                                                            </MudTd>

                                                            <MudTd DataLabel="Signierte Produkt Executable" @onclick="() => Antivirus_Products_History_RowClickHandler(antivirus_products_history_row)" class="@Antivirus_Products_History_GetRowClass(antivirus_products_history_row)" style="white-space: nowrap;">
                                                                <span style="display: flex; align-items: center;">
                                                                    &nbsp;@antivirus_products_history_row.path_to_signed_product_exe
                                                                </span>
                                                            </MudTd>

                                                            <MudTd DataLabel="Signierte Reporting Executable" @onclick="() => Antivirus_Products_History_RowClickHandler(antivirus_products_history_row)" class="@Antivirus_Products_History_GetRowClass(antivirus_products_history_row)" style="white-space: nowrap;">
                                                                <span style="display: flex; align-items: center;">
                                                                    &nbsp;@antivirus_products_history_row.path_to_signed_reporting_exe
                                                                </span>
                                                            </MudTd>

                                                            <MudTd DataLabel="Product State" @onclick="() => Antivirus_Products_History_RowClickHandler(antivirus_products_history_row)" class="@Antivirus_Products_History_GetRowClass(antivirus_products_history_row)" style="white-space: nowrap;">
                                                                <span style="display: flex; align-items: center;">
                                                                    &nbsp;@antivirus_products_history_row.product_state
                                                                </span>
                                                            </MudTd>

                                                            <MudTd DataLabel="Zeitstempel" @onclick="() => Antivirus_Products_History_RowClickHandler(antivirus_products_history_row)" class="@Antivirus_Products_History_GetRowClass(antivirus_products_history_row)" style="white-space: nowrap;">
                                                                <span style="display: flex; align-items: center;">
                                                                    &nbsp;@antivirus_products_history_row.timestamp
                                                                </span>
                                                            </MudTd>

                                                        </RowTemplate>
                                                        <PagerContent>
                                                            <MudTablePager PageSizeOptions="new int[] { 10, 25, 50, 100, 250, 500, int.MaxValue }" RowsPerPageString="Einträge pro Seite" />
                                                        </PagerContent>
                                                    </MudTable>
                                                </ChildContent>
                                            </MudExpansionPanel>

                                        </MudPaper>

                                        <MudPaper Class="mt-5">
                                            <MudText Class="ml-2" Typo="Typo.h6">Notizen</MudText>
                                            <MudTextField Class="ml-2 mr-2" T="string" Lines="10" Variant="Variant.Outlined" @bind-Text="notes_string" Disabled="@notes_disabled" />
                                            <MudButton Class="mt-2 ml-2" Size="Size.Small" Variant="Variant.Filled" OnClick="@Notes_Save" Color="Color.Success" StartIcon="@Icons.Material.Filled.Save">Speichern</MudButton>
                                            <MudButton Class="mt-2 ml-2" Size="Size.Small" Variant="Variant.Filled" OnClick="@Notes_Edit_Form" Color="Color.Default" StartIcon="@Icons.Material.Filled.Edit">Bearbeiten</MudButton>

                                            <MudExpansionPanel Class="mt-2 custom-expansion-panel">
                                                <TitleContent>
                                                    <div class="d-flex">
                                                        <MudIcon Icon="@Icons.Material.Filled.History" class="mr-3"></MudIcon>
                                                        <MudText>Verlauf</MudText>
                                                    </div>
                                                </TitleContent>

                                                <ChildContent>

                                                    <div style="display: flex; align-items: center;">
                                                        <MudDateRangePicker PickerVariant="PickerVariant.Dialog" Label="Zeitraum" @ref="device_information_notes_history_table_picker" @bind-DateRange="device_information_notes_history_table_dateRange" Style="max-width: 300px;">
                                                            <PickerActions Context="pickerActionsContext">
                                                                <MudButton Class="mr-auto align-self-start" OnClick="@(() => device_information_notes_history_table_picker.Clear())">Zurücksetzen</MudButton>
                                                                <MudButton OnClick="@(() => device_information_notes_history_table_picker.Close(false))">Abbrechen</MudButton>
                                                                <MudButton Color="Color.Primary" @onclick="async () => { await Device_Information_Notes_History_Table_Submit_Picker(); }">Bestätigen</MudButton>
                                                            </PickerActions>
                                                        </MudDateRangePicker>

                                                        <MudTooltip Text="Daten exportieren">
                                                            <MudIconButton Class="ml-2 mt-5" Icon="@Icons.Material.Filled.FileDownload" Variant="Variant.Filled" Size="Size.Small" Color="Color.Default" @onclick="Trigger_Export_Notes_History_Table_Dialog"></MudIconButton>
                                                        </MudTooltip>
                                                    </div>

                                                    <MudTable Class="mt-5" Height="25vh" FixedHeader="true" FixedFooter="true" Hover="true" RowsPerPage="25" Dense="true" Items="@device_information_notes_history_mysql_data" Filter="new Func<Device_Information_Notes_History_Entity, bool>(Device_Information_Notes_History_Table_Filter_Func)">
                                                        <ToolBarContent>
                                                            <MudTextField @bind-Value="device_information_notes_history_table_search_string" Placeholder="Suche" Adornment="Adornment.Start" AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Medium" Class="mt-0"></MudTextField>
                                                        </ToolBarContent>
                                                        <HeaderContent>
                                                            <MudTh Sortable="true" @onclick="() => device_information_notes_history_table_sorted_column = (nameof(Device_Information_Notes_History_Entity.date))" style="white-space: nowrap;">Datum</MudTh>
                                                            <MudTh Sortable="true" @onclick="() => device_information_notes_history_table_sorted_column = (nameof(Device_Information_Notes_History_Entity.author))" style="white-space: nowrap;">Author</MudTh>
                                                            <MudTh Sortable="true" @onclick="() => device_information_notes_history_table_sorted_column = (nameof(Device_Information_Notes_History_Entity.note))" style="white-space: nowrap;">Notizen</MudTh>
                                                        </HeaderContent>
                                                        <RowTemplate Context="device_information_notes_history_row">

                                                            <MudTd DataLabel="Datum" @onclick="() => Device_Information_Notes_History_RowClickHandler(device_information_notes_history_row)" class="@Device_Information_Notes_History_GetRowClass(device_information_notes_history_row)" style="white-space: nowrap;">
                                                                <span style="display: flex; align-items: center;">
                                                                    &nbsp;@device_information_notes_history_row.date
                                                                </span>
                                                            </MudTd>

                                                            <MudTd DataLabel="Author" @onclick="() => Device_Information_Notes_History_RowClickHandler(device_information_notes_history_row)" class="@Device_Information_Notes_History_GetRowClass(device_information_notes_history_row)" style="white-space: nowrap;">
                                                                <span style="display: flex; align-items: center;">
                                                                    &nbsp;@device_information_notes_history_row.author
                                                                </span>
                                                            </MudTd>

                                                            <MudTd DataLabel="Notiz" @onclick="() => Device_Information_Notes_History_RowClickHandler(device_information_notes_history_row)" class="@Device_Information_Notes_History_GetRowClass(device_information_notes_history_row)" style="white-space: nowrap;">
                                                                <span style="display: flex; align-items: center;">
                                                                    &nbsp;@device_information_notes_history_row.note
                                                                </span>
                                                            </MudTd>

                                                        </RowTemplate>
                                                        <PagerContent>
                                                            <MudTablePager PageSizeOptions="new int[] { 10, 25, 50, 100, 250, 500, int.MaxValue }" RowsPerPageString="Einträge pro Seite" />
                                                        </PagerContent>
                                                    </MudTable>
                                                </ChildContent>
                                            </MudExpansionPanel>

                                        </MudPaper>

                                        <MudPaper Class="mt-5">
                                            <MudText Class="ml-2" Typo="Typo.h6">Support Verlauf</MudText>

                                            <div style="display: flex; align-items: center;">
                                                <MudDateRangePicker Class="ml-2" PickerVariant="PickerVariant.Dialog" Label="Zeitraum" @ref="device_information_support_history_table_picker" @bind-DateRange="device_information_support_history_table_dateRange" Style="max-width: 300px;">
                                                    <PickerActions Context="pickerActionsContext">
                                                        <MudButton Class="mr-auto align-self-start" OnClick="@(() => device_information_support_history_table_picker.Clear())">Zurücksetzen</MudButton>
                                                        <MudButton OnClick="@(() => device_information_support_history_table_picker.Close(false))">Abbrechen</MudButton>
                                                        <MudButton Color="Color.Primary" @onclick="async () => { await Device_Information_Support_History_Table_Submit_Picker(); }">Bestätigen</MudButton>
                                                    </PickerActions>
                                                </MudDateRangePicker>

                                                <MudTooltip Text="Daten exportieren">
                                                    <MudIconButton Class="ml-2 mt-5 mr-2" Icon="@Icons.Material.Filled.FileDownload" Variant="Variant.Filled" Size="Size.Small" Color="Color.Default" @onclick="Trigger_Export_Support_History_Table_Dialog"></MudIconButton>
                                                </MudTooltip>
                                            </div>

                                            <MudTable Class="ml-2 mt-2 mr-2" Height="20vh" FixedHeader="true" FixedFooter="true" Hover="true" RowsPerPage="25" Dense="true" Items="@support_history_mysql_data" Filter="new Func<Support_History_Entity, bool>(Support_History_Table_Filter_Func)">
                                                <ToolBarContent>
                                                    <MudTextField @bind-Value="support_history_table_search_string" Placeholder="Suche" Adornment="Adornment.Start" AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Medium" Class="mt-0"></MudTextField>
                                                </ToolBarContent>
                                                <HeaderContent>
                                                    <MudTh Sortable="true" @onclick="() => support_history_table_sorted_column = (nameof(Support_History_Entity.date))" style="white-space: nowrap;">Datum</MudTh>
                                                    <MudTh Sortable="true" @onclick="() => support_history_table_sorted_column = (nameof(Support_History_Entity.username))" style="white-space: nowrap;">Author</MudTh>
                                                    <MudTh Sortable="true" @onclick="() => support_history_table_sorted_column = (nameof(Support_History_Entity.description))" style="white-space: nowrap;">Beschreibung</MudTh>
                                                </HeaderContent>
                                                <RowTemplate Context="support_history_row">

                                                    <MudTd DataLabel="Datum" @onclick="() => Support_History_RowClickHandler(support_history_row)" class="@Support_History_GetRowClass(support_history_row)" style="white-space: nowrap;">
                                                        <span style="display: flex; align-items: center;">
                                                            <MudIcon Icon="@Icons.Material.Filled.DateRange" Size="Size.Small" />&nbsp;@support_history_row.date
                                                        </span>
                                                    </MudTd>

                                                    <MudTd DataLabel="Author" @onclick="() => Support_History_RowClickHandler(support_history_row)" class="@Support_History_GetRowClass(support_history_row)" style="white-space: nowrap;">
                                                        <span style="display: flex; align-items: center;">
                                                            <MudIcon Icon="@Icons.Material.Filled.SupportAgent" Size="Size.Small" />&nbsp;@support_history_row.username
                                                        </span>
                                                    </MudTd>

                                                    <MudTd DataLabel="Beschreibung" @onclick="() => Support_History_RowClickHandler(support_history_row)" class="@Support_History_GetRowClass(support_history_row)" style="white-space: nowrap;">
                                                        <span style="display: flex; align-items: center;">
                                                            <MudIcon Icon="@Icons.Material.Filled.Description" Size="Size.Small" />&nbsp;@support_history_row.description
                                                        </span>
                                                    </MudTd>

                                                </RowTemplate>
                                                <PagerContent>
                                                    <MudTablePager PageSizeOptions="new int[] { 10, 25, 50, 100, 250, 500, int.MaxValue }" RowsPerPageString="Einträge pro Seite" />
                                                </PagerContent>
                                            </MudTable>

                                            <MudNavLink Disabled="true"></MudNavLink>

                                        </MudPaper>
                                    </MudTabPanel>
                            }

                            @if (permissions_devices_software)
                            {
                                <MudTabPanel Text="Software">
                                    <MudTabs KeepPanelsAlive=true Elevation="4" Rounded="false" Color="@Color.Default">
                                        <MudTabPanel Text="Installiert">

                                            <MudPaper>

                                                <MudButton Class="ml-2 mt-2" Size="Size.Small" Color="Color.Warning" Variant="Variant.Filled" StartIcon="@Icons.Material.Filled.Recycling" @onclick="Trigger_Export_Installed_Application_Table_Dialog">Deinstallieren</MudButton>

                                                <MudTooltip Text="Daten exportieren">
                                                    <MudIconButton Class="ml-2 mt-2" Icon="@Icons.Material.Filled.FileDownload" Variant="Variant.Filled" Size="Size.Small" Color="Color.Default" @onclick="Trigger_Export_Installed_Application_Table_Dialog"></MudIconButton>
                                                </MudTooltip>

                                                <MudTable Class="mt-0" Height="50vh" FixedHeader="true" FixedFooter="true" Hover="true" RowsPerPage="25" Dense="true" Items="@software_installed_mysql_data" Filter="new Func<Software_Installed_Entity, bool>(Software_Installed_Table_Filter_Func)">
                                                    <ToolBarContent>
                                                        <MudTextField @bind-Value="software_installed_table_search_string" Placeholder="Suche" Adornment="Adornment.Start" AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Medium" Class="mt-0"></MudTextField>
                                                    </ToolBarContent>
                                                    <HeaderContent>
                                                        <MudTh Sortable="true" @onclick="() => software_installed_table_sorted_column = (nameof(Software_Installed_Entity.name))" style="white-space: nowrap;">Name</MudTh>
                                                        <MudTh Sortable="true" @onclick="() => software_installed_table_sorted_column = (nameof(Software_Installed_Entity.version))" style="white-space: nowrap;">Version</MudTh>
                                                        <MudTh Sortable="true" @onclick="() => software_installed_table_sorted_column = (nameof(Software_Installed_Entity.installation_date))" style="white-space: nowrap;">Installationsdatum</MudTh>
                                                        <MudTh Sortable="true" @onclick="() => software_installed_table_sorted_column = (nameof(Software_Installed_Entity.installation_path))" style="white-space: nowrap;">Installationspfad</MudTh>
                                                        <MudTh Sortable="true" @onclick="() => software_installed_table_sorted_column = (nameof(Software_Installed_Entity.vendor))" style="white-space: nowrap;">Hersteller</MudTh>
                                                        <MudTh Sortable="true" @onclick="() => software_installed_table_sorted_column = (nameof(Software_Installed_Entity.uninstallation_string))" style="white-space: nowrap;">Deinstallations Befehl</MudTh>
                                                    </HeaderContent>
                                                    <RowTemplate Context="software_installed_row">

                                                        <MudTd DataLabel="Name" @onclick="() => Software_Installed_RowClickHandler(software_installed_row)" class="@Software_Installed_GetRowClass(software_installed_row)" style="white-space: nowrap;">
                                                            <span style="display: flex; align-items: center;">
                                                                &nbsp;@software_installed_row.name
                                                            </span>
                                                        </MudTd>

                                                        <MudTd DataLabel="Version" @onclick="() => Software_Installed_RowClickHandler(software_installed_row)" class="@Software_Installed_GetRowClass(software_installed_row)" style="white-space: nowrap;">
                                                            <span style="display: flex; align-items: center;">
                                                                &nbsp;@software_installed_row.version
                                                            </span>
                                                        </MudTd>

                                                        <MudTd DataLabel="Installationsdatum" @onclick="() => Software_Installed_RowClickHandler(software_installed_row)" class="@Software_Installed_GetRowClass(software_installed_row)" style="white-space: nowrap;">
                                                            <span style="display: flex; align-items: center;">
                                                                &nbsp;@software_installed_row.installation_date
                                                            </span>
                                                        </MudTd>

                                                        <MudTd DataLabel="Installationspfad" @onclick="() => Software_Installed_RowClickHandler(software_installed_row)" class="@Software_Installed_GetRowClass(software_installed_row)" style="white-space: nowrap;">
                                                            <span style="display: flex; align-items: center;">
                                                                &nbsp;@software_installed_row.installation_path
                                                            </span>
                                                        </MudTd>

                                                        <MudTd DataLabel="Hersteller" @onclick="() => Software_Installed_RowClickHandler(software_installed_row)" class="@Software_Installed_GetRowClass(software_installed_row)" style="white-space: nowrap;">
                                                            <span style="display: flex; align-items: center;">
                                                                &nbsp;@software_installed_row.vendor
                                                            </span>
                                                        </MudTd>

                                                        <MudTd DataLabel="Deinstallationspfad" @onclick="() => Software_Installed_RowClickHandler(software_installed_row)" class="@Software_Installed_GetRowClass(software_installed_row)" style="white-space: nowrap;">
                                                            <span style="display: flex; align-items: center;">
                                                                &nbsp;@software_installed_row.uninstallation_string
                                                            </span>
                                                        </MudTd>

                                                    </RowTemplate>
                                                    <PagerContent>
                                                        <MudTablePager PageSizeOptions="new int[] { 10, 25, 50, 100, 250, 500, int.MaxValue }" RowsPerPageString="Einträge pro Seite" />
                                                    </PagerContent>
                                                </MudTable>

                                            </MudPaper>

                                            <MudExpansionPanel Class="mt-5 custom-expansion-panel" >
                                                <TitleContent>
                                                    <div class="d-flex">
                                                        <MudIcon Icon="@Icons.Material.Filled.History" class="mr-3"></MudIcon>
                                                        <MudText>Verlauf</MudText>
                                                    </div>
                                                </TitleContent>

                                                <ChildContent>

                                                    <div style="display: flex; align-items: center;">
                                                        <MudDateRangePicker PickerVariant="PickerVariant.Dialog" Label="Zeitraum" @ref="applications_installed_history_table_picker" @bind-DateRange="applications_installed_history_table_dateRange" Style="max-width: 300px;">
                                                            <PickerActions Context="pickerActionsContext">
                                                                <MudButton Class="mr-auto align-self-start" OnClick="@(() => applications_installed_history_table_picker.Clear())">Zurücksetzen</MudButton>
                                                                <MudButton OnClick="@(() => applications_installed_history_table_picker.Close(false))">Abbrechen</MudButton>
                                                                <MudButton Color="Color.Primary" @onclick="async () => { await Applications_Installed_History_Table_Submit_Picker(); }">Bestätigen</MudButton>
                                                            </PickerActions>
                                                        </MudDateRangePicker>

                                                        <MudTooltip Text="Daten exportieren">
                                                            <MudIconButton Class="ml-2 mt-S" Icon="@Icons.Material.Filled.FileDownload" Variant="Variant.Filled" Size="Size.Small" Color="Color.Default"  @onclick="Trigger_Export_Installed_Application_History_Table_Dialog"></MudIconButton>
                                                        </MudTooltip>
                                                    </div>

                                                    <MudTable Class="mt-2" Height="50vh" FixedHeader="true" FixedFooter="true" Hover="true" RowsPerPage="int.MaxValue" Dense="true" Items="@applications_installed_history_mysql_data" GroupBy="@_groupDefinition" Filter="new Func<Applications_Installed_History_Entity, bool>(Applications_Installed_History_Table_Filter_Func)">
                                                        <ToolBarContent>
                                                            <MudTextField Class="mt-0" @bind-Value="applications_installed_history_table_search_string" Placeholder="Suche" Adornment="Adornment.Start" AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Medium"></MudTextField>
                                                        </ToolBarContent>
                                                        <HeaderContent>
                                                            <MudTh Sortable="true" @onclick="() => applications_installed_history_table_sorted_column = (nameof(Applications_Installed_History_Entity.name))" style="white-space: nowrap;">Name</MudTh>
                                                            <MudTh Sortable="true" @onclick="() => applications_installed_history_table_sorted_column = (nameof(Applications_Installed_History_Entity.version))" style="white-space: nowrap;">Version</MudTh>
                                                            <MudTh Sortable="true" @onclick="() => applications_installed_history_table_sorted_column = (nameof(Applications_Installed_History_Entity.installation_date))" style="white-space: nowrap;">Installationsdatum</MudTh>
                                                            <MudTh Sortable="true" @onclick="() => applications_installed_history_table_sorted_column = (nameof(Applications_Installed_History_Entity.installation_path))" style="white-space: nowrap;">Installationspfad</MudTh>
                                                            <MudTh Sortable="true" @onclick="() => applications_installed_history_table_sorted_column = (nameof(Applications_Installed_History_Entity.vendor))" style="white-space: nowrap;">Hersteller</MudTh>
                                                            <MudTh Sortable="true" @onclick="() => applications_installed_history_table_sorted_column = (nameof(Applications_Installed_History_Entity.uninstallation_string))" style="white-space: nowrap;">Deinstallations Befehl</MudTh>
                                                        </HeaderContent>
                                                        <GroupHeaderTemplate Context="groupContext">
                                                            <MudTh Class="mud-table-cell-custom-group" colspan="6">@($"{groupContext.GroupName}: {groupContext.Key}") </MudTh>
                                                        </GroupHeaderTemplate>
                                                        <RowTemplate Context="applications_installed_history_row">

                                                            <MudTd DataLabel="Name" @onclick="() => Applications_Installed_History_RowClickHandler(applications_installed_history_row)" class="@Applications_Installed_History_GetRowClass(applications_installed_history_row)" style="white-space: nowrap;">
                                                                <span style="display: flex; align-items: center;">
                                                                    &nbsp;@applications_installed_history_row.name
                                                                </span>
                                                            </MudTd>
                                                            <MudTd DataLabel="Version" @onclick="() => Applications_Installed_History_RowClickHandler(applications_installed_history_row)" class="@Applications_Installed_History_GetRowClass(applications_installed_history_row)" style="white-space: nowrap;">
                                                                <span style="display: flex; align-items: center;">
                                                                    &nbsp;@applications_installed_history_row.version
                                                                </span>
                                                            </MudTd>
                                                            <MudTd DataLabel="Installationsdatum" @onclick="() => Applications_Installed_History_RowClickHandler(applications_installed_history_row)" class="@Applications_Installed_History_GetRowClass(applications_installed_history_row)" style="white-space: nowrap;">
                                                                <span style="display: flex; align-items: center;">
                                                                    &nbsp;@applications_installed_history_row.installation_date
                                                                </span>
                                                            </MudTd>
                                                            <MudTd DataLabel="Installationspfad" @onclick="() => Applications_Installed_History_RowClickHandler(applications_installed_history_row)" class="@Applications_Installed_History_GetRowClass(applications_installed_history_row)" style="white-space: nowrap;">
                                                                <span style="display: flex; align-items: center;">
                                                                    &nbsp;@applications_installed_history_row.installation_path
                                                                </span>
                                                            </MudTd>
                                                            <MudTd DataLabel="Hersteller" @onclick="() => Applications_Installed_History_RowClickHandler(applications_installed_history_row)" class="@Applications_Installed_History_GetRowClass(applications_installed_history_row)" style="white-space: nowrap;">
                                                                <span style="display: flex; align-items: center;">
                                                                    &nbsp;@applications_installed_history_row.vendor
                                                                </span>
                                                            </MudTd>
                                                            <MudTd DataLabel="Deinstallationspfad" @onclick="() => Applications_Installed_History_RowClickHandler(applications_installed_history_row)" class="@Applications_Installed_History_GetRowClass(applications_installed_history_row)" style="white-space: nowrap;">
                                                                <span style="display: flex; align-items: center;">
                                                                    &nbsp;@applications_installed_history_row.uninstallation_string
                                                                </span>
                                                            </MudTd>

                                                        </RowTemplate>
                                                        <PagerContent>
                                                            <MudTablePager PageSizeOptions="new int[] { 10, 25, 50, 100, 250, 500, int.MaxValue }" RowsPerPageString="Einträge pro Seite" />
                                                        </PagerContent>
                                                    </MudTable>
                                                </ChildContent>
                                            </MudExpansionPanel>                            

                                        </MudTabPanel>
                                        <MudTabPanel Text="Logon">
                                            <MudPaper>
                                                <MudTooltip Text="Daten exportieren">
                                                    <MudIconButton Class="ml-2 mt-2" Icon="@Icons.Material.Filled.FileDownload" Variant="Variant.Filled" Size="Size.Small" Color="Color.Default" @onclick="Trigger_Export_Application_Logon_Table_Dialog"></MudIconButton>
                                                </MudTooltip>

                                                <MudTable Class="mt-0" Height="50vh" FixedHeader="true" FixedFooter="true" Hover="true" RowsPerPage="25" Dense="true" Items="@application_logon_mysql_data" Filter="new Func<Application_Logon_Entity, bool>(Application_Logon_Table_Filter_Func)">
                                                    <ToolBarContent>
                                                        <MudTextField @bind-Value="application_logon_table_search_string" Placeholder="Suche" Adornment="Adornment.Start" AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Medium" Class="mt-0"></MudTextField>
                                                    </ToolBarContent>
                                                    <HeaderContent>
                                                        <MudTh Sortable="true" @onclick="() => application_logon_table_sorted_column = (nameof(Application_Logon_Entity.name))" style="white-space: nowrap;">Name</MudTh>
                                                        <MudTh Sortable="true" @onclick="() => application_logon_table_sorted_column = (nameof(Application_Logon_Entity.path))" style="white-space: nowrap;">Pfad</MudTh>
                                                        <MudTh Sortable="true" @onclick="() => application_logon_table_sorted_column = (nameof(Application_Logon_Entity.command))" style="white-space: nowrap;">Befehl</MudTh>
                                                        <MudTh Sortable="true" @onclick="() => application_logon_table_sorted_column = (nameof(Application_Logon_Entity.user))" style="white-space: nowrap;">Benutzer</MudTh>
                                                        <MudTh Sortable="true" @onclick="() => application_logon_table_sorted_column = (nameof(Application_Logon_Entity.user_sid))" style="white-space: nowrap;">Benutzer SID</MudTh>
                                                    </HeaderContent>
                                                    <RowTemplate Context="application_logon_row">

                                                        <MudTd DataLabel="Name" @onclick="() => Application_Logon_RowClickHandler(application_logon_row)" class="@Application_Logon_GetRowClass(application_logon_row)" style="white-space: nowrap;">
                                                            <span style="display: flex; align-items: center;">
                                                                &nbsp;@application_logon_row.name
                                                            </span>
                                                        </MudTd>

                                                        <MudTd DataLabel="Pfad" @onclick="() => Application_Logon_RowClickHandler(application_logon_row)" class="@Application_Logon_GetRowClass(application_logon_row)" style="white-space: nowrap;">
                                                            <span style="display: flex; align-items: center;">
                                                                &nbsp;@application_logon_row.path
                                                            </span>
                                                        </MudTd>

                                                        <MudTd DataLabel="Befehl" @onclick="() => Application_Logon_RowClickHandler(application_logon_row)" class="@Application_Logon_GetRowClass(application_logon_row)" style="white-space: nowrap;">
                                                            <span style="display: flex; align-items: center;">
                                                                &nbsp;@application_logon_row.command
                                                            </span>
                                                        </MudTd>

                                                        <MudTd DataLabel="Benutzer" @onclick="() => Application_Logon_RowClickHandler(application_logon_row)" class="@Application_Logon_GetRowClass(application_logon_row)" style="white-space: nowrap;">
                                                            <span style="display: flex; align-items: center;">
                                                                &nbsp;@application_logon_row.user
                                                            </span>
                                                        </MudTd>

                                                        <MudTd DataLabel="Benutzer SID" @onclick="() => Application_Logon_RowClickHandler(application_logon_row)" class="@Application_Logon_GetRowClass(application_logon_row)" style="white-space: nowrap;">
                                                            <span style="display: flex; align-items: center;">
                                                                &nbsp;@application_logon_row.user_sid
                                                            </span>
                                                        </MudTd>

                                                    </RowTemplate>
                                                    <PagerContent>
                                                        <MudTablePager PageSizeOptions="new int[] { 10, 25, 50, 100, 250, 500, int.MaxValue }" RowsPerPageString="Einträge pro Seite" />
                                                    </PagerContent>
                                                </MudTable>

                                            </MudPaper>

                                            <MudExpansionPanel Class="mt-5 custom-expansion-panel" >
                                                <TitleContent>
                                                    <div class="d-flex">
                                                        <MudIcon Icon="@Icons.Material.Filled.History" class="mr-3"></MudIcon>
                                                        <MudText>Verlauf</MudText>
                                                    </div>
                                                </TitleContent>

                                                <ChildContent>

                                                    <div style="display: flex; align-items: center;">
                                                        <MudDateRangePicker PickerVariant="PickerVariant.Dialog" Label="Zeitraum" @ref="applications_logon_history_table_picker" @bind-DateRange="applications_logon_history_table_dateRange" Style="max-width: 300px;">
                                                            <PickerActions Context="pickerActionsContext">
                                                                <MudButton Class="mr-auto align-self-start" OnClick="@(() => applications_logon_history_table_picker.Clear())">Zurücksetzen</MudButton>
                                                                <MudButton OnClick="@(() => applications_logon_history_table_picker.Close(false))">Abbrechen</MudButton>
                                                                <MudButton Color="Color.Primary" @onclick="async () => { await Applications_Logon_History_Table_Submit_Picker(); }">Bestätigen</MudButton>
                                                            </PickerActions>
                                                        </MudDateRangePicker>

                                                        <MudTooltip Text="Daten exportieren">
                                                            <MudIconButton Class="ml-2 mt-5" Icon="@Icons.Material.Filled.FileDownload" Variant="Variant.Filled" Size="Size.Small" Color="Color.Default"  @onclick="Trigger_Export_Application_Logon_History_Table_Dialog"></MudIconButton>
                                                        </MudTooltip>
                                                    </div>
                                        
                                                    <MudTable Class="mt-2i" Height="50vh" FixedHeader="true" FixedFooter="true" Hover="true" RowsPerPage="int.MaxValue" Dense="true" Items="@applications_logon_history_mysql_data" GroupBy="@applications_logon_history_groupDefinition" Filter="new Func<Applications_Logon_History_Entity, bool>(Applications_Logon_History_Table_Filter_Func)">
                                                        <ToolBarContent>
                                                            <MudTextField Class="mt-0" @bind-Value="applications_logon_history_table_search_string" Placeholder="Suche" Adornment="Adornment.Start" AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Medium"></MudTextField>
                                                        </ToolBarContent>
                                                        <HeaderContent>
                                                            <MudTh Sortable="true" @onclick="() => applications_logon_history_table_sorted_column = (nameof(Applications_Logon_History_Entity.name))" style="white-space: nowrap;">Name</MudTh>
                                                            <MudTh Sortable="true" @onclick="() => applications_logon_history_table_sorted_column = (nameof(Applications_Logon_History_Entity.path))" style="white-space: nowrap;">Pfad</MudTh>
                                                            <MudTh Sortable="true" @onclick="() => applications_logon_history_table_sorted_column = (nameof(Applications_Logon_History_Entity.command))" style="white-space: nowrap;">Befehl</MudTh>
                                                            <MudTh Sortable="true" @onclick="() => applications_logon_history_table_sorted_column = (nameof(Applications_Logon_History_Entity.user))" style="white-space: nowrap;">Benutzer</MudTh>
                                                            <MudTh Sortable="true" @onclick="() => applications_logon_history_table_sorted_column = (nameof(Applications_Logon_History_Entity.user_sid))" style="white-space: nowrap;">Benutzer SID</MudTh>
                                                        </HeaderContent>
                                                        <GroupHeaderTemplate Context="groupContext">
                                                            <MudTh Class="mud-table-cell-custom-group" colspan="6">@($"{groupContext.GroupName}: {groupContext.Key}") </MudTh>
                                                        </GroupHeaderTemplate>
                                                        <RowTemplate Context="applications_logon_history_row">

                                                            <MudTd DataLabel="Name" @onclick="() => Applications_Logon_History_RowClickHandler(applications_logon_history_row)" class="@Applications_Logon_History_GetRowClass(applications_logon_history_row)" style="white-space: nowrap;">
                                                                <span style="display: flex; align-items: center;">
                                                                    &nbsp;@applications_logon_history_row.name
                                                                </span>
                                                            </MudTd>
                                                                <MudTd DataLabel="Pfad" @onclick="() => Applications_Logon_History_RowClickHandler(applications_logon_history_row)" class="@Applications_Logon_History_GetRowClass(applications_logon_history_row)" style="white-space: nowrap;">
                                                                <span style="display: flex; align-items: center;">
                                                                    &nbsp;@applications_logon_history_row.path
                                                                </span>
                                                            </MudTd>
                                                            <MudTd DataLabel="Befehl" @onclick="() => Applications_Logon_History_RowClickHandler(applications_logon_history_row)" class="@Applications_Logon_History_GetRowClass(applications_logon_history_row)" style="white-space: nowrap;">
                                                                <span style="display: flex; align-items: center;">
                                                                    &nbsp;@applications_logon_history_row.command
                                                                </span>
                                                            </MudTd>
                                                            <MudTd DataLabel="Benutzer" @onclick="() => Applications_Logon_History_RowClickHandler(applications_logon_history_row)" class="@Applications_Logon_History_GetRowClass(applications_logon_history_row)" style="white-space: nowrap;">
                                                                <span style="display: flex; align-items: center;">
                                                                    &nbsp;@applications_logon_history_row.user
                                                                </span>
                                                            </MudTd>
                                                            <MudTd DataLabel="Benutzer SID" @onclick="() => Applications_Logon_History_RowClickHandler(applications_logon_history_row)" class="@Applications_Logon_History_GetRowClass(applications_logon_history_row)" style="white-space: nowrap;">
                                                                <span style="display: flex; align-items: center;">
                                                                    &nbsp;@applications_logon_history_row.user_sid
                                                                </span>
                                                            </MudTd>

                                                        </RowTemplate>
                                                        <PagerContent>
                                                            <MudTablePager PageSizeOptions="new int[] { 10, 25, 50, 100, 250, 500, int.MaxValue }" RowsPerPageString="Einträge pro Seite" />
                                                        </PagerContent>
                                                    </MudTable>
                                                </ChildContent>
                                            </MudExpansionPanel> 

                                        </MudTabPanel>
                                        <MudTabPanel Text="Aufgabenplanung">
                                            <MudPaper>

                                                <MudTooltip Text="Daten exportieren">
                                                    <MudIconButton Class="ml-2 mt-2" Icon="@Icons.Material.Filled.FileDownload" Variant="Variant.Filled" Size="Size.Small" Color="Color.Default" @onclick="Trigger_Export_Application_Scheduled_Tasks_Table_Dialog"></MudIconButton>
                                                </MudTooltip>

                                                <MudTable Class="mt-0" Height="50vh" FixedHeader="true" FixedFooter="true" Hover="true" RowsPerPage="25" Dense="true" Items="@applications_scheduled_tasks_mysql_data" Filter="new Func<Applications_Scheduled_Tasks_Entity, bool>(Applications_Scheduled_Tasks_Table_Filter_Func)">
                                                    <ToolBarContent>
                                                        <MudTextField @bind-Value="applications_scheduled_tasks_table_search_string" Placeholder="Suche" Adornment="Adornment.Start" AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Medium" Class="mt-0"></MudTextField>
                                                    </ToolBarContent>
                                                    <HeaderContent>
                                                        <MudTh Sortable="true" @onclick="() => applications_scheduled_tasks_table_sorted_column = (nameof(Applications_Scheduled_Tasks_Entity.name))" style="white-space: nowrap;">Name</MudTh>
                                                        <MudTh Sortable="true" @onclick="() => applications_scheduled_tasks_table_sorted_column = (nameof(Applications_Scheduled_Tasks_Entity.status))" style="white-space: nowrap;">Status</MudTh>
                                                        <MudTh Sortable="true" @onclick="() => applications_scheduled_tasks_table_sorted_column = (nameof(Applications_Scheduled_Tasks_Entity.author))" style="white-space: nowrap;">Author</MudTh>
                                                        <MudTh Sortable="true" @onclick="() => applications_scheduled_tasks_table_sorted_column = (nameof(Applications_Scheduled_Tasks_Entity.path))" style="white-space: nowrap;">Pfad</MudTh>
                                                        <MudTh Sortable="true" @onclick="() => applications_scheduled_tasks_table_sorted_column = (nameof(Applications_Scheduled_Tasks_Entity.folder))" style="white-space: nowrap;">Ordner</MudTh>
                                                        <MudTh Sortable="true" @onclick="() => applications_scheduled_tasks_table_sorted_column = (nameof(Applications_Scheduled_Tasks_Entity.user_sid))" style="white-space: nowrap;">Benutzer SID</MudTh>
                                                        <MudTh Sortable="true" @onclick="() => applications_scheduled_tasks_table_sorted_column = (nameof(Applications_Scheduled_Tasks_Entity.next_execution))" style="white-space: nowrap;">Nächste Ausführung</MudTh>
                                                        <MudTh Sortable="true" @onclick="() => applications_scheduled_tasks_table_sorted_column = (nameof(Applications_Scheduled_Tasks_Entity.last_execution))" style="white-space: nowrap;">Letzte Ausführung</MudTh>
                                                    </HeaderContent>
                                                    <RowTemplate Context="applications_scheduled_tasks_row">

                                                        <MudTd DataLabel="Name" @onclick="() => Applications_Scheduled_Tasks_RowClickHandler(applications_scheduled_tasks_row)" class="@Applications_Scheduled_Tasks_GetRowClass(applications_scheduled_tasks_row)" style="white-space: nowrap;">
                                                            <span style="display: flex; align-items: center;">
                                                                &nbsp;@applications_scheduled_tasks_row.name
                                                            </span>
                                                        </MudTd>

                                                        <MudTd DataLabel="Status" @onclick="() => Applications_Scheduled_Tasks_RowClickHandler(applications_scheduled_tasks_row)" class="@Applications_Scheduled_Tasks_GetRowClass(applications_scheduled_tasks_row)" style="white-space: nowrap;">
                                                            <span style="display: flex; align-items: center;">
                                                                &nbsp;@applications_scheduled_tasks_row.status
                                                            </span>
                                                        </MudTd>

                                                        <MudTd DataLabel="Author" @onclick="() => Applications_Scheduled_Tasks_RowClickHandler(applications_scheduled_tasks_row)" class="@Applications_Scheduled_Tasks_GetRowClass(applications_scheduled_tasks_row)" style="white-space: nowrap;">
                                                            <span style="display: flex; align-items: center;">
                                                                &nbsp;@applications_scheduled_tasks_row.author
                                                            </span>
                                                        </MudTd>

                                                        <MudTd DataLabel="Pfad" @onclick="() => Applications_Scheduled_Tasks_RowClickHandler(applications_scheduled_tasks_row)" class="@Applications_Scheduled_Tasks_GetRowClass(applications_scheduled_tasks_row)" style="white-space: nowrap;">
                                                            <span style="display: flex; align-items: center;">
                                                                &nbsp;@applications_scheduled_tasks_row.path
                                                            </span>
                                                        </MudTd>

                                                        <MudTd DataLabel="Ordner" @onclick="() => Applications_Scheduled_Tasks_RowClickHandler(applications_scheduled_tasks_row)" class="@Applications_Scheduled_Tasks_GetRowClass(applications_scheduled_tasks_row)" style="white-space: nowrap;">
                                                            <span style="display: flex; align-items: center;">
                                                                &nbsp;@applications_scheduled_tasks_row.folder
                                                            </span>
                                                        </MudTd>

                                                        <MudTd DataLabel="Benutzer SID" @onclick="() => Applications_Scheduled_Tasks_RowClickHandler(applications_scheduled_tasks_row)" class="@Applications_Scheduled_Tasks_GetRowClass(applications_scheduled_tasks_row)" style="white-space: nowrap;">
                                                            <span style="display: flex; align-items: center;">
                                                                &nbsp;@applications_scheduled_tasks_row.user_sid
                                                            </span>
                                                        </MudTd>

                                                        <MudTd DataLabel="Nächste Ausführung" @onclick="() => Applications_Scheduled_Tasks_RowClickHandler(applications_scheduled_tasks_row)" class="@Applications_Scheduled_Tasks_GetRowClass(applications_scheduled_tasks_row)" style="white-space: nowrap;">
                                                            <span style="display: flex; align-items: center;">
                                                                &nbsp;@applications_scheduled_tasks_row.next_execution
                                                            </span>
                                                        </MudTd>

                                                        <MudTd DataLabel="Letzte Ausführung" @onclick="() => Applications_Scheduled_Tasks_RowClickHandler(applications_scheduled_tasks_row)" class="@Applications_Scheduled_Tasks_GetRowClass(applications_scheduled_tasks_row)" style="white-space: nowrap;">
                                                            <span style="display: flex; align-items: center;">
                                                                &nbsp;@applications_scheduled_tasks_row.last_execution
                                                            </span>
                                                        </MudTd>

                                                    </RowTemplate>
                                                    <PagerContent>
                                                        <MudTablePager PageSizeOptions="new int[] { 10, 25, 50, 100, 250, 500, int.MaxValue }" RowsPerPageString="Einträge pro Seite" />
                                                    </PagerContent>
                                                </MudTable>

                                            </MudPaper>

                                            <MudExpansionPanel Class="mt-5 custom-expansion-panel" >
                                                <TitleContent>
                                                    <div class="d-flex">
                                                        <MudIcon Icon="@Icons.Material.Filled.History" class="mr-3"></MudIcon>
                                                        <MudText>Verlauf</MudText>
                                                    </div>
                                                </TitleContent>

                                                <ChildContent>
                                                
                                                        <div style="display: flex; align-items: center;">
                                                            <MudDateRangePicker PickerVariant="PickerVariant.Dialog" Label="Zeitraum" @ref="applications_scheduled_tasks_history_table_picker" @bind-DateRange="applications_scheduled_tasks_history_table_dateRange" Style="max-width: 300px;">
                                                                <PickerActions Context="pickerActionsContext">
                                                                    <MudButton Class="mr-auto align-self-start" OnClick="@(() => applications_scheduled_tasks_history_table_picker.Clear())">Zurücksetzen</MudButton>
                                                                    <MudButton OnClick="@(() => applications_scheduled_tasks_history_table_picker.Close(false))">Abbrechen</MudButton>
                                                                    <MudButton Color="Color.Primary" @onclick="async () => { await Applications_Scheduled_Tasks_History_Table_Submit_Picker(); }">Bestätigen</MudButton>
                                                                </PickerActions>
                                                            </MudDateRangePicker>

                                                            <MudTooltip Text="Daten exportieren">
                                                                <MudIconButton Class="ml-2 mt-5" Icon="@Icons.Material.Filled.FileDownload" Variant="Variant.Filled" Size="Size.Small" Color="Color.Default"  @onclick="Trigger_Export_Application_Scheduled_Tasks_History_Table_Dialog"></MudIconButton>
                                                            </MudTooltip>
                                                        </div>

                                                        <MudTable Class="mt-2" Height="50vh" FixedHeader="true" FixedFooter="true" Hover="true" RowsPerPage="int.MaxValue" Dense="true" Items="@applications_scheduled_tasks_history_mysql_data" GroupBy="@applications_scheduled_tasks_history_groupDefinition" Filter="new Func<Applications_Scheduled_Tasks_History_Entity, bool>(Applications_Scheduled_Tasks_History_Table_Filter_Func)">
                                                            <ToolBarContent>
                                                                <MudTextField Class="mt-0" @bind-Value="applications_scheduled_tasks_history_table_search_string" Placeholder="Suche" Adornment="Adornment.Start" AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Medium"></MudTextField>
                                                            </ToolBarContent>
                                                            <HeaderContent>
                                                                <MudTh Sortable="true" @onclick="() => applications_scheduled_tasks_history_table_sorted_column = (nameof(Applications_Scheduled_Tasks_History_Entity.name))" style="white-space: nowrap;">Name</MudTh>
                                                                <MudTh Sortable="true" @onclick="() => applications_scheduled_tasks_history_table_sorted_column = (nameof(Applications_Scheduled_Tasks_History_Entity.status))" style="white-space: nowrap;">Status</MudTh>
                                                                <MudTh Sortable="true" @onclick="() => applications_scheduled_tasks_history_table_sorted_column = (nameof(Applications_Scheduled_Tasks_History_Entity.author))" style="white-space: nowrap;">Author</MudTh>
                                                                <MudTh Sortable="true" @onclick="() => applications_scheduled_tasks_history_table_sorted_column = (nameof(Applications_Scheduled_Tasks_History_Entity.path))" style="white-space: nowrap;">Pfad</MudTh>
                                                                <MudTh Sortable="true" @onclick="() => applications_scheduled_tasks_history_table_sorted_column = (nameof(Applications_Scheduled_Tasks_History_Entity.folder))" style="white-space: nowrap;">Ordner</MudTh>
                                                                <MudTh Sortable="true" @onclick="() => applications_scheduled_tasks_history_table_sorted_column = (nameof(Applications_Scheduled_Tasks_History_Entity.user_sid))" style="white-space: nowrap;">Benuter SID</MudTh>
                                                                <MudTh Sortable="true" @onclick="() => applications_scheduled_tasks_history_table_sorted_column = (nameof(Applications_Scheduled_Tasks_History_Entity.next_execution))" style="white-space: nowrap;">Nächste Ausführung</MudTh>
                                                                <MudTh Sortable="true" @onclick="() => applications_scheduled_tasks_history_table_sorted_column = (nameof(Applications_Scheduled_Tasks_History_Entity.last_execution))" style="white-space: nowrap;">Letzte Ausführung</MudTh>
                                                            </HeaderContent>
                                                            <GroupHeaderTemplate Context="groupContext">
                                                                <MudTh Class="mud-table-cell-custom-group" colspan="6">@($"{groupContext.GroupName}: {groupContext.Key}") </MudTh>
                                                            </GroupHeaderTemplate>
                                                            <RowTemplate Context="applications_scheduled_tasks_history_row">

                                                                <MudTd DataLabel="Name" @onclick="() => Applications_Scheduled_Tasks_History_RowClickHandler(applications_scheduled_tasks_history_row)" class="@Applications_Scheduled_Tasks_History_GetRowClass(applications_scheduled_tasks_history_row)" style="white-space: nowrap;">
                                                                    <span style="display: flex; align-items: center;">
                                                                        &nbsp;@applications_scheduled_tasks_history_row.name
                                                                    </span>
                                                                </MudTd>
                                                                <MudTd DataLabel="Status" @onclick="() => Applications_Scheduled_Tasks_History_RowClickHandler(applications_scheduled_tasks_history_row)" class="@Applications_Scheduled_Tasks_History_GetRowClass(applications_scheduled_tasks_history_row)" style="white-space: nowrap;">
                                                                    <span style="display: flex; align-items: center;">
                                                                        &nbsp;@applications_scheduled_tasks_history_row.status
                                                                    </span>
                                                                </MudTd>
                                                                <MudTd DataLabel="Author" @onclick="() => Applications_Scheduled_Tasks_History_RowClickHandler(applications_scheduled_tasks_history_row)" class="@Applications_Scheduled_Tasks_History_GetRowClass(applications_scheduled_tasks_history_row)" style="white-space: nowrap;">
                                                                    <span style="display: flex; align-items: center;">
                                                                        &nbsp;@applications_scheduled_tasks_history_row.author
                                                                    </span>
                                                                </MudTd>
                                                                <MudTd DataLabel="Pfad" @onclick="() => Applications_Scheduled_Tasks_History_RowClickHandler(applications_scheduled_tasks_history_row)" class="@Applications_Scheduled_Tasks_History_GetRowClass(applications_scheduled_tasks_history_row)" style="white-space: nowrap;">
                                                                    <span style="display: flex; align-items: center;">
                                                                        &nbsp;@applications_scheduled_tasks_history_row.path
                                                                    </span>
                                                                </MudTd>
                                                                <MudTd DataLabel="Ordner" @onclick="() => Applications_Scheduled_Tasks_History_RowClickHandler(applications_scheduled_tasks_history_row)" class="@Applications_Scheduled_Tasks_History_GetRowClass(applications_scheduled_tasks_history_row)" style="white-space: nowrap;">
                                                                    <span style="display: flex; align-items: center;">
                                                                        &nbsp;@applications_scheduled_tasks_history_row.folder
                                                                    </span>
                                                                </MudTd>
                                                                <MudTd DataLabel="Benuter SID" @onclick="() => Applications_Scheduled_Tasks_History_RowClickHandler(applications_scheduled_tasks_history_row)" class="@Applications_Scheduled_Tasks_History_GetRowClass(applications_scheduled_tasks_history_row)" style="white-space: nowrap;">
                                                                    <span style="display: flex; align-items: center;">
                                                                        &nbsp;@applications_scheduled_tasks_history_row.user_sid
                                                                    </span>
                                                                </MudTd>
                                                                <MudTd DataLabel="Nächste Ausführung" @onclick="() => Applications_Scheduled_Tasks_History_RowClickHandler(applications_scheduled_tasks_history_row)" class="@Applications_Scheduled_Tasks_History_GetRowClass(applications_scheduled_tasks_history_row)" style="white-space: nowrap;">
                                                                    <span style="display: flex; align-items: center;">
                                                                        &nbsp;@applications_scheduled_tasks_history_row.next_execution
                                                                    </span>
                                                                </MudTd>
                                                                <MudTd DataLabel="Letzte Ausführung" @onclick="() => Applications_Scheduled_Tasks_History_RowClickHandler(applications_scheduled_tasks_history_row)" class="@Applications_Scheduled_Tasks_History_GetRowClass(applications_scheduled_tasks_history_row)" style="white-space: nowrap;">
                                                                    <span style="display: flex; align-items: center;">
                                                                        &nbsp;@applications_scheduled_tasks_history_row.last_execution
                                                                    </span>
                                                                </MudTd>


                                                            </RowTemplate>
                                                            <PagerContent>
                                                                <MudTablePager PageSizeOptions="new int[] { 10, 25, 50, 100, 250, 500, int.MaxValue }" RowsPerPageString="Einträge pro Seite" />
                                                            </PagerContent>
                                                        </MudTable>
                                                </ChildContent>
                                            </MudExpansionPanel>
                                        </MudTabPanel>
                                        <MudTabPanel Text="Dienste">
                                            <MudPaper>

                                                <MudButton Class="ml-2 mt-2" Size="Size.Small" Color="Color.Default" Variant="Variant.Filled" StartIcon="@Icons.Material.Filled.PlayArrow" @onclick="Trigger_Export_Installed_Application_Table_Dialog">Dienst starten</MudButton>
                                                <MudButton Class="ml-2 mt-2" Size="Size.Small" Color="Color.Default" Variant="Variant.Filled" StartIcon="@Icons.Material.Filled.Stop" @onclick="Trigger_Export_Installed_Application_Table_Dialog">Dienst stoppen</MudButton>
                                        
                                                <MudTooltip Text="Daten exportieren">
                                                    <MudIconButton Class="ml-2 mt-2" Icon="@Icons.Material.Filled.FileDownload" Variant="Variant.Filled" Size="Size.Small" Color="Color.Default" @onclick="Trigger_Export_Applications_Services_Table_Dialog"></MudIconButton>
                                                </MudTooltip>

                                                <MudTable Class="mt-0" Height="50vh" FixedHeader="true" FixedFooter="true" Hover="true" RowsPerPage="25" Dense="true" Items="@applications_services_mysql_data" Filter="new Func<Applications_Services_Entity, bool>(Applications_Services_Table_Filter_Func)">
                                                    <ToolBarContent>
                                                        <MudTextField @bind-Value="applications_services_table_search_string" Placeholder="Suche" Adornment="Adornment.Start" AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Medium" Class="mt-0"></MudTextField>
                                                    </ToolBarContent>
                                                    <HeaderContent>
                                                        <MudTh Sortable="true" @onclick="() => applications_services_table_sorted_column = (nameof(Applications_Services_Entity.display_name))" style="white-space: nowrap;">Anzeigename</MudTh>
                                                        <MudTh Sortable="true" @onclick="() => applications_services_table_sorted_column = (nameof(Applications_Services_Entity.name))" style="white-space: nowrap;">Dienstname</MudTh>
                                                        <MudTh Sortable="true" @onclick="() => applications_services_table_sorted_column = (nameof(Applications_Services_Entity.status))" style="white-space: nowrap;">Status</MudTh>
                                                        <MudTh Sortable="true" @onclick="() => applications_services_table_sorted_column = (nameof(Applications_Services_Entity.start_type))" style="white-space: nowrap;">Starttyp</MudTh>
                                                        <MudTh Sortable="true" @onclick="() => applications_services_table_sorted_column = (nameof(Applications_Services_Entity.login_as))" style="white-space: nowrap;">Anmelden als</MudTh>
                                                        <MudTh Sortable="true" @onclick="() => applications_services_table_sorted_column = (nameof(Applications_Services_Entity.path))" style="white-space: nowrap;">Pfad</MudTh>
                                                        <MudTh Sortable="true" @onclick="() => applications_services_table_sorted_column = (nameof(Applications_Services_Entity.description))" style="white-space: nowrap;">Beschreibung</MudTh>
                                                    </HeaderContent>
                                                    <RowTemplate Context="applications_services_row">

                                                        <MudTd DataLabel="Anzeigename" @onclick="() => Applications_Services_RowClickHandler(applications_services_row)" class="@Applications_Services_GetRowClass(applications_services_row)" style="white-space: nowrap;">
                                                            <span style="display: flex; align-items: center;">
                                                                &nbsp;@applications_services_row.display_name
                                                            </span>
                                                        </MudTd>

                                                        <MudTd DataLabel="Dienstname" @onclick="() => Applications_Services_RowClickHandler(applications_services_row)" class="@Applications_Services_GetRowClass(applications_services_row)" style="white-space: nowrap;">
                                                            <span style="display: flex; align-items: center;">
                                                                &nbsp;@applications_services_row.name
                                                            </span>
                                                        </MudTd>

                                                        <MudTd DataLabel="Status" @onclick="() => Applications_Services_RowClickHandler(applications_services_row)" class="@Applications_Services_GetRowClass(applications_services_row)" style="white-space: nowrap;">
                                                            <span style="display: flex; align-items: center;">
                                                                &nbsp;@applications_services_row.status
                                                            </span>
                                                        </MudTd>

                                                        <MudTd DataLabel="Starttyp" @onclick="() => Applications_Services_RowClickHandler(applications_services_row)" class="@Applications_Services_GetRowClass(applications_services_row)" style="white-space: nowrap;">
                                                            <span style="display: flex; align-items: center;">
                                                                &nbsp;@applications_services_row.start_type
                                                            </span>
                                                        </MudTd>

                                                        <MudTd DataLabel="Anmelden als" @onclick="() => Applications_Services_RowClickHandler(applications_services_row)" class="@Applications_Services_GetRowClass(applications_services_row)" style="white-space: nowrap;">
                                                            <span style="display: flex; align-items: center;">
                                                                &nbsp;@applications_services_row.login_as
                                                            </span>
                                                        </MudTd>

                                                        <MudTd DataLabel="Pfad" @onclick="() => Applications_Services_RowClickHandler(applications_services_row)" class="@Applications_Services_GetRowClass(applications_services_row)" style="white-space: nowrap;">
                                                            <span style="display: flex; align-items: center;">
                                                                &nbsp;@applications_services_row.path
                                                            </span>
                                                        </MudTd>

                                                        <MudTd DataLabel="Beschreibung" @onclick="() => Applications_Services_RowClickHandler(applications_services_row)" class="@Applications_Services_GetRowClass(applications_services_row)" style="white-space: nowrap;">
                                                            <span style="display: flex; align-items: center;">
                                                                &nbsp;@applications_services_row.description
                                                            </span>
                                                        </MudTd>

                                                    </RowTemplate>
                                                    <PagerContent>
                                                        <MudTablePager PageSizeOptions="new int[] { 10, 25, 50, 100, 250, 500, int.MaxValue }" RowsPerPageString="Einträge pro Seite" />
                                                    </PagerContent>
                                                </MudTable>
                                            
                                            </MudPaper>

                                            <MudExpansionPanel Class="mt-5 custom-expansion-panel" >
                                                <TitleContent>
                                                    <div class="d-flex">
                                                        <MudIcon Icon="@Icons.Material.Filled.History" class="mr-3"></MudIcon>
                                                        <MudText>Verlauf</MudText>
                                                    </div>
                                                </TitleContent>

                                                <ChildContent>

                                                        <div style="display: flex; align-items: center;">
                                                            <MudDateRangePicker PickerVariant="PickerVariant.Dialog" Label="Zeitraum" @ref="applications_services_history_table_picker" @bind-DateRange="applications_services_history_table_dateRange" Style="max-width: 300px;">
                                                                <PickerActions Context="pickerActionsContext">
                                                                    <MudButton Class="mr-auto align-self-start" OnClick="@(() => applications_services_history_table_picker.Clear())">Zurücksetzen</MudButton>
                                                                    <MudButton OnClick="@(() => applications_services_history_table_picker.Close(false))">Abbrechen</MudButton>
                                                                    <MudButton Color="Color.Primary" @onclick="async () => { await Applications_Services_History_Table_Submit_Picker(); }">Bestätigen</MudButton>
                                                                </PickerActions>
                                                            </MudDateRangePicker>

                                                            <MudTooltip Text="Daten exportieren">
                                                                <MudIconButton Class="ml-2 mt-5" Icon="@Icons.Material.Filled.FileDownload" Variant="Variant.Filled" Size="Size.Small" Color="Color.Default"  @onclick="Trigger_Export_Application_Services_History_Table_Dialog"></MudIconButton>
                                                            </MudTooltip>
                                                        </div>

                                                        <MudTable Class="mt-2" Height="50vh" FixedHeader="true" FixedFooter="true" Hover="true" RowsPerPage="int.MaxValue" Dense="true" Items="@applications_services_history_mysql_data" GroupBy="@applications_services_history_groupDefinition" Filter="new Func<Applications_Services_History_Entity, bool>(Applications_Services_History_Table_Filter_Func)">
                                                            <ToolBarContent>
                                                                <MudTextField Class="mt-0" @bind-Value="applications_services_history_table_search_string" Placeholder="Suche" Adornment="Adornment.Start" AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Medium"></MudTextField>
                                                            </ToolBarContent>
                                                            <HeaderContent>
                                                                <MudTh Sortable="true" @onclick="() => applications_services_history_table_sorted_column = (nameof(Applications_Services_History_Entity.display_name))" style="white-space: nowrap;">Anzeigename</MudTh>
                                                                <MudTh Sortable="true" @onclick="() => applications_services_history_table_sorted_column = (nameof(Applications_Services_History_Entity.name))" style="white-space: nowrap;">Dienstname</MudTh>
                                                                <MudTh Sortable="true" @onclick="() => applications_services_history_table_sorted_column = (nameof(Applications_Services_History_Entity.status))" style="white-space: nowrap;">Status</MudTh>
                                                                <MudTh Sortable="true" @onclick="() => applications_services_history_table_sorted_column = (nameof(Applications_Services_History_Entity.start_type))" style="white-space: nowrap;">Starttyp</MudTh>
                                                                <MudTh Sortable="true" @onclick="() => applications_services_history_table_sorted_column = (nameof(Applications_Services_History_Entity.login_as))" style="white-space: nowrap;">Anmelden als</MudTh>
                                                                <MudTh Sortable="true" @onclick="() => applications_services_history_table_sorted_column = (nameof(Applications_Services_History_Entity.path))" style="white-space: nowrap;">Pfad</MudTh>
                                                                <MudTh Sortable="true" @onclick="() => applications_services_history_table_sorted_column = (nameof(Applications_Services_History_Entity.description))" style="white-space: nowrap;">Beschreibung</MudTh>
                                                            </HeaderContent>
                                                            <GroupHeaderTemplate Context="groupContext">
                                                                <MudTh Class="mud-table-cell-custom-group" colspan="6">@($"{groupContext.GroupName}: {groupContext.Key}") </MudTh>
                                                            </GroupHeaderTemplate>
                                                            <RowTemplate Context="applications_services_history_row">

                                                                <MudTd DataLabel="Anzeigename" @onclick="() => Applications_Services_History_RowClickHandler(applications_services_history_row)" class="@Applications_Services_History_GetRowClass(applications_services_history_row)" style="white-space: nowrap;">
                                                                    <span style="display: flex; align-items: center;">
                                                                        &nbsp;@applications_services_history_row.display_name
                                                                    </span>
                                                                </MudTd>
                                                                <MudTd DataLabel="Dienstname" @onclick="() => Applications_Services_History_RowClickHandler(applications_services_history_row)" class="@Applications_Services_History_GetRowClass(applications_services_history_row)" style="white-space: nowrap;">
                                                                    <span style="display: flex; align-items: center;">
                                                                        &nbsp;@applications_services_history_row.name
                                                                    </span>
                                                                </MudTd>

                                                                <MudTd DataLabel="Status" @onclick="() => Applications_Services_History_RowClickHandler(applications_services_history_row)" class="@Applications_Services_History_GetRowClass(applications_services_history_row)" style="white-space: nowrap;">
                                                                    <span style="display: flex; align-items: center;">
                                                                        &nbsp;@applications_services_history_row.status
                                                                    </span>
                                                                </MudTd>
                                                                <MudTd DataLabel="Starttyp" @onclick="() => Applications_Services_History_RowClickHandler(applications_services_history_row)" class="@Applications_Services_History_GetRowClass(applications_services_history_row)" style="white-space: nowrap;">
                                                                    <span style="display: flex; align-items: center;">
                                                                        &nbsp;@applications_services_history_row.start_type
                                                                    </span>
                                                                </MudTd>
                                                                <MudTd DataLabel="Anmelden als" @onclick="() => Applications_Services_History_RowClickHandler(applications_services_history_row)" class="@Applications_Services_History_GetRowClass(applications_services_history_row)" style="white-space: nowrap;">
                                                                    <span style="display: flex; align-items: center;">
                                                                        &nbsp;@applications_services_history_row.login_as
                                                                    </span>
                                                                </MudTd>
                                                                <MudTd DataLabel="Pfad" @onclick="() => Applications_Services_History_RowClickHandler(applications_services_history_row)" class="@Applications_Services_History_GetRowClass(applications_services_history_row)" style="white-space: nowrap;">
                                                                    <span style="display: flex; align-items: center;">
                                                                        &nbsp;@applications_services_history_row.path
                                                                    </span>
                                                                </MudTd>
                                                                <MudTd DataLabel="Beschreibung" @onclick="() => Applications_Services_History_RowClickHandler(applications_services_history_row)" class="@Applications_Services_History_GetRowClass(applications_services_history_row)" style="white-space: nowrap;">
                                                                    <span style="display: flex; align-items: center;">
                                                                        &nbsp;@applications_services_history_row.description
                                                                    </span>
                                                                </MudTd>

                                                            </RowTemplate>
                                                            <PagerContent>
                                                                <MudTablePager PageSizeOptions="new int[] { 10, 25, 50, 100, 250, 500, int.MaxValue }" RowsPerPageString="Einträge pro Seite" />
                                                            </PagerContent>
                                                        </MudTable>
                                                </ChildContent>
                                            </MudExpansionPanel>
                                        </MudTabPanel>
                                        <MudTabPanel Text="Treiber">
                                            <MudPaper>

                                                <MudTooltip Text="Daten exportieren">
                                                    <MudIconButton Class="ml-2 mt-2" Icon="@Icons.Material.Filled.FileDownload" Variant="Variant.Filled" Size="Size.Small" Color="Color.Default" @onclick="Trigger_Export_Applications_Drivers_Table_Dialog"></MudIconButton>
                                                </MudTooltip>

                                                <MudTable Class="mt-0" Height="50vh" FixedHeader="true" FixedFooter="true" Hover="true" RowsPerPage="25" Dense="true" Items="@applications_drivers_mysql_data" Filter="new Func<Applications_Drivers_Entity, bool>(Applications_Drivers_Table_Filter_Func)">
                                                    <ToolBarContent>
                                                        <MudTextField @bind-Value="applications_drivers_table_search_string" Placeholder="Suche" Adornment="Adornment.Start" AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Medium" Class="mt-0"></MudTextField>
                                                    </ToolBarContent>
                                                    <HeaderContent>
                                                        <MudTh Sortable="true" @onclick="() => applications_drivers_table_sorted_column = (nameof(Applications_Drivers_Entity.display_name))" style="white-space: nowrap;">Anzeigename</MudTh>
                                                        <MudTh Sortable="true" @onclick="() => applications_drivers_table_sorted_column = (nameof(Applications_Drivers_Entity.name))" style="white-space: nowrap;">Name</MudTh>
                                                        <MudTh Sortable="true" @onclick="() => applications_drivers_table_sorted_column = (nameof(Applications_Drivers_Entity.description))" style="white-space: nowrap;">Beschreibung</MudTh>
                                                        <MudTh Sortable="true" @onclick="() => applications_drivers_table_sorted_column = (nameof(Applications_Drivers_Entity.status))" style="white-space: nowrap;">Status</MudTh>
                                                        <MudTh Sortable="true" @onclick="() => applications_drivers_table_sorted_column = (nameof(Applications_Drivers_Entity.type))" style="white-space: nowrap;">Typ</MudTh>
                                                        <MudTh Sortable="true" @onclick="() => applications_drivers_table_sorted_column = (nameof(Applications_Drivers_Entity.start_type))" style="white-space: nowrap;">Starttyp</MudTh>
                                                        <MudTh Sortable="true" @onclick="() => applications_drivers_table_sorted_column = (nameof(Applications_Drivers_Entity.path))" style="white-space: nowrap;">Pfad</MudTh>
                                                        <MudTh Sortable="true" @onclick="() => applications_drivers_table_sorted_column = (nameof(Applications_Drivers_Entity.version))" style="white-space: nowrap;">Version</MudTh>
                                                    </HeaderContent>
                                                    <RowTemplate Context="applications_drivers_row">

                                                        <MudTd DataLabel="Anzeigename" @onclick="() => Applications_Drivers_RowClickHandler(applications_drivers_row)" class="@Applications_Drivers_GetRowClass(applications_drivers_row)" style="white-space: nowrap;">
                                                            <span style="display: flex; align-items: center;">
                                                                &nbsp;@applications_drivers_row.display_name
                                                            </span>
                                                        </MudTd>

                                                        <MudTd DataLabel="Name" @onclick="() => Applications_Drivers_RowClickHandler(applications_drivers_row)" class="@Applications_Drivers_GetRowClass(applications_drivers_row)" style="white-space: nowrap;">
                                                            <span style="display: flex; align-items: center;">
                                                                &nbsp;@applications_drivers_row.name
                                                            </span>
                                                        </MudTd>

                                                        <MudTd DataLabel="Beschreibung" @onclick="() => Applications_Drivers_RowClickHandler(applications_drivers_row)" class="@Applications_Drivers_GetRowClass(applications_drivers_row)" style="white-space: nowrap;">
                                                            <span style="display: flex; align-items: center;">
                                                                &nbsp;@applications_drivers_row.description
                                                            </span>
                                                        </MudTd>

                                                        <MudTd DataLabel="Status" @onclick="() => Applications_Drivers_RowClickHandler(applications_drivers_row)" class="@Applications_Drivers_GetRowClass(applications_drivers_row)" style="white-space: nowrap;">
                                                            <span style="display: flex; align-items: center;">
                                                                &nbsp;@applications_drivers_row.status
                                                            </span>
                                                        </MudTd>

                                                        <MudTd DataLabel="Typ" @onclick="() => Applications_Drivers_RowClickHandler(applications_drivers_row)" class="@Applications_Drivers_GetRowClass(applications_drivers_row)" style="white-space: nowrap;">
                                                            <span style="display: flex; align-items: center;">
                                                                &nbsp;@applications_drivers_row.type
                                                            </span>
                                                        </MudTd>

                                                        <MudTd DataLabel="Starttyp" @onclick="() => Applications_Drivers_RowClickHandler(applications_drivers_row)" class="@Applications_Drivers_GetRowClass(applications_drivers_row)" style="white-space: nowrap;">
                                                            <span style="display: flex; align-items: center;">
                                                                &nbsp;@applications_drivers_row.start_type
                                                            </span>
                                                        </MudTd>

                                                        <MudTd DataLabel="Pfad" @onclick="() => Applications_Drivers_RowClickHandler(applications_drivers_row)" class="@Applications_Drivers_GetRowClass(applications_drivers_row)" style="white-space: nowrap;">
                                                            <span style="display: flex; align-items: center;">
                                                                &nbsp;@applications_drivers_row.path
                                                            </span>
                                                        </MudTd>

                                                        <MudTd DataLabel="Version" @onclick="() => Applications_Drivers_RowClickHandler(applications_drivers_row)" class="@Applications_Drivers_GetRowClass(applications_drivers_row)" style="white-space: nowrap;">
                                                            <span style="display: flex; align-items: center;">
                                                                &nbsp;@applications_drivers_row.version
                                                            </span>
                                                        </MudTd>

                                                    </RowTemplate>
                                                    <PagerContent>
                                                        <MudTablePager PageSizeOptions="new int[] { 10, 25, 50, 100, 250, 500, int.MaxValue }" RowsPerPageString="Einträge pro Seite" />
                                                    </PagerContent>
                                                </MudTable>

                                            </MudPaper>

                                            <MudExpansionPanel Class="mt-5 custom-expansion-panel" >
                                                <TitleContent>
                                                    <div class="d-flex">
                                                        <MudIcon Icon="@Icons.Material.Filled.History" class="mr-3"></MudIcon>
                                                        <MudText>Verlauf</MudText>
                                                    </div>
                                                </TitleContent>

                                                <ChildContent>
                                                        <div style="display: flex; align-items: center;">
                                                            <MudDateRangePicker PickerVariant="PickerVariant.Dialog" Label="Zeitraum" @ref="applications_drivers_history_table_picker" @bind-DateRange="applications_drivers_history_table_dateRange" Style="max-width: 300px;">
                                                                <PickerActions Context="pickerActionsContext">
                                                                    <MudButton Class="mr-auto align-self-start" OnClick="@(() => applications_drivers_history_table_picker.Clear())">Zurücksetzen</MudButton>
                                                                    <MudButton OnClick="@(() => applications_drivers_history_table_picker.Close(false))">Abbrechen</MudButton>
                                                                    <MudButton Color="Color.Primary" @onclick="async () => { await Applications_Drivers_History_Table_Submit_Picker(); }">Bestätigen</MudButton>
                                                                </PickerActions>
                                                            </MudDateRangePicker>

                                                            <MudTooltip Text="Daten exportieren">
                                                                <MudIconButton Class="ml-2 mt-5" Icon="@Icons.Material.Filled.FileDownload" Variant="Variant.Filled" Size="Size.Small" Color="Color.Default"  @onclick="Trigger_Export_Application_Drivers_History_Table_Dialog"></MudIconButton>
                                                            </MudTooltip>
                                                        </div>

                                                        <MudTable Class="mt-5" Height="50vh" FixedHeader="true" FixedFooter="true" Hover="true" RowsPerPage="int.MaxValue" Dense="true" Items="@applications_drivers_history_mysql_data" GroupBy="@applications_drivers_history_groupDefinition" Filter="new Func<Applications_Drivers_History_Entity, bool>(Applications_Drivers_History_Table_Filter_Func)">
                                                            <ToolBarContent>
                                                                <MudTextField Class="mt-0" @bind-Value="applications_drivers_history_table_search_string" Placeholder="Suche" Adornment="Adornment.Start" AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Medium"></MudTextField>
                                                            </ToolBarContent>
                                                            <HeaderContent>
                                                                <MudTh Sortable="true" @onclick="() => applications_drivers_history_table_sorted_column = (nameof(Applications_Drivers_History_Entity.display_name))" style="white-space: nowrap;">Anzeigename</MudTh>
                                                                <MudTh Sortable="true" @onclick="() => applications_drivers_history_table_sorted_column = (nameof(Applications_Drivers_History_Entity.name))" style="white-space: nowrap;">Name</MudTh>
                                                                <MudTh Sortable="true" @onclick="() => applications_drivers_history_table_sorted_column = (nameof(Applications_Drivers_History_Entity.description))" style="white-space: nowrap;">Beschreibung</MudTh>
                                                                <MudTh Sortable="true" @onclick="() => applications_drivers_history_table_sorted_column = (nameof(Applications_Drivers_History_Entity.status))" style="white-space: nowrap;">Status</MudTh>
                                                                <MudTh Sortable="true" @onclick="() => applications_drivers_history_table_sorted_column = (nameof(Applications_Drivers_History_Entity.type))" style="white-space: nowrap;">Typ</MudTh>
                                                                <MudTh Sortable="true" @onclick="() => applications_drivers_history_table_sorted_column = (nameof(Applications_Drivers_History_Entity.start_type))" style="white-space: nowrap;">Starttyp</MudTh>
                                                                <MudTh Sortable="true" @onclick="() => applications_drivers_history_table_sorted_column = (nameof(Applications_Drivers_History_Entity.path))" style="white-space: nowrap;">Pfad</MudTh>
                                                                <MudTh Sortable="true" @onclick="() => applications_drivers_history_table_sorted_column = (nameof(Applications_Drivers_History_Entity.version))" style="white-space: nowrap;">Version</MudTh>
                                                            </HeaderContent>
                                                            <GroupHeaderTemplate Context="groupContext">
                                                                <MudTh Class="mud-table-cell-custom-group" colspan="6">@($"{groupContext.GroupName}: {groupContext.Key}") </MudTh>
                                                            </GroupHeaderTemplate>
                                                            <RowTemplate Context="applications_drivers_history_row">

                                                                <MudTd DataLabel="Anzeigename" @onclick="() => Applications_Drivers_History_RowClickHandler(applications_drivers_history_row)" class="@Applications_Drivers_History_GetRowClass(applications_drivers_history_row)" style="white-space: nowrap;">
                                                                    <span style="display: flex; align-items: center;">
                                                                        &nbsp;@applications_drivers_history_row.display_name
                                                                    </span>
                                                                </MudTd>
                                                                <MudTd DataLabel="Name" @onclick="() => Applications_Drivers_History_RowClickHandler(applications_drivers_history_row)" class="@Applications_Drivers_History_GetRowClass(applications_drivers_history_row)" style="white-space: nowrap;">
                                                                    <span style="display: flex; align-items: center;">
                                                                        &nbsp;@applications_drivers_history_row.name
                                                                    </span>
                                                                </MudTd>

                                                                <MudTd DataLabel="Beschreibung" @onclick="() => Applications_Drivers_History_RowClickHandler(applications_drivers_history_row)" class="@Applications_Drivers_History_GetRowClass(applications_drivers_history_row)" style="white-space: nowrap;">
                                                                    <span style="display: flex; align-items: center;">
                                                                        &nbsp;@applications_drivers_history_row.description
                                                                    </span>
                                                                </MudTd>

                                                                <MudTd DataLabel="Status" @onclick="() => Applications_Drivers_History_RowClickHandler(applications_drivers_history_row)" class="@Applications_Drivers_History_GetRowClass(applications_drivers_history_row)" style="white-space: nowrap;">
                                                                    <span style="display: flex; align-items: center;">
                                                                        &nbsp;@applications_drivers_history_row.status
                                                                    </span>
                                                                </MudTd>

                                                                <MudTd DataLabel="Typ" @onclick="() => Applications_Drivers_History_RowClickHandler(applications_drivers_history_row)" class="@Applications_Drivers_History_GetRowClass(applications_drivers_history_row)" style="white-space: nowrap;">
                                                                    <span style="display: flex; align-items: center;">
                                                                        &nbsp;@applications_drivers_history_row.type
                                                                    </span>
                                                                </MudTd>

                                                                <MudTd DataLabel="Starttyp" @onclick="() => Applications_Drivers_History_RowClickHandler(applications_drivers_history_row)" class="@Applications_Drivers_History_GetRowClass(applications_drivers_history_row)" style="white-space: nowrap;">
                                                                    <span style="display: flex; align-items: center;">
                                                                        &nbsp;@applications_drivers_history_row.start_type
                                                                    </span>
                                                                </MudTd>

                                                                <MudTd DataLabel="Pfad" @onclick="() => Applications_Drivers_History_RowClickHandler(applications_drivers_history_row)" class="@Applications_Drivers_History_GetRowClass(applications_drivers_history_row)" style="white-space: nowrap;">
                                                                    <span style="display: flex; align-items: center;">
                                                                        &nbsp;@applications_drivers_history_row.path
                                                                    </span>
                                                                </MudTd>
                                                                <MudTd DataLabel="Version" @onclick="() => Applications_Drivers_History_RowClickHandler(applications_drivers_history_row)" class="@Applications_Drivers_History_GetRowClass(applications_drivers_history_row)" style="white-space: nowrap;">
                                                                    <span style="display: flex; align-items: center;">
                                                                        &nbsp;@applications_drivers_history_row.version
                                                                    </span>
                                                                </MudTd>

                                                            </RowTemplate>
                                                            <PagerContent>
                                                                <MudTablePager PageSizeOptions="new int[] { 10, 25, 50, 100, 250, 500, int.MaxValue }" RowsPerPageString="Einträge pro Seite" />
                                                            </PagerContent>
                                                        </MudTable>
                                                </ChildContent>
                                            </MudExpansionPanel>
                                        </MudTabPanel>
                                    </MudTabs>
                                </MudTabPanel>
                            }
                                
                            @if (permissions_devices_task_manager)
                            {
                                <MudTabPanel Text="Task Manager">
                                    <MudPaper>

                                        <MudButton Class="ml-2 mt-2" Size="Size.Small" Color="Color.Warning" Variant="Variant.Filled" StartIcon="@Icons.Material.Filled.Stop" @onclick="Trigger_Export_Installed_Application_Table_Dialog">Prozess beenden</MudButton>

                                        <MudTooltip Text="Daten exportieren">
                                            <MudIconButton Class="ml-2 mt-2" Icon="@Icons.Material.Filled.FileDownload" Variant="Variant.Filled" Size="Size.Small" Color="Color.Default" @onclick="Trigger_Export_Task_Manager_Table_Dialog"></MudIconButton>
                                        </MudTooltip>

                                        <MudTable Class="mt-0" Height="60vh" FixedHeader="true" FixedFooter="true" Hover="true" RowsPerPage="25" Dense="true" Items="@task_manager_mysql_data" Filter="new Func<Task_Manager_Entity, bool>(Task_Manager_Table_Filter_Func)">
                                            <ToolBarContent>
                                                <MudTextField @bind-Value="task_manager_table_search_string" Placeholder="Suche" Adornment="Adornment.Start" AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Medium" Class="mt-0"></MudTextField>
                                            </ToolBarContent>
                                            <HeaderContent>
                                                <MudTh Sortable="true" @onclick="() => task_manager_table_sorted_column = (nameof(Task_Manager_Entity.name))" style="white-space: nowrap;">Name</MudTh>
                                                <MudTh Sortable="true" @onclick="() => task_manager_table_sorted_column = (nameof(Task_Manager_Entity.pid))" style="white-space: nowrap;">PID</MudTh>
                                                <MudTh Sortable="true" @onclick="() => task_manager_table_sorted_column = (nameof(Task_Manager_Entity.parent_name))" style="white-space: nowrap;">Parent Name</MudTh>
                                                <MudTh Sortable="true" @onclick="() => task_manager_table_sorted_column = (nameof(Task_Manager_Entity.parent_pid))" style="white-space: nowrap;">Parent PID</MudTh>
                                                <MudTh Sortable="true" @onclick="() => task_manager_table_sorted_column = (nameof(Task_Manager_Entity.cpu))" style="white-space: nowrap;">CPU (%)</MudTh>
                                                <MudTh Sortable="true" @onclick="() => task_manager_table_sorted_column = (nameof(Task_Manager_Entity.ram))" style="white-space: nowrap;">RAM (MB)</MudTh>
                                                <MudTh Sortable="true" @onclick="() => task_manager_table_sorted_column = (nameof(Task_Manager_Entity.user))" style="white-space: nowrap;">Benutzer</MudTh>
                                                <MudTh Sortable="true" @onclick="() => task_manager_table_sorted_column = (nameof(Task_Manager_Entity.created))" style="white-space: nowrap;">Erstellt</MudTh>
                                                <MudTh Sortable="true" @onclick="() => task_manager_table_sorted_column = (nameof(Task_Manager_Entity.path))" style="white-space: nowrap;">Pfad</MudTh>
                                                <MudTh Sortable="true" @onclick="() => task_manager_table_sorted_column = (nameof(Task_Manager_Entity.cmd))" style="white-space: nowrap;">Commandline</MudTh>
                                                <MudTh Sortable="true" @onclick="() => task_manager_table_sorted_column = (nameof(Task_Manager_Entity.handles))" style="white-space: nowrap;">Handles</MudTh>
                                                <MudTh Sortable="true" @onclick="() => task_manager_table_sorted_column = (nameof(Task_Manager_Entity.threads))" style="white-space: nowrap;">Threads</MudTh>
                                                <MudTh Sortable="true" @onclick="() => task_manager_table_sorted_column = (nameof(Task_Manager_Entity.read_operations))" style="white-space: nowrap;">Lese Operationen</MudTh>
                                                <MudTh Sortable="true" @onclick="() => task_manager_table_sorted_column = (nameof(Task_Manager_Entity.read_transfer))" style="white-space: nowrap;">Lese Transfer</MudTh>
                                                <MudTh Sortable="true" @onclick="() => task_manager_table_sorted_column = (nameof(Task_Manager_Entity.write_operations))" style="white-space: nowrap;">Schreib Operationen</MudTh>
                                                <MudTh Sortable="true" @onclick="() => task_manager_table_sorted_column = (nameof(Task_Manager_Entity.write_transfer))" style="white-space: nowrap;">Schreib Transfer</MudTh>
                                            </HeaderContent>
                                            <RowTemplate Context="task_manager_row">

                                                <MudTd DataLabel="Name" @onclick="() => Task_Manager_RowClickHandler(task_manager_row)" class="@Task_Manager_GetRowClass(task_manager_row)" style="white-space: nowrap;">
                                                    <span style="display: flex; align-items: center;">
                                                        &nbsp;@task_manager_row.name
                                                    </span>
                                                </MudTd>

                                                <MudTd DataLabel="PID" @onclick="() => Task_Manager_RowClickHandler(task_manager_row)" class="@Task_Manager_GetRowClass(task_manager_row)" style="white-space: nowrap;">
                                                    <span style="display: flex; align-items: center;">
                                                        &nbsp;@task_manager_row.pid
                                                    </span>
                                                </MudTd>

                                                <MudTd DataLabel="Parent Name" @onclick="() => Task_Manager_RowClickHandler(task_manager_row)" class="@Task_Manager_GetRowClass(task_manager_row)" style="white-space: nowrap;">
                                                    <span style="display: flex; align-items: center;">
                                                        &nbsp;@task_manager_row.parent_name
                                                    </span>
                                                </MudTd>

                                                <MudTd DataLabel="Parent PID" @onclick="() => Task_Manager_RowClickHandler(task_manager_row)" class="@Task_Manager_GetRowClass(task_manager_row)" style="white-space: nowrap;">
                                                    <span style="display: flex; align-items: center;">
                                                        &nbsp;@task_manager_row.parent_pid
                                                    </span>
                                                </MudTd>

                                                <MudTd DataLabel="CPU (%)" @onclick="() => Task_Manager_RowClickHandler(task_manager_row)" class="@Task_Manager_GetRowClass(task_manager_row)" style="white-space: nowrap;">
                                                    <span style="display: flex; align-items: center;">
                                                        &nbsp;@task_manager_row.cpu
                                                    </span>
                                                </MudTd>

                                                <MudTd DataLabel="RAM (MB)" @onclick="() => Task_Manager_RowClickHandler(task_manager_row)" class="@Task_Manager_GetRowClass(task_manager_row)" style="white-space: nowrap;">
                                                    <span style="display: flex; align-items: center;">
                                                        &nbsp;@task_manager_row.ram
                                                    </span>
                                                </MudTd>

                                                <MudTd DataLabel="Benutzer" @onclick="() => Task_Manager_RowClickHandler(task_manager_row)" class="@Task_Manager_GetRowClass(task_manager_row)" style="white-space: nowrap;">
                                                    <span style="display: flex; align-items: center;">
                                                        &nbsp;@task_manager_row.user
                                                    </span>
                                                </MudTd>

                                                <MudTd DataLabel="Erstellt" @onclick="() => Task_Manager_RowClickHandler(task_manager_row)" class="@Task_Manager_GetRowClass(task_manager_row)" style="white-space: nowrap;">
                                                    <span style="display: flex; align-items: center;">
                                                        &nbsp;@task_manager_row.created
                                                    </span>
                                                </MudTd>

                                                <MudTd DataLabel="Pfad" @onclick="() => Task_Manager_RowClickHandler(task_manager_row)" class="@Task_Manager_GetRowClass(task_manager_row)" style="white-space: nowrap;">
                                                    <span style="display: flex; align-items: center;">
                                                        &nbsp;@task_manager_row.path
                                                    </span>
                                                </MudTd>

                                                <MudTd DataLabel="Commandline" @onclick="() => Task_Manager_RowClickHandler(task_manager_row)" class="@Task_Manager_GetRowClass(task_manager_row)" style="white-space: nowrap;">
                                                    <span style="display: flex; align-items: center;">
                                                        &nbsp;@task_manager_row.cmd
                                                    </span>
                                                </MudTd>

                                                <MudTd DataLabel="Handles" @onclick="() => Task_Manager_RowClickHandler(task_manager_row)" class="@Task_Manager_GetRowClass(task_manager_row)" style="white-space: nowrap;">
                                                    <span style="display: flex; align-items: center;">
                                                        &nbsp;@task_manager_row.handles
                                                    </span>
                                                </MudTd>

                                                <MudTd DataLabel="Threads" @onclick="() => Task_Manager_RowClickHandler(task_manager_row)" class="@Task_Manager_GetRowClass(task_manager_row)" style="white-space: nowrap;">
                                                    <span style="display: flex; align-items: center;">
                                                        &nbsp;@task_manager_row.threads
                                                    </span>
                                                </MudTd>

                                                <MudTd DataLabel="Lese Operationen" @onclick="() => Task_Manager_RowClickHandler(task_manager_row)" class="@Task_Manager_GetRowClass(task_manager_row)" style="white-space: nowrap;">
                                                    <span style="display: flex; align-items: center;">
                                                        &nbsp;@task_manager_row.read_operations
                                                    </span>
                                                </MudTd>

                                                <MudTd DataLabel="Lese Transfer" @onclick="() => Task_Manager_RowClickHandler(task_manager_row)" class="@Task_Manager_GetRowClass(task_manager_row)" style="white-space: nowrap;">
                                                    <span style="display: flex; align-items: center;">
                                                        &nbsp;@task_manager_row.read_transfer
                                                    </span>
                                                </MudTd>

                                                <MudTd DataLabel="Schreib Operationen" @onclick="() => Task_Manager_RowClickHandler(task_manager_row)" class="@Task_Manager_GetRowClass(task_manager_row)" style="white-space: nowrap;">
                                                    <span style="display: flex; align-items: center;">
                                                        &nbsp;@task_manager_row.write_operations
                                                    </span>
                                                </MudTd>

                                                <MudTd DataLabel="Schreib Transfer" @onclick="() => Task_Manager_RowClickHandler(task_manager_row)" class="@Task_Manager_GetRowClass(task_manager_row)" style="white-space: nowrap;">
                                                    <span style="display: flex; align-items: center;">
                                                        &nbsp;@task_manager_row.write_transfer
                                                    </span>
                                                </MudTd>

                                            </RowTemplate>
                                            <PagerContent>
                                                <MudTablePager PageSizeOptions="new int[] { 10, 25, 50, 100, 250, 500, int.MaxValue }" RowsPerPageString="Einträge pro Seite" />
                                            </PagerContent>
                                        </MudTable>

                                    </MudPaper>

                                    <MudExpansionPanel Class="mt-5 custom-expansion-panel" >
                                        <TitleContent>
                                            <div class="d-flex">
                                                <MudIcon Icon="@Icons.Material.Filled.History" class="mr-3"></MudIcon>
                                                <MudText>Verlauf</MudText>
                                            </div>
                                        </TitleContent>

                                        <ChildContent>

                                            <div style="display: flex; align-items: center;">
                                                <MudDateRangePicker PickerVariant="PickerVariant.Dialog" Label="Zeitraum" @ref="device_information_task_manager_history_table_picker" @bind-DateRange="device_information_task_manager_history_table_dateRange" Style="max-width: 300px;">
                                                    <PickerActions Context="pickerActionsContext">
                                                        <MudButton Class="mr-auto align-self-start" OnClick="@(() => device_information_task_manager_history_table_picker.Clear())">Zurücksetzen</MudButton>
                                                        <MudButton OnClick="@(() => device_information_task_manager_history_table_picker.Close(false))">Abbrechen</MudButton>
                                                        <MudButton Color="Color.Primary" @onclick="async () => { await Device_Information_Task_Manager_History_Table_Submit_Picker(); }">Bestätigen</MudButton>
                                                    </PickerActions>
                                                </MudDateRangePicker>

                                                <MudTooltip Text="Daten exportieren">
                                                    <MudIconButton Class="ml-2 mt-5" Icon="@Icons.Material.Filled.FileDownload" Variant="Variant.Filled" Size="Size.Small" Color="Color.Default"  @onclick="Export_Task_Manager_History_Table_Dialog"></MudIconButton>
                                                </MudTooltip>
                                            </div>

                                            <MudTable Class="mt-2" Height="25vh" FixedHeader="true" FixedFooter="true" Hover="true" RowsPerPage="int.MaxValue" Dense="true" Items="@task_manager_history_mysql_data" GroupBy="@task_manager_history_groupDefinition" Filter="new Func<Task_Manager_History_Entity, bool>(Task_Manager_History_Table_Filter_Func)">
                                                <ToolBarContent>
                                                    <MudTextField Class="mt-0" @bind-Value="task_manager_history_table_search_string" Placeholder="Suche" Adornment="Adornment.Start" AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Medium"></MudTextField>
                                                </ToolBarContent>
                                                <HeaderContent>
                                                    <MudTh Sortable="true" @onclick="() => task_manager_history_table_sorted_column = (nameof(Task_Manager_History_Entity.date))" style="white-space: nowrap;">Datum</MudTh>
                                                    <MudTh Sortable="true" @onclick="() => task_manager_history_table_sorted_column = (nameof(Task_Manager_History_Entity.name))" style="white-space: nowrap;">Name</MudTh>
                                                    <MudTh Sortable="true" @onclick="() => task_manager_history_table_sorted_column = (nameof(Task_Manager_History_Entity.pid))" style="white-space: nowrap;">PID</MudTh>
                                                    <MudTh Sortable="true" @onclick="() => task_manager_history_table_sorted_column = (nameof(Task_Manager_History_Entity.parent_name))" style="white-space: nowrap;">Parent Name</MudTh>
                                                    <MudTh Sortable="true" @onclick="() => task_manager_history_table_sorted_column = (nameof(Task_Manager_History_Entity.parent_pid))" style="white-space: nowrap;">Parent PID</MudTh>
                                                    <MudTh Sortable="true" @onclick="() => task_manager_history_table_sorted_column = (nameof(Task_Manager_History_Entity.cpu))" style="white-space: nowrap;">CPU (%)</MudTh>
                                                    <MudTh Sortable="true" @onclick="() => task_manager_history_table_sorted_column = (nameof(Task_Manager_History_Entity.ram))" style="white-space: nowrap;">RAM (MB)</MudTh>
                                                    <MudTh Sortable="true" @onclick="() => task_manager_history_table_sorted_column = (nameof(Task_Manager_History_Entity.user))" style="white-space: nowrap;">Benutzer</MudTh>
                                                    <MudTh Sortable="true" @onclick="() => task_manager_history_table_sorted_column = (nameof(Task_Manager_History_Entity.created))" style="white-space: nowrap;">Erstellt</MudTh>
                                                    <MudTh Sortable="true" @onclick="() => task_manager_history_table_sorted_column = (nameof(Task_Manager_History_Entity.path))" style="white-space: nowrap;">Pfad</MudTh>
                                                    <MudTh Sortable="true" @onclick="() => task_manager_history_table_sorted_column = (nameof(Task_Manager_History_Entity.cmd))" style="white-space: nowrap;">Commandline</MudTh>
                                                    <MudTh Sortable="true" @onclick="() => task_manager_history_table_sorted_column = (nameof(Task_Manager_History_Entity.handles))" style="white-space: nowrap;">Handles</MudTh>
                                                    <MudTh Sortable="true" @onclick="() => task_manager_history_table_sorted_column = (nameof(Task_Manager_History_Entity.threads))" style="white-space: nowrap;">Threads</MudTh>
                                                    <MudTh Sortable="true" @onclick="() => task_manager_history_table_sorted_column = (nameof(Task_Manager_History_Entity.read_operations))" style="white-space: nowrap;">Lese Operationen</MudTh>
                                                    <MudTh Sortable="true" @onclick="() => task_manager_history_table_sorted_column = (nameof(Task_Manager_History_Entity.read_transfer))" style="white-space: nowrap;">Lese Transfer</MudTh>
                                                    <MudTh Sortable="true" @onclick="() => task_manager_history_table_sorted_column = (nameof(Task_Manager_History_Entity.write_operations))" style="white-space: nowrap;">Schreib Operationen</MudTh>
                                                    <MudTh Sortable="true" @onclick="() => task_manager_history_table_sorted_column = (nameof(Task_Manager_History_Entity.write_transfer))" style="white-space: nowrap;">Schreib Transfer</MudTh>
                                                </HeaderContent>
                                                <GroupHeaderTemplate Context="groupContext">
                                                    <MudTh Class="mud-table-cell-custom-group" colspan="6">@($"{groupContext.GroupName}: {groupContext.Key}") </MudTh>
                                                </GroupHeaderTemplate>
                                                <RowTemplate Context="task_manager_history_row">

                                                    <MudTd DataLabel="Datum" @onclick="() => Task_Manager_History_RowClickHandler(task_manager_history_row)" class="@Task_Manager_History_GetRowClass(task_manager_history_row)" style="white-space: nowrap;">
                                                        <span style="display: flex; align-items: center;">
                                                            &nbsp;@task_manager_history_row.date
                                                        </span>
                                                    </MudTd>

                                                    <MudTd DataLabel="Name" @onclick="() => Task_Manager_History_RowClickHandler(task_manager_history_row)" class="@Task_Manager_History_GetRowClass(task_manager_history_row)" style="white-space: nowrap;">
                                                        <span style="display: flex; align-items: center;">
                                                            &nbsp;@task_manager_history_row.name
                                                        </span>
                                                    </MudTd>

                                                    <MudTd DataLabel="PID" @onclick="() => Task_Manager_History_RowClickHandler(task_manager_history_row)" class="@Task_Manager_History_GetRowClass(task_manager_history_row)" style="white-space: nowrap;">
                                                        <span style="display: flex; align-items: center;">
                                                            &nbsp;@task_manager_history_row.pid
                                                        </span>
                                                    </MudTd>

                                                    <MudTd DataLabel="Parent Name" @onclick="() => Task_Manager_History_RowClickHandler(task_manager_history_row)" class="@Task_Manager_History_GetRowClass(task_manager_history_row)" style="white-space: nowrap;">
                                                        <span style="display: flex; align-items: center;">
                                                            &nbsp;@task_manager_history_row.parent_name
                                                        </span>
                                                    </MudTd>

                                                    <MudTd DataLabel="Parent PID" @onclick="() => Task_Manager_History_RowClickHandler(task_manager_history_row)" class="@Task_Manager_History_GetRowClass(task_manager_history_row)" style="white-space: nowrap;">
                                                        <span style="display: flex; align-items: center;">
                                                            &nbsp;@task_manager_history_row.parent_pid
                                                        </span>
                                                    </MudTd>

                                                    <MudTd DataLabel="CPU (%)" @onclick="() => Task_Manager_History_RowClickHandler(task_manager_history_row)" class="@Task_Manager_History_GetRowClass(task_manager_history_row)" style="white-space: nowrap;">
                                                        <span style="display: flex; align-items: center;">
                                                            &nbsp;@task_manager_history_row.cpu
                                                        </span>
                                                    </MudTd>

                                                    <MudTd DataLabel="RAM (MB)" @onclick="() => Task_Manager_History_RowClickHandler(task_manager_history_row)" class="@Task_Manager_History_GetRowClass(task_manager_history_row)" style="white-space: nowrap;">
                                                        <span style="display: flex; align-items: center;">
                                                            &nbsp;@task_manager_history_row.ram
                                                        </span>
                                                    </MudTd>

                                                    <MudTd DataLabel="Benutzer" @onclick="() => Task_Manager_History_RowClickHandler(task_manager_history_row)" class="@Task_Manager_History_GetRowClass(task_manager_history_row)" style="white-space: nowrap;">
                                                        <span style="display: flex; align-items: center;">
                                                            &nbsp;@task_manager_history_row.user
                                                        </span>
                                                    </MudTd>

                                                    <MudTd DataLabel="Erstellt" @onclick="() => Task_Manager_History_RowClickHandler(task_manager_history_row)" class="@Task_Manager_History_GetRowClass(task_manager_history_row)" style="white-space: nowrap;">
                                                        <span style="display: flex; align-items: center;">
                                                            &nbsp;@task_manager_history_row.created
                                                        </span>
                                                    </MudTd>

                                                    <MudTd DataLabel="Pfad" @onclick="() => Task_Manager_History_RowClickHandler(task_manager_history_row)" class="@Task_Manager_History_GetRowClass(task_manager_history_row)" style="white-space: nowrap;">
                                                        <span style="display: flex; align-items: center;">
                                                            &nbsp;@task_manager_history_row.path
                                                        </span>
                                                    </MudTd>

                                                    <MudTd DataLabel="Commandline" @onclick="() => Task_Manager_History_RowClickHandler(task_manager_history_row)" class="@Task_Manager_History_GetRowClass(task_manager_history_row)" style="white-space: nowrap;">
                                                        <span style="display: flex; align-items: center;">
                                                            &nbsp;@task_manager_history_row.cmd
                                                        </span>
                                                    </MudTd>

                                                    <MudTd DataLabel="Handles" @onclick="() => Task_Manager_History_RowClickHandler(task_manager_history_row)" class="@Task_Manager_History_GetRowClass(task_manager_history_row)" style="white-space: nowrap;">
                                                        <span style="display: flex; align-items: center;">
                                                            &nbsp;@task_manager_history_row.handles
                                                        </span>
                                                    </MudTd>

                                                    <MudTd DataLabel="Threads" @onclick="() => Task_Manager_History_RowClickHandler(task_manager_history_row)" class="@Task_Manager_History_GetRowClass(task_manager_history_row)" style="white-space: nowrap;">
                                                        <span style="display: flex; align-items: center;">
                                                            &nbsp;@task_manager_history_row.threads
                                                        </span>
                                                    </MudTd>

                                                    <MudTd DataLabel="Lese Operationen" @onclick="() => Task_Manager_History_RowClickHandler(task_manager_history_row)" class="@Task_Manager_History_GetRowClass(task_manager_history_row)" style="white-space: nowrap;">
                                                        <span style="display: flex; align-items: center;">
                                                            &nbsp;@task_manager_history_row.read_operations
                                                        </span>
                                                    </MudTd>

                                                    <MudTd DataLabel="Lese Transfer" @onclick="() => Task_Manager_History_RowClickHandler(task_manager_history_row)" class="@Task_Manager_History_GetRowClass(task_manager_history_row)" style="white-space: nowrap;">
                                                        <span style="display: flex; align-items: center;">
                                                            &nbsp;@task_manager_history_row.read_transfer
                                                        </span>
                                                    </MudTd>

                                                    <MudTd DataLabel="Schreib Operationen" @onclick="() => Task_Manager_History_RowClickHandler(task_manager_history_row)" class="@Task_Manager_History_GetRowClass(task_manager_history_row)" style="white-space: nowrap;">
                                                        <span style="display: flex; align-items: center;">
                                                            &nbsp;@task_manager_history_row.write_operations
                                                        </span>
                                                    </MudTd>

                                                    <MudTd DataLabel="Schreib Transfer" @onclick="() => Task_Manager_History_RowClickHandler(task_manager_history_row)" class="@Task_Manager_History_GetRowClass(task_manager_history_row)" style="white-space: nowrap;">
                                                        <span style="display: flex; align-items: center;">
                                                            &nbsp;@task_manager_history_row.write_transfer
                                                        </span>
                                                    </MudTd>

                                                </RowTemplate>
                                                <PagerContent>
                                                    <MudTablePager PageSizeOptions="new int[] { 10, 25, 50, 100, 250, 500, int.MaxValue }" RowsPerPageString="Einträge pro Seite" />
                                                </PagerContent>
                                            </MudTable>
     
                                        </ChildContent>
                                    </MudExpansionPanel>
                                </MudTabPanel>
                            }

                            @if (permissions_devices_antivirus)
                            {
                                <MudTabPanel Text="Antivirus">
                            
                                    <MudPaper>

                                        <MudText Class="ml-2" Typo="Typo.h6">Antimalware</MudText>
                                        <MudText Class="ml-2 d-flex align-center" Typo="Typo.body1"><MudIcon Icon="@Icons.Material.Filled.Info" Title="Status" Size="Size.Small" />&nbsp;Antimalware-Dienst: @antivirus_information_amserviceenabled</MudText>
                                        <MudText Class="ml-2 d-flex align-center" Typo="Typo.body1"><MudIcon Icon="@Icons.Material.Filled.Update" Title="Status" Size="Size.Small" />&nbsp;Antimalware-Engineversion: @antivirus_information_amengineversion</MudText>
                                        <MudText Class="ml-2 d-flex align-center" Typo="Typo.body1"><MudIcon Icon="@Icons.Material.Filled.Update" Title="Status" Size="Size.Small" />&nbsp;Antimalware-Produktversion: @antivirus_information_amproductversion</MudText>
                                        <MudText Class="ml-2 d-flex align-center" Typo="Typo.body1"><MudIcon Icon="@Icons.Material.Filled.Update" Title="Status" Size="Size.Small" />&nbsp;Antimalware-Dienstversion: @antivirus_information_amserviceversion</MudText>

                                        <MudText Class="mt-5 ml-2" Typo="Typo.h6">Antispyware</MudText>
                                        <MudText Class="ml-2 d-flex align-center" Typo="Typo.body1"><MudIcon Icon="@Icons.Material.Filled.Info" Title="Status" Size="Size.Small" />&nbsp;Status: @antivirus_information_antispywareenabled</MudText>
                                        <MudText Class="ml-2 d-flex align-center" Typo="Typo.body1"><MudIcon Icon="@Icons.Material.Filled.AccessTime" Title="Status" Size="Size.Small" />&nbsp;Letzte Aktualisierung der Antispyware-Signatur: @antivirus_information_antispywaresignaturelastupdated</MudText>
                                        <MudText Class="ml-2 d-flex align-center" Typo="Typo.body1"><MudIcon Icon="@Icons.Material.Filled.Update" Title="Status" Size="Size.Small" />&nbsp;Antispyware-Signaturversion: @antivirus_information_antispywaresignatureversion</MudText>

                                        <MudText Class="mt-5 ml-2" Typo="Typo.h6">Antivirus</MudText>
                                        <MudText Class="ml-2 d-flex align-center" Typo="Typo.body1"><MudIcon Icon="@Icons.Material.Filled.Info" Title="Status" Size="Size.Small" />&nbsp;Status: @antivirus_information_antivirusenabled</MudText>
                                        <MudText Class="ml-2 d-flex align-center" Typo="Typo.body1"><MudIcon Icon="@Icons.Material.Filled.Update" Title="Status" Size="Size.Small" />&nbsp;Letzte Aktualisierung der Antivirus-Signatur: @antivirus_information_antivirussignaturelastupdated</MudText>
                                        <MudText Class="ml-2 d-flex align-center" Typo="Typo.body1"><MudIcon Icon="@Icons.Material.Filled.AccessTime" Title="Status" Size="Size.Small" />&nbsp;Antivirus-Signaturversion: @antivirus_information_antivirussignatureversion</MudText>

                                        <MudText Class="mt-5 ml-2" Typo="Typo.h6">Netzwerkinspektionssystem (NIS)</MudText>
                                        <MudText Class="ml-2 d-flex align-center" Typo="Typo.body1"><MudIcon Icon="@Icons.Material.Filled.Info" Title="Status" Size="Size.Small" />&nbsp;Status: @antivirus_information_nisenabled</MudText>
                                        <MudText Class="ml-2 d-flex align-center" Typo="Typo.body1"><MudIcon Icon="@Icons.Material.Filled.Update" Title="Status" Size="Size.Small" />&nbsp;Engineversion: @antivirus_information_nisengineversion</MudText>
                                        <MudText Class="ml-2 d-flex align-center" Typo="Typo.body1"><MudIcon Icon="@Icons.Material.Filled.AccessTime" Title="Status" Size="Size.Small" />&nbsp;Letzte Aktualisierung der NIS-Signatur: @antivirus_information_nissignaturelastupdated</MudText>
                                        <MudText Class="ml-2 d-flex align-center" Typo="Typo.body1"><MudIcon Icon="@Icons.Material.Filled.Update" Title="Status" Size="Size.Small" />&nbsp;NIS-Signaturversion: @antivirus_information_nissignatureversion</MudText>
                                
                                        <MudText Class="mt-5 ml-2" Typo="Typo.h6">Echtzeitschutz</MudText>
                                        <MudText Class="ml-2 d-flex align-center" Typo="Typo.body1"><MudIcon Icon="@Icons.Material.Filled.Info" Title="Status" Size="Size.Small" />&nbsp;Status: @antivirus_information_realtimetprotectionenabled</MudText>

                                        <MudText Class="mt-5 ml-2" Typo="Typo.h6">Zugriffsschutz (On Access Protection)</MudText>
                                        <MudText Class="ml-2 d-flex align-center" Typo="Typo.body1"><MudIcon Icon="@Icons.Material.Filled.Info" Title="Status" Size="Size.Small" />&nbsp;Status: @antivirus_information_onaccessprotectionenabled</MudText>

                                        <MudText Class="mt-5 ml-2" Typo="Typo.h6">Verhaltensüberwachung</MudText>
                                        <MudText Class="ml-2 d-flex align-center" Typo="Typo.body1"><MudIcon Icon="@Icons.Material.Filled.Info" Title="Status" Size="Size.Small" />&nbsp;Status: @antivirus_information_behaviormonitorenabled</MudText>

                                        <MudText Class="mt-5 ml-2" Typo="Typo.h6">Integritätsüberwachung und Angriffsschutz (IOAV)</MudText>
                                        <MudText Class="ml-2 d-flex align-center" Typo="Typo.body1"><MudIcon Icon="@Icons.Material.Filled.Info" Title="Status" Size="Size.Small" />&nbsp;Status: @antivirus_information_ioavprotectionenabled</MudText>

                                        <MudText Class="mt-5 ml-2" Typo="Typo.h6">Manipulationsschutz</MudText>
                                        <MudText Class="ml-2 d-flex align-center" Typo="Typo.body1"><MudIcon Icon="@Icons.Material.Filled.Info" Title="Status" Size="Size.Small" />&nbsp;Status: @antivirus_information_istamperprotected</MudText>
                                
                                    </MudPaper>

                                </MudTabPanel>
                            }

                            @if (permissions_devices_events)
                            {
                                    <MudTabPanel Text="Ereignisse">
                                        <MudPaper>

                                            <div style="display: flex; align-items: center;">
                                                <MudDateRangePicker Class="ml-2" PickerVariant="PickerVariant.Dialog" Label="Zeitraum" @ref="device_information_events_table_picker" @bind-DateRange="device_information_events_table_dateRange" @bind-DateRange:after="async () => { events_mysql_data = await Events_Load(notes_tenant_name, notes_location_name, notes_device_name, true); }" Style="max-width: 300px;">
                                                    <PickerActions Context="pickerActionsContext">
                                                        <MudButton Class="mr-auto align-self-start" OnClick="@(() => device_information_events_table_picker.Clear())">Zurücksetzen</MudButton>
                                                        <MudButton OnClick="@(() => device_information_events_table_picker.Close(false))">Abbrechen</MudButton>
                                                        <MudButton Color="Color.Primary" @onclick="async () => { await Device_Information_Events_Table_Submit(); }">Bestätigen</MudButton>
                                                    </PickerActions>
                                                </MudDateRangePicker>

                                                <MudSelect Class="ml-2 mr-2" T="string" @bind-Value="this.device_information_events_severity_string" @bind-Value:after="async () => { events_mysql_data = await Events_Load(notes_tenant_name, notes_location_name, notes_device_name, true); }" Label="Priorität" AnchorOrigin="Origin.BottomCenter">
                                                    <MudSelectItem Value="@("Egal")" />
                                                    <MudSelectItem Value="@("Kritisch")" />
                                                    <MudSelectItem Value="@("Hoch")" />
                                                    <MudSelectItem Value="@("Moderat")" />
                                                    <MudSelectItem Value="@("Niedrig")" />
                                                </MudSelect>

                                                <MudTooltip Text="Aktualisieren">
                                                    <MudIconButton Class="ml-2 mt-5 mr-2" Icon="@Icons.Material.Filled.Refresh" Variant="Variant.Filled" Size="Size.Small" Color="Color.Default" @onclick="async () => { events_mysql_data = await Events_Load(notes_tenant_name, notes_location_name, notes_device_name, true); }"></MudIconButton>
                                                </MudTooltip>
                                                <MudTooltip Text="Daten exportieren">
                                                    <MudIconButton Class="ml-2 mt-5 mr-2" Icon="@Icons.Material.Filled.FileDownload" Variant="Variant.Filled" Size="Size.Small" Color="Color.Default" @onclick="Export_Events_Table_Dialog"></MudIconButton>
                                                </MudTooltip>
                                            </div>

                                            <MudTable Class="mt-2" Height="50vh" FixedHeader="true" FixedFooter="true" Hover="true" RowsPerPage="50" Dense="true" Items="@events_mysql_data" Filter="new Func<Events_Entity, bool>(Events_Table_Filter_Func)">
                                                <ToolBarContent>
                                                    <MudTextField Class="mt-0" @bind-Value="events_table_search_string" Placeholder="Suche" Adornment="Adornment.Start" AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Medium"></MudTextField>
                                                </ToolBarContent>
                                                <HeaderContent>
                                                    <MudTh Sortable="true" @onclick="() => events_table_sorted_column = (nameof(Events_Entity.id))" style="white-space: nowrap;">Datum</MudTh>
                                                    <MudTh Sortable="true" @onclick="() => events_table_sorted_column = (nameof(Events_Entity.date))" style="white-space: nowrap;">Schweregrad</MudTh>
                                                    <MudTh Sortable="true" @onclick="() => events_table_sorted_column = (nameof(Events_Entity.severity))" style="white-space: nowrap;">Melder</MudTh>
                                                    <MudTh Sortable="true" @onclick="() => events_table_sorted_column = (nameof(Events_Entity.reported_by))" style="white-space: nowrap;">Event</MudTh>
                                                    <MudTh Sortable="true" @onclick="() => events_table_sorted_column = (nameof(Events_Entity._event))" style="white-space: nowrap;">Beschreibung</MudTh>
                                                    <!-- <MudTh Sortable="true" @onclick="() => events_table_sorted_column = (nameof(Events_Entity.description))" style="white-space: nowrap;">Gelesen</MudTh> -->
                                                    <!-- <MudTh Sortable="true" @onclick="() => events_table_sorted_column = (nameof(Events_Entity.read))" style="white-space: nowrap;">Typ</MudTh> -->
                                                </HeaderContent>

                                                <RowTemplate Context="events_row">

                                                    <MudTd DataLabel="Id" @onclick="() => Events_RowClickHandler(events_row)" class="@Events_GetRowClass(events_row)" style="white-space: nowrap; display: none;">
                                                        <span style="display: flex; align-items: center;">
                                                            &nbsp;@events_row.id
                                                        </span>
                                                    </MudTd>

                                                    <MudTd DataLabel="Datum" @onclick="() => Events_RowClickHandler(events_row)" class="@Events_GetRowClass(events_row)" style="white-space: nowrap;">
                                                        <span style="display: flex; align-items: center;">
                                                            &nbsp;@events_row.date
                                                        </span>
                                                    </MudTd>

                                                    <MudTd DataLabel="Schweregrad" @onclick="() => Events_RowClickHandler(events_row)" class="@Events_GetRowClass(events_row)" style="white-space: nowrap;">
                                                        <span style="display: flex; align-items: center;">
                                                            @{
                                                                string severity = String.Empty;

                                                                if (events_row.severity == "0")
                                                                    severity = "Niedrig";
                                                                else if (events_row.severity == "1")
                                                                    severity = "Moderat";
                                                                else if (events_row.severity == "2")
                                                                    severity = "Hoch";
                                                                else if (events_row.severity == "3")
                                                                    severity = "Kritisch";
                                                            }
                                                            &nbsp;@severity
                                                        </span>
                                                    </MudTd>

                                                    <MudTd DataLabel="Melder" @onclick="() => Events_RowClickHandler(events_row)" class="@Events_GetRowClass(events_row)" style="white-space: nowrap;">
                                                        <span style="display: flex; align-items: center;">
                                                            &nbsp;@events_row.reported_by
                                                        </span>
                                                    </MudTd>

                                                    <MudTd DataLabel="Event" @onclick="() => Events_RowClickHandler(events_row)" class="@Events_GetRowClass(events_row)" style="white-space: nowrap;">
                                                        <span style="display: flex; align-items: center;">
                                                            &nbsp;@events_row._event
                                                        </span>
                                                    </MudTd>

                                                    <MudTd DataLabel="Beschreibung" @onclick="() => Events_RowClickHandler(events_row)" class="@Events_GetRowClass(events_row)" style="white-space: nowrap;">
                                                        <span style="display: flex; align-items: center;">
                                                            <MudExpansionPanel Class="mt-0 custom-expansion-panel" Expanded="@expanded">
                                                                <TitleContent>
                                                                    @{

                                                                        string description = events_row.description.Substring(0, Math.Min(events_row.description.Length, 85));

                                                                        <span style="display: flex; align-items: center;">
                                                                            <MudIcon Icon="@Icons.Material.Filled.ArrowDropDown" Size="Size.Small" />&nbsp;@description
                                                                        </span>
                                                                    }
                                                                </TitleContent>

                                                                <ChildContent>
                                                                    <MudPaper Style="overflow: auto;">
                                                                        @{
                                                                            <MudTextField Class="ml-2 mr-2" T="string" Lines="50" Variant="Variant.Text" Text="@events_row.description" ReadOnly="true" />
                                                                        }
                                                                    </MudPaper>
                                                                </ChildContent>
                                                            </MudExpansionPanel>
                                                        </span>
                                                    </MudTd>

                                                    <MudTd DataLabel="Gelesen" @onclick="() => Events_RowClickHandler(events_row)" class="@Events_GetRowClass(events_row)" style="white-space: nowrap; display: none;">
                                                        <span style="display: flex; align-items: center;">
                                                            &nbsp;@events_row.read
                                                        </span>
                                                    </MudTd>

                                                    <MudTd DataLabel="Typ" @onclick="() => Events_RowClickHandler(events_row)" class="@Events_GetRowClass(events_row)" style="white-space: nowrap; display: none;">
                                                        <span style="display: flex; align-items: center;">
                                                            &nbsp;@events_row.type
                                                        </span>
                                                    </MudTd>

                                                </RowTemplate>
                                                <PagerContent>
                                                    <MudTablePager PageSizeOptions="new int[] { 10, 25, 50, 100, 250, 500, int.MaxValue }" RowsPerPageString="Einträge pro Seite" />
                                                </PagerContent>
                                            </MudTable>

                                        </MudPaper>
                                    </MudTabPanel>
                            }

                            </MudTabs>

                        </ChildContent>


                    </MudExpansionPanel>
                }
            }
        }

    </Authorized>
</AuthorizeView>

@code {

    #region Permissions System

    private string permissions_json = String.Empty;
    private string permissions_tenants_json = String.Empty;
    public static List<string> permissions_tenants_list = new List<string> { };

    private bool permissions_devices_authorized_enabled = false;
    private bool permissions_devices_general = false;
    private bool permissions_devices_software = false;
    private bool permissions_devices_task_manager = false;
    private bool permissions_devices_antivirus = false;
    private bool permissions_devices_events = false;
    private bool permissions_devices_remote_shell = false;
    private bool permissions_devices_deauthorize = false;
    private bool permissions_devices_move = false;

    public class Permissions_Tenants_Activation_State
    {
        public string name { get; set; } = String.Empty;
    }

    private async Task Get_Permissions()
    {
        //Extract user info from users session storage
        var sessionStorage = new ProtectedSessionStorage(JSRuntime, DataProtectionProvider);
        var username = await sessionStorage.GetAsync<string>("username");
        var password = await sessionStorage.GetAsync<string>("password");

        Logging.Handler.Debug("/devices -> Permissions_Load", "username", username.Value ?? String.Empty);

        //if user info empty, force logout
        if (String.IsNullOrEmpty(username.Value) || String.IsNullOrEmpty(password.Value))
        {
            Logging.Handler.Debug("/devices -> Permissions_Load", "sessions storage data", "empty, force logout");

            NavigationManager.NavigateTo("/logout", true);
            return;
        }

        //Check if user info is valid, if not, force logout
        if (!Classes.Authentication.User.Login_User(username.Value ?? String.Empty, password.Value ?? String.Empty))
        {
            Logging.Handler.Debug("/devices -> Permissions_Load", "verify user", "incorrect data, force logout");

            NavigationManager.NavigateTo("/logout", true);
            return;
        }

        //Get permissions
        string query = "SELECT * FROM `accounts` WHERE username = @username;";

        MySqlConnection conn = new MySqlConnection(Application_Settings.connectionString);

        try
        {
            await conn.OpenAsync();

            MySqlCommand command = new MySqlCommand(query, conn);
            command.Parameters.AddWithValue("@username", username.Value);

            Logging.Handler.Debug("/devices -> Permissions_Load", "query", query);

            using (DbDataReader reader = await command.ExecuteReaderAsync())
            {
                if (reader.HasRows)
                {
                    while (await reader.ReadAsync())
                    {
                        permissions_json = reader["permissions"].ToString() ?? String.Empty;
                        permissions_tenants_json = reader["tenants"].ToString() ?? String.Empty;
                    }
                }
            }

            Logging.Handler.Debug("/devices -> Permissions_Load", "permissions_json", permissions_json);

            //Extract permissions
            if (!String.IsNullOrEmpty(permissions_json))
            {
                using (JsonDocument document = JsonDocument.Parse(permissions_json))
                {
                    //devices_authorized_enabled
                    try
                    {
                        JsonElement element = document.RootElement.GetProperty("devices_authorized_enabled");
                        permissions_devices_authorized_enabled = element.GetBoolean();
                    }
                    catch (Exception ex)
                    {
                        Logging.Handler.Error("/devices -> Permissions_Load", "permissions_json (devices_authorized_enabled)", ex.Message);
                    }

                    //devices_general
                    try
                    {
                        JsonElement element = document.RootElement.GetProperty("devices_general");
                        permissions_devices_general = element.GetBoolean();
                    }
                    catch (Exception ex)
                    {
                        Logging.Handler.Error("/devices -> Permissions_Load", "permissions_json (devices_general)", ex.Message);
                    }

                    //devices_software
                    try
                    {
                        JsonElement element = document.RootElement.GetProperty("devices_software");
                        permissions_devices_software = element.GetBoolean();
                    }
                    catch (Exception ex)
                    {
                        Logging.Handler.Error("/devices -> Permissions_Load", "permissions_json (devices_software)", ex.Message);
                    }

                    //devices_task_manager
                    try
                    {
                        JsonElement element = document.RootElement.GetProperty("devices_task_manager");
                        permissions_devices_task_manager = element.GetBoolean();
                    }
                    catch (Exception ex)
                    {
                        Logging.Handler.Error("/devices -> Permissions_Load", "permissions_json (devices_task_manager)", ex.Message);
                    }

                    //devices_antivirus
                    try
                    {
                        JsonElement element = document.RootElement.GetProperty("devices_antivirus");
                        permissions_devices_antivirus = element.GetBoolean();
                    }
                    catch (Exception ex)
                    {
                        Logging.Handler.Error("/devices -> Permissions_Load", "permissions_json (devices_antivirus)", ex.Message);
                    }

                    //devices_events
                    try
                    {
                        JsonElement element = document.RootElement.GetProperty("devices_events");
                        permissions_devices_events = element.GetBoolean();
                    }
                    catch (Exception ex)
                    {
                        Logging.Handler.Error("/devices -> Permissions_Load", "permissions_json (devices_events)", ex.Message);
                    }

                    //devices_remote_shell
                    try
                    {
                        JsonElement element = document.RootElement.GetProperty("devices_remote_shell");
                        permissions_devices_remote_shell = element.GetBoolean();
                    }
                    catch (Exception ex)
                    {
                        Logging.Handler.Error("/devices -> Permissions_Load", "permissions_json (devices_remote_shell)", ex.Message);
                    }

                    //devices_deauthorize
                    try
                    {
                        JsonElement element = document.RootElement.GetProperty("devices_deauthorize");
                        permissions_devices_deauthorize = element.GetBoolean();
                    }
                    catch (Exception ex)
                    {
                        Logging.Handler.Error("/devices -> Permissions_Load", "permissions_json (devices_deauthorize)", ex.Message);
                    }

                    //devices_move
                    try
                    {
                        JsonElement element = document.RootElement.GetProperty("devices_move");
                        permissions_devices_move = element.GetBoolean();
                    }
                    catch (Exception ex)
                    {
                        Logging.Handler.Error("/devices -> Permissions_Load", "permissions_json (devices_move)", ex.Message);
                    }
                }
            }
            else if (permissions_json == "[]")
            {
                Logging.Handler.Debug("/devices -> Permissions_Load", "permissions_json", "Empty, logout user");
                NavigationManager.NavigateTo("/logout", true);
            }
            else
            {
                Logging.Handler.Debug("/devices -> Permissions_Load", "permissions_json", "Empty, logout user");
                NavigationManager.NavigateTo("/logout", true);
            }

            //Extract tenants from json
            permissions_tenants_list.Clear();
            if (!String.IsNullOrEmpty(permissions_tenants_json))
            {
                //Set the activation state for the tenants
                try
                {
                    List<Permissions_Tenants_Activation_State> tenants_activation_state_list = JsonSerializer.Deserialize<List<Permissions_Tenants_Activation_State>>(permissions_tenants_json);

                    foreach (var tenant in tenants_activation_state_list)
                    {
                        Logging.Handler.Debug("/devices -> Permissions_Load", "foreach tenant", tenant.name);

                        permissions_tenants_list.Add(tenant.name);
                    }
                }
                catch (Exception ex)
                {
                    Logging.Handler.Error("/devices -> Permissions_Load (permissions_tenants_json deserialize)", "Result", ex.Message);
                }

                permissions_tenants_list.Add("all");
            }
            else
            {
                Logging.Handler.Debug("/devices -> Permissions_Load (permissions_tenants_json deserialize)", "Result", "Empty");
            }
        }
        catch (Exception ex)
        {
            Logging.Handler.Error("/devices -> Permissions_Load", "general_error (force logout)", ex.Message);
            NavigationManager.NavigateTo("/logout", true);
        }
        finally
        {
            conn.Close();
        }
    }

    #endregion

    protected override async Task OnInitializedAsync()
    {
        string tenant_name = await localStorage.GetItemAsync<string>("tenant_name");
        
        await Get_Permissions();
        //Check permissions
        if (!permissions_devices_authorized_enabled || !permissions_tenants_list.Contains(tenant_name))
        {
            //maybe add deleting the tenant name from the browsers storage here

            NavigationManager.NavigateTo("/logout", true);
            return;
        }
            
        await InitializeComponentAsync();
    }

    public string[] drive_labels = { "Freier Speicher", "Belegter Speicher" };

    private bool loading_overlay = false;
    private bool expanded = false;
    private bool disabled = true;
    private string view_port = "70vh";
    private string sorted_column;
    private string device_table_search_string = "";

    //Device information
    public string agent_version = String.Empty;
    public string operating_system = String.Empty;
    public string architecture = String.Empty;
    public string domain = String.Empty;
    public string antivirus_solution = String.Empty;
    public string firewall_status = String.Empty;
    public string last_access = String.Empty;
    public string last_boot = String.Empty;
    public string timezone = String.Empty;
    public string cpu = String.Empty;
    public string mainboard = String.Empty;
    public string gpu = String.Empty;
    public string ram = String.Empty;
    public string tpm = String.Empty;
    public string environment_variables = String.Empty;
    public string ip_address_internal = String.Empty;
    public string ip_address_external = String.Empty;
    public string network_adapters = String.Empty;
    public string network_adapters_display_string = String.Empty;
    public string network_adapters_history_display_string = String.Empty;
    public string disks = String.Empty;
    public string disks_display_string = String.Empty;
    public string applications_installed = String.Empty;
    public string applications_logon = String.Empty;
    public string applications_scheduled_tasks = String.Empty;
    public string applications_services = String.Empty;
    public string applications_drivers = String.Empty;
    public string policy_name = String.Empty;

    private async Task InitializeComponentAsync()
    {
        disabled = true;
        loading_overlay = true;

        await Get_Clients_OverviewAsync();

        string tenant_name = await localStorage.GetItemAsync<string>("tenant_name");
        group_name = await localStorage.GetItemAsync<string>("group_name");

        if (tenant_name == "all")
            group_name = "Alle Geräte";

        Update_Chart_Options();

        loading_overlay = false;

        StateHasChanged();
    }

    #region Device Table

    private bool Device_Table_Filter_Func(MySQL_Entity row)
    {
        if (string.IsNullOrEmpty(device_table_search_string))
            return true;

        //Search logic for each column
        return row.device_name.Contains(device_table_search_string, StringComparison.OrdinalIgnoreCase) ||
               row.tenant_name.Contains(device_table_search_string, StringComparison.OrdinalIgnoreCase) ||
               row.location_name.Contains(device_table_search_string, StringComparison.OrdinalIgnoreCase) ||
               row.group_name.Contains(device_table_search_string, StringComparison.OrdinalIgnoreCase) ||
               row.agent_version.Contains(device_table_search_string, StringComparison.OrdinalIgnoreCase) ||
               row.last_access.Contains(device_table_search_string, StringComparison.OrdinalIgnoreCase) ||
               row.ip_address.Contains(device_table_search_string, StringComparison.OrdinalIgnoreCase) ||
               row.operating_system.Contains(device_table_search_string, StringComparison.OrdinalIgnoreCase) ||
               row.domain.Contains(device_table_search_string, StringComparison.OrdinalIgnoreCase) ||
               row.antivirus_solution.Contains(device_table_search_string, StringComparison.OrdinalIgnoreCase) ||
               row.firewall_status.Contains(device_table_search_string, StringComparison.OrdinalIgnoreCase);
    }

    private string selectedRowContent = ""; // Hier wird der Inhalt der ausgewählten Zeile gespeichert

    // Der Handler für den TableRowClick-Event
    private async void RowClickHandler(MySQL_Entity row)
    {
        loading_overlay = true;

        expanded = true;
        disabled = false;
        view_port = "35vh";
        // Hier können Sie den Inhalt der ausgewählten Zeile verarbeiten
        selectedRowContent = row.device_name;

        await Get_Device_Information_Details(row.tenant_name, row.location_name, row.device_name);
        await CPU_Information_Load();
        await RAM_Information_Load();
        await Network_Information_Load();
        await Antivirus_Products_Load();
        await Get_Antivirus_Information();
        await Software_Installed_Load();
        await Application_Logon_Load();
        await Applications_Scheduled_Tasks_Load();
        await Applications_Services_Load();
        await Applications_Drivers_Load();
        await Task_Manager_Load();

        support_history_mysql_data = await Get_Device_Support_History(row.tenant_name, row.location_name, row.device_name, false);

        // notes
        notes_tenant_name = row.tenant_name;
        notes_location_name = row.location_name;
        notes_device_name = row.device_name;

        events_mysql_data = await Events_Load(row.tenant_name, row.location_name, row.device_name, true);

        loading_overlay = false;

        StateHasChanged();

    }

    private string GetRowClass(MySQL_Entity row)
    {
        return row.device_name == selectedRowContent ? "selected-row" : "";
    }

    //Deauthorize device
    private async Task Deauthorize_Device(string device_name)
    {
        this.Snackbar.Configuration.ShowCloseIcon = true;
        this.Snackbar.Configuration.PositionClass = Defaults.Classes.Position.BottomRight;

        MySqlConnection conn = new MySqlConnection(Application_Settings.connectionString);

        try
        {
            await conn.OpenAsync();

            string execute_query = "UPDATE devices SET authorized = 0 WHERE device_name = @device_name;";

            MySqlCommand cmd = new MySqlCommand(execute_query, conn);
            cmd.Parameters.AddWithValue("@device_name", device_name);
            cmd.ExecuteNonQuery();

            this.Snackbar.Add("Gerät deautorisiert.", Severity.Success);
        }
        catch (Exception ex)
        {
            Logging.Handler.Error("Deauthorize_Device", "Result", ex.Message);
        }
        finally
        {
            await conn.CloseAsync();
        }

        await InitializeComponentAsync();
    }

    #endregion

    #region CPU Information

    public string cpu_information_string = String.Empty;

    public List<CPU_Information_Entity> cpu_information_mysql_data;

    public class CPU_Information_Entity
    {
        public string name { get; set; } = String.Empty;
        public string socket_designation { get; set; } = String.Empty;
        public string processor_id { get; set; } = String.Empty;
        public string revision { get; set; } = String.Empty;
        public string usage { get; set; } = String.Empty;
        public string voltage { get; set; } = String.Empty;
        public string currentclockspeed { get; set; } = String.Empty;
        public string processes { get; set; } = String.Empty;
        public string threads { get; set; } = String.Empty;
        public string handles { get; set; } = String.Empty;
        public string maxclockspeed { get; set; } = String.Empty;
        public string sockets { get; set; } = String.Empty;
        public string cores { get; set; } = String.Empty;
        public string logical_processors { get; set; } = String.Empty;
        public string virtualization { get; set; } = String.Empty;
        public string l1_cache { get; set; } = String.Empty;
        public string l2_cache { get; set; } = String.Empty;
        public string l3_cache { get; set; } = String.Empty;
    }

    private async Task CPU_Information_Load()
    {            
        cpu_information_mysql_data = new List<CPU_Information_Entity>();

        try
        {
            using (JsonDocument document = JsonDocument.Parse(cpu_information_string))
            {
                CPU_Information_Entity cpuInfo = new CPU_Information_Entity();

                // cpu_information_name
                JsonElement name_element = document.RootElement.GetProperty("name");
                cpuInfo.name = name_element.ToString();

                // socket_designation
                JsonElement socket_designation_element = document.RootElement.GetProperty("socket_designation");
                cpuInfo.socket_designation = socket_designation_element.ToString();

                // processor_id
                JsonElement processor_id_element = document.RootElement.GetProperty("processor_id");
                cpuInfo.processor_id = processor_id_element.ToString();

                // revision
                JsonElement revision_element = document.RootElement.GetProperty("revision");
                cpuInfo.revision = revision_element.ToString();

                // usage
                JsonElement usage_element = document.RootElement.GetProperty("usage");
                cpuInfo.usage = usage_element.ToString();

                // voltage
                JsonElement voltage_element = document.RootElement.GetProperty("voltage");
                cpuInfo.voltage = voltage_element.ToString();

                // currentclockspeed
                JsonElement currentclockspeed_element = document.RootElement.GetProperty("currentclockspeed");
                cpuInfo.currentclockspeed = currentclockspeed_element.ToString();

                // processes
                JsonElement processes_element = document.RootElement.GetProperty("processes");
                cpuInfo.processes = processes_element.ToString();

                // threads
                JsonElement threads_element = document.RootElement.GetProperty("threads");
                cpuInfo.threads = threads_element.ToString();

                // handles
                JsonElement handles_element = document.RootElement.GetProperty("handles");
                cpuInfo.handles = handles_element.ToString();

                // maxclockspeed
                JsonElement maxclockspeed_element = document.RootElement.GetProperty("maxclockspeed");
                cpuInfo.maxclockspeed = maxclockspeed_element.ToString();

                // sockets
                JsonElement sockets_element = document.RootElement.GetProperty("sockets");
                cpuInfo.sockets = sockets_element.ToString();

                // cores
                JsonElement cores_element = document.RootElement.GetProperty("cores");
                cpuInfo.cores = cores_element.ToString();

                // logical_processors
                JsonElement logical_processors_element = document.RootElement.GetProperty("logical_processors");
                cpuInfo.logical_processors = logical_processors_element.ToString();

                // virtualization
                JsonElement virtualization_element = document.RootElement.GetProperty("virtualization");
                cpuInfo.virtualization = virtualization_element.ToString();

                // l1_cache
                JsonElement l1_cache_element = document.RootElement.GetProperty("l1_cache");
                cpuInfo.l1_cache = l1_cache_element.ToString();

                // l2_cache
                JsonElement l2_cache_element = document.RootElement.GetProperty("l2_cache");
                cpuInfo.l2_cache = l2_cache_element.ToString();

                // l3_cache
                JsonElement l3_cache_element = document.RootElement.GetProperty("l3_cache");
                cpuInfo.l3_cache = l3_cache_element.ToString();

                // Füge cpuInfo zur Liste hinzu
                cpu_information_mysql_data.Add(cpuInfo);
            }
        }
        catch (Exception ex)
        {
            Logging.Handler.Error("/devices -> CPU_Information_Load", "Result", ex.Message);
        }
    }

    #endregion

    #region CPU History

    private List<Device_Information_CPU_History_Entity> device_information_cpu_history_mysql_data;

    public class Device_Information_CPU_History_Entity
    {
        public string date { get; set; } = String.Empty;
        public string name { get; set; } = String.Empty;
        public string socket_designation { get; set; } = String.Empty;
        public string processor_id { get; set; } = String.Empty;
        public string revision { get; set; } = String.Empty;
        public string usage { get; set; } = String.Empty;
        public string voltage { get; set; } = String.Empty;
        public string currentclockspeed { get; set; } = String.Empty;
        public string processes { get; set; } = String.Empty;
        public string threads { get; set; } = String.Empty;
        public string handles { get; set; } = String.Empty;
        public string maxclockspeed { get; set; } = String.Empty;
        public string sockets { get; set; } = String.Empty;
        public string cores { get; set; } = String.Empty;
        public string logical_processors { get; set; } = String.Empty;
        public string virtualization { get; set; } = String.Empty;
        public string l1_cache { get; set; } = String.Empty;
        public string l2_cache { get; set; } = String.Empty;
        public string l3_cache { get; set; } = String.Empty;
    }

    private TableGroupDefinition<Device_Information_CPU_History_Entity> device_information_cpu_history_groupDefinition = new TableGroupDefinition<Device_Information_CPU_History_Entity>
    {
        GroupName = "Datum",
        Indentation = false,
        Expandable = true,
        IsInitiallyExpanded = false,
        Selector = (e) => e.date// Hier sollte die Eigenschaft sein, nach der gruppiert werden soll
    };

    private string device_information_cpu_history_table_view_port = "70vh";
    private string device_information_cpu_history_table_sorted_column;
    private string device_information_cpu_history_table_search_string = "";
    private MudDateRangePicker device_information_cpu_history_table_picker;
    private DateRange device_information_cpu_history_table_dateRange = new DateRange(DateTime.Now.Date.AddDays(-7), DateTime.Now.Date.AddDays(1));

    private async Task Device_Information_CPU_History_Table_Submit_Picker()
    {
        device_information_cpu_history_table_picker.Close();

        device_information_cpu_history_mysql_data = await Device_Information_CPU_History_Load(notes_tenant_name, notes_location_name, notes_device_name);
    }


    private bool Device_Information_CPU_History_Table_Filter_Func(Device_Information_CPU_History_Entity row)
    {
        if (string.IsNullOrEmpty(device_information_cpu_history_table_search_string))
            return true;

        //Search logic for each column
        return row.date.Contains(device_information_cpu_history_table_search_string, StringComparison.OrdinalIgnoreCase) ||
            row.name.Contains(device_information_cpu_history_table_search_string, StringComparison.OrdinalIgnoreCase) ||
            row.socket_designation.Contains(device_information_cpu_history_table_search_string, StringComparison.OrdinalIgnoreCase) ||
            row.processor_id.Contains(device_information_cpu_history_table_search_string, StringComparison.OrdinalIgnoreCase) ||
            row.revision.Contains(device_information_cpu_history_table_search_string, StringComparison.OrdinalIgnoreCase) ||
            row.usage.Contains(device_information_cpu_history_table_search_string, StringComparison.OrdinalIgnoreCase) ||
            row.voltage.Contains(device_information_cpu_history_table_search_string, StringComparison.OrdinalIgnoreCase) ||
            row.currentclockspeed.Contains(device_information_cpu_history_table_search_string, StringComparison.OrdinalIgnoreCase) ||
            row.processes.Contains(device_information_cpu_history_table_search_string, StringComparison.OrdinalIgnoreCase) ||
            row.threads.Contains(device_information_cpu_history_table_search_string, StringComparison.OrdinalIgnoreCase) ||
            row.handles.Contains(device_information_cpu_history_table_search_string, StringComparison.OrdinalIgnoreCase) ||
            row.maxclockspeed.Contains(device_information_cpu_history_table_search_string, StringComparison.OrdinalIgnoreCase) ||
            row.sockets.Contains(device_information_cpu_history_table_search_string, StringComparison.OrdinalIgnoreCase) ||
            row.cores.Contains(device_information_cpu_history_table_search_string, StringComparison.OrdinalIgnoreCase) ||
            row.logical_processors.Contains(device_information_cpu_history_table_search_string, StringComparison.OrdinalIgnoreCase) ||
            row.virtualization.Contains(device_information_cpu_history_table_search_string, StringComparison.OrdinalIgnoreCase) ||
            row.l1_cache.Contains(device_information_cpu_history_table_search_string, StringComparison.OrdinalIgnoreCase) ||
            row.l2_cache.Contains(device_information_cpu_history_table_search_string, StringComparison.OrdinalIgnoreCase) ||
            row.l3_cache.Contains(device_information_cpu_history_table_search_string, StringComparison.OrdinalIgnoreCase);
    }

    private string cpu_history_selectedRowContent = ""; // Hier wird der Inhalt der ausgewählten Zeile gespeichert

    // Der Handler für den TableRowClick-Event
    private void Device_Information_CPU_History_RowClickHandler(Device_Information_CPU_History_Entity row)
    {
        cpu_history_selectedRowContent = row.date;
    }

    private string Device_Information_CPU_History_GetRowClass(Device_Information_CPU_History_Entity row)
    {
        return row.date == cpu_history_selectedRowContent ? "selected-row" : "";
    }

    private async Task <List<Device_Information_CPU_History_Entity>> Device_Information_CPU_History_Load(string tenant_name, string location_name, string device_name)
    {        
        loading_overlay = true;

        string query = "SELECT * FROM device_information_cpu_history WHERE device_name = @device_name AND location_name = @location_name AND tenant_name = @tenant_name AND date >= @start_date AND date <= @end_date ORDER BY date DESC;";

        MySqlConnection conn = new MySqlConnection(Application_Settings.connectionString);

        try
        {
            List<Device_Information_CPU_History_Entity> result = new List<Device_Information_CPU_History_Entity>();

            await conn.OpenAsync();

            MySqlCommand command = new MySqlCommand(query, conn);
            command = new MySqlCommand(query, conn);
            command.Parameters.AddWithValue("@tenant_name", tenant_name);
            command.Parameters.AddWithValue("@location_name", location_name);
            command.Parameters.AddWithValue("@device_name", device_name);
            command.Parameters.AddWithValue("@start_date", device_information_cpu_history_table_dateRange.Start.Value);
            command.Parameters.AddWithValue("@end_date", device_information_cpu_history_table_dateRange.End.Value);

            Logging.Handler.Debug("/devices -> CPU_History_Load", "MySQL_Query", query);

            using (DbDataReader reader = await command.ExecuteReaderAsync())
            {
                if (reader.HasRows)
                {
                    while (await reader.ReadAsync())
                    {
                        Logging.Handler.Debug("/devices -> CPU_History_Load", "MySQL_Result", reader["json"].ToString());

                        JsonObject cpu_history_object = JsonNode.Parse(reader["json"].ToString()).AsObject();

                        Device_Information_CPU_History_Entity entity = new Device_Information_CPU_History_Entity
                        {
                            date = reader["date"].ToString(),
                            name = cpu_history_object["name"].ToString(),
                            socket_designation = cpu_history_object["socket_designation"].ToString(),
                            processor_id = cpu_history_object["processor_id"].ToString(),
                            revision = cpu_history_object["revision"].ToString(),
                            usage = cpu_history_object["usage"].ToString(),
                            voltage = cpu_history_object["voltage"].ToString(),
                            currentclockspeed = cpu_history_object["currentclockspeed"].ToString(),
                            processes = cpu_history_object["processes"].ToString(),
                            threads = cpu_history_object["threads"].ToString(),
                            handles = cpu_history_object["handles"].ToString(),
                            maxclockspeed = cpu_history_object["maxclockspeed"].ToString(),
                            sockets = cpu_history_object["sockets"].ToString(),
                            cores = cpu_history_object["cores"].ToString(),
                            logical_processors = cpu_history_object["logical_processors"].ToString(),
                            virtualization = cpu_history_object["virtualization"].ToString(),
                            l1_cache = cpu_history_object["l1_cache"].ToString(),
                            l2_cache = cpu_history_object["l2_cache"].ToString(),
                            l3_cache = cpu_history_object["l3_cache"].ToString(),
                        };

                        result.Add(entity);
                    }
                }
            }

            return result;
        }
        catch (Exception ex)
        {
            Logging.Handler.Error("/devices -> CPU_History_Load", "MySQL_Query", ex.Message);
            return new List<Device_Information_CPU_History_Entity>(); // Return an empty list or handle the exception as needed
        }
        finally
        {
            conn.Close();
            StateHasChanged();
            loading_overlay = false;
        }
    }

    private async Task Export_CPU_History_Table_Dialog()
    {
        await Show_Export_Table_Dialog("cpu_history");
    }

    #endregion

    #region RAM Information

    string ram_information_string = String.Empty;

    public List<RAM_Information_Entity> ram_information_mysql_data;

    public class RAM_Information_Entity
    {
        public string name { get; set; } = String.Empty;
        public string available { get; set; } = String.Empty;
        public string assured { get; set; } = String.Empty;
        public string cache { get; set; } = String.Empty;
        public string outsourced_pool { get; set; } = String.Empty;
        public string not_outsourced_pool { get; set; } = String.Empty;
        public string speed { get; set; } = String.Empty;
        public string slots { get; set; } = String.Empty;
        public string slots_used { get; set; } = String.Empty;
        public string form_factor { get; set; } = String.Empty;
        public string hardware_reserved { get; set; } = String.Empty;
    }

    private async Task RAM_Information_Load()
    {            
        ram_information_mysql_data = new List<RAM_Information_Entity>();

        try
        {
            using (JsonDocument document = JsonDocument.Parse(ram_information_string))
            {
                RAM_Information_Entity ramInfo = new RAM_Information_Entity();

                // name
                JsonElement name_element = document.RootElement.GetProperty("name");
                ramInfo.name = name_element.ToString();

                // available
                JsonElement available_element = document.RootElement.GetProperty("available");
                ramInfo.available = available_element.ToString();

                // assured
                JsonElement assured_element = document.RootElement.GetProperty("assured");
                ramInfo.assured = assured_element.ToString();

                // cache
                JsonElement cache_element = document.RootElement.GetProperty("cache");
                ramInfo.cache = cache_element.ToString();

                // outsourced_pool
                JsonElement outsourced_pool_element = document.RootElement.GetProperty("outsourced_pool");
                ramInfo.outsourced_pool = outsourced_pool_element.ToString();

                // not_outsourced_pool
                JsonElement not_outsourced_pool_element = document.RootElement.GetProperty("not_outsourced_pool");
                ramInfo.not_outsourced_pool = not_outsourced_pool_element.ToString();

                // speed
                JsonElement speed_element = document.RootElement.GetProperty("speed");
                ramInfo.speed = speed_element.ToString();

                // slots
                JsonElement slots_element = document.RootElement.GetProperty("slots");
                ramInfo.slots = slots_element.ToString();

                // slots_used
                JsonElement slots_used_element = document.RootElement.GetProperty("slots_used");
                ramInfo.slots_used = slots_used_element.ToString();

                // form_factor
                JsonElement form_factor_element = document.RootElement.GetProperty("form_factor");
                ramInfo.form_factor = form_factor_element.ToString();

                // hardware_reserved
                JsonElement hardware_reserved_element = document.RootElement.GetProperty("hardware_reserved");
                ramInfo.hardware_reserved = hardware_reserved_element.ToString();

                // Füge ramInfo zur Liste hinzu
                ram_information_mysql_data.Add(ramInfo);
            }
        }
        catch (Exception ex)
        {
            Logging.Handler.Error("/devices -> RAM_Information_Load", "Result", ex.Message);
        }
    }

    #endregion

    #region RAM Information History

    private List<RAM_History_Entity> ram_history_mysql_data;

    public class RAM_History_Entity
    {
        public string date { get; set; } = String.Empty;
        public string name { get; set; } = String.Empty;
        public string available { get; set; } = String.Empty;
        public string assured { get; set; } = String.Empty;
        public string cache { get; set; } = String.Empty;
        public string outsourced_pool { get; set; } = String.Empty;
        public string not_outsourced_pool { get; set; } = String.Empty;
        public string speed { get; set; } = String.Empty;
        public string slots { get; set; } = String.Empty;
        public string slots_used { get; set; } = String.Empty;
        public string form_factor { get; set; } = String.Empty;
        public string hardware_reserved { get; set; } = String.Empty;
    }

    private TableGroupDefinition<RAM_History_Entity> ram_history_groupDefinition = new TableGroupDefinition<RAM_History_Entity>
        {
            GroupName = "Datum",
            Indentation = false,
            Expandable = true,
            IsInitiallyExpanded = false,
            Selector = (e) => e.date// Hier sollte die Eigenschaft sein, nach der gruppiert werden soll
        };

    private string ram_history_table_view_port = "70vh";
    private string ram_history_table_sorted_column;
    private string ram_history_table_search_string = "";
    private MudDateRangePicker ram_history_table_picker;
    private DateRange ram_history_table_dateRange = new DateRange(DateTime.Now.Date.AddDays(-7), DateTime.Now.Date.AddDays(1));

    private async Task RAM_History_Table_Submit_Picker()
    {
        ram_history_table_picker.Close();

        ram_history_mysql_data = await Device_Information_RAM_History_Load(notes_tenant_name, notes_location_name, notes_device_name);
    }

    private bool RAM_History_Table_Filter_Func(RAM_History_Entity row)
    {
        if (string.IsNullOrEmpty(ram_history_table_search_string))
            return true;

        //Search logic for each column
        return row.date.Contains(ram_history_table_search_string, StringComparison.OrdinalIgnoreCase) ||
            row.name.Contains(ram_history_table_search_string, StringComparison.OrdinalIgnoreCase) ||
            row.available.Contains(ram_history_table_search_string, StringComparison.OrdinalIgnoreCase) ||
            row.assured.Contains(ram_history_table_search_string, StringComparison.OrdinalIgnoreCase) ||
            row.cache.Contains(ram_history_table_search_string, StringComparison.OrdinalIgnoreCase) ||
            row.outsourced_pool.Contains(ram_history_table_search_string, StringComparison.OrdinalIgnoreCase) ||
            row.not_outsourced_pool.Contains(ram_history_table_search_string, StringComparison.OrdinalIgnoreCase) ||
            row.speed.Contains(ram_history_table_search_string, StringComparison.OrdinalIgnoreCase) ||
            row.slots.Contains(ram_history_table_search_string, StringComparison.OrdinalIgnoreCase) ||
            row.slots_used.Contains(ram_history_table_search_string, StringComparison.OrdinalIgnoreCase) ||
            row.form_factor.Contains(ram_history_table_search_string, StringComparison.OrdinalIgnoreCase) ||
            row.hardware_reserved.Contains(ram_history_table_search_string, StringComparison.OrdinalIgnoreCase);
    }

    private string ram_history_selectedRowContent = ""; // Hier wird der Inhalt der ausgewählten Zeile gespeichert

    // Der Handler für den TableRowClick-Event
    private void RAM_History_RowClickHandler(RAM_History_Entity row)
    {
        ram_history_selectedRowContent = row.date;
    }

    private string RAM_History_GetRowClass(RAM_History_Entity row)
    {
        return row.date == ram_history_selectedRowContent ? "selected-row" : "";
    }

    private async Task <List<RAM_History_Entity>> Device_Information_RAM_History_Load(string tenant_name, string location_name, string device_name)
    {        
        loading_overlay = true;

        string query = "SELECT * FROM device_information_ram_history WHERE device_name = @device_name AND location_name = @location_name AND tenant_name = @tenant_name AND date >= @start_date AND date <= @end_date ORDER BY date DESC;";

        MySqlConnection conn = new MySqlConnection(Application_Settings.connectionString);

        try
        {
            List<RAM_History_Entity> result = new List<RAM_History_Entity>();

            await conn.OpenAsync();

            MySqlCommand command = new MySqlCommand(query, conn);
            command = new MySqlCommand(query, conn);
            command.Parameters.AddWithValue("@tenant_name", tenant_name);
            command.Parameters.AddWithValue("@location_name", location_name);
            command.Parameters.AddWithValue("@device_name", device_name);
            command.Parameters.AddWithValue("@start_date", ram_history_table_dateRange.Start.Value);
            command.Parameters.AddWithValue("@end_date", ram_history_table_dateRange.End.Value);

            Logging.Handler.Debug("/devices -> Device_Information_RAM_History_Load", "MySQL_Query", query);

            using (DbDataReader reader = await command.ExecuteReaderAsync())
            {
                if (reader.HasRows)
                {
                    while (await reader.ReadAsync())
                    {
                        Logging.Handler.Debug("/devices -> Device_Information_RAM_History_Load", "MySQL_Result", reader["json"].ToString());

                        JsonObject ram_history_object = JsonNode.Parse(reader["json"].ToString()).AsObject();

                        RAM_History_Entity entity = new RAM_History_Entity
                        {
                            date = reader["date"].ToString(),
                            name = ram_history_object["name"].ToString(),
                            available = ram_history_object["available"].ToString(),
                            assured = ram_history_object["assured"].ToString(),
                            cache = ram_history_object["cache"].ToString(),
                            outsourced_pool = ram_history_object["outsourced_pool"].ToString(),
                            not_outsourced_pool = ram_history_object["not_outsourced_pool"].ToString(),
                            speed = ram_history_object["speed"].ToString(),
                            slots = ram_history_object["slots"].ToString(),
                            slots_used = ram_history_object["slots_used"].ToString(),
                            form_factor = ram_history_object["form_factor"].ToString(),
                            hardware_reserved = ram_history_object["hardware_reserved"].ToString(),
                        };

                        result.Add(entity);
                    }
                }
            }

            return result;
        }
        catch (Exception ex)
        {
            Logging.Handler.Error("/devices -> Device_Information_RAM_History_Load", "MySQL_Query", ex.Message);
            return new List<RAM_History_Entity>(); // Return an empty list or handle the exception as needed
        }
        finally
        {
            conn.Close();
            StateHasChanged();
            loading_overlay = false;
        }
    }

    private async Task Export_RAM_History_Table_Dialog()
    {
        await Show_Export_Table_Dialog("ram_history");
    }

    #endregion

    #region Network Information

    string network_information_string = String.Empty;

    public List<Network_Information_Entity> network_information_mysql_data;

    public class Network_Information_Entity
    {
        public string name { get; set; } = String.Empty;
        public string description { get; set; } = String.Empty;
        public string type { get; set; } = String.Empty;
        public string link_speed { get; set; } = String.Empty;
        public string service_name { get; set; } = String.Empty;
        public string dns_domain { get; set; } = String.Empty;
        public string dns_hostname { get; set; } = String.Empty;
        public string dhcp_enabled { get; set; } = String.Empty;
        public string dhcp_server { get; set; } = String.Empty;
        public string ipv4_address { get; set; } = String.Empty;
        public string ipv6_address { get; set; } = String.Empty;
        public string subnet_mask { get; set; } = String.Empty;
        public string mac_address { get; set; } = String.Empty;
        public string sending { get; set; } = String.Empty;
        public string receive { get; set; } = String.Empty;
    }

    private async Task Network_Information_Load()
    {
        try
        {
            network_information_mysql_data = new List<Network_Information_Entity>();

            JsonArray network_adapters_array = JsonNode.Parse(network_adapters).AsArray();

            foreach (var adapter in network_adapters_array)
            {
                Network_Information_Entity networkInfo = new Network_Information_Entity();

                networkInfo.name = adapter["name"].ToString();
                networkInfo.description = adapter["description"].ToString();
                networkInfo.type = adapter["type"].ToString();
                networkInfo.link_speed = adapter["link_speed"].ToString();
                networkInfo.service_name = adapter["service_name"].ToString();
                networkInfo.dns_domain = adapter["dns_domain"].ToString();
                networkInfo.dns_hostname = adapter["dns_hostname"].ToString();
                networkInfo.dhcp_enabled = adapter["dhcp_enabled"].ToString();
                networkInfo.dhcp_server = adapter["dhcp_server"].ToString();
                networkInfo.ipv4_address = adapter["ipv4_address"].ToString();
                networkInfo.ipv6_address = adapter["ipv6_address"].ToString();
                networkInfo.subnet_mask = adapter["subnet_mask"].ToString();
                networkInfo.mac_address = adapter["mac_address"].ToString();
                networkInfo.sending = adapter["sending"].ToString();
                networkInfo.receive = adapter["receive"].ToString();

                // Füge networkInfo zur Liste hinzu
                network_information_mysql_data.Add(networkInfo);
            }
        }
        catch (Exception ex)
        {
            Logging.Handler.Error("/devices -> Network_Information_Load", "Result", ex.Message);
        }
    }

    #endregion

    #region Network Adapters History

    private List<Device_Information_Network_Adapters_History_Entity> device_information_network_adapters_history_mysql_data;

    public class Device_Information_Network_Adapters_History_Entity
    {
        public string date { get; set; } = String.Empty;
        public string name { get; set; } = String.Empty;
        public string description { get; set; } = String.Empty;
        public string type { get; set; } = String.Empty;
        public string link_speed { get; set; } = String.Empty;
        public string service_name { get; set; } = String.Empty;
        public string dns_domain { get; set; } = String.Empty;
        public string dns_hostname { get; set; } = String.Empty;
        public string dhcp_enabled { get; set; } = String.Empty;
        public string dhcp_server { get; set; } = String.Empty;
        public string ipv4_address { get; set; } = String.Empty;
        public string ipv6_address { get; set; } = String.Empty;
        public string subnet_mask { get; set; } = String.Empty;
        public string mac_address { get; set; } = String.Empty;
        public string sending { get; set; } = String.Empty;
        public string receive { get; set; } = String.Empty;
    }

    private TableGroupDefinition<Device_Information_Network_Adapters_History_Entity> device_information_network_adapters_history_groupDefinition = new TableGroupDefinition<Device_Information_Network_Adapters_History_Entity>
    {
        GroupName = "Datum",
        Indentation = false,
        Expandable = true,
        IsInitiallyExpanded = false,
        Selector = (e) => e.date// Hier sollte die Eigenschaft sein, nach der gruppiert werden soll
    };

    private string device_information_network_adapters_history_table_view_port = "70vh";
    private string device_information_network_adapters_history_table_sorted_column;
    private string device_information_network_adapters_history_table_search_string = "";
    private MudDateRangePicker device_information_network_adapters_history_table_picker;
    private DateRange device_information_network_adapters_history_table_dateRange = new DateRange(DateTime.Now.Date.AddDays(-7), DateTime.Now.Date.AddDays(1));

    private async Task Device_Information_Network_Adapters_History_Table_Submit_Picker()
    {
        device_information_network_adapters_history_table_picker.Close();

        device_information_network_adapters_history_mysql_data = await Device_Information_Network_Adapters_History_Load(notes_tenant_name, notes_location_name, notes_device_name);
    }

    private bool Device_Information_Network_Adapters_History_Table_Filter_Func(Device_Information_Network_Adapters_History_Entity row)
    {
        if (string.IsNullOrEmpty(device_information_network_adapters_history_table_search_string))
            return true;

        //Search logic for each column
        return row.date.Contains(device_information_network_adapters_history_table_search_string, StringComparison.OrdinalIgnoreCase) ||
            row.name.Contains(device_information_network_adapters_history_table_search_string, StringComparison.OrdinalIgnoreCase) ||
            row.description.Contains(device_information_network_adapters_history_table_search_string, StringComparison.OrdinalIgnoreCase) ||
            row.type.Contains(device_information_network_adapters_history_table_search_string, StringComparison.OrdinalIgnoreCase) ||
            row.link_speed.Contains(device_information_network_adapters_history_table_search_string, StringComparison.OrdinalIgnoreCase) ||
            row.service_name.Contains(device_information_network_adapters_history_table_search_string, StringComparison.OrdinalIgnoreCase) ||
            row.dns_domain.Contains(device_information_network_adapters_history_table_search_string, StringComparison.OrdinalIgnoreCase) ||
            row.dns_hostname.Contains(device_information_network_adapters_history_table_search_string, StringComparison.OrdinalIgnoreCase) ||
            row.dhcp_enabled.Contains(device_information_network_adapters_history_table_search_string, StringComparison.OrdinalIgnoreCase) ||
            row.dhcp_server.Contains(device_information_network_adapters_history_table_search_string, StringComparison.OrdinalIgnoreCase) ||
            row.ipv4_address.Contains(device_information_network_adapters_history_table_search_string, StringComparison.OrdinalIgnoreCase) ||
            row.ipv6_address.Contains(device_information_network_adapters_history_table_search_string, StringComparison.OrdinalIgnoreCase) ||
            row.subnet_mask.Contains(device_information_network_adapters_history_table_search_string, StringComparison.OrdinalIgnoreCase) ||
            row.mac_address.Contains(device_information_network_adapters_history_table_search_string, StringComparison.OrdinalIgnoreCase) ||
            row.sending.Contains(device_information_network_adapters_history_table_search_string, StringComparison.OrdinalIgnoreCase) ||
            row.receive.Contains(device_information_network_adapters_history_table_search_string, StringComparison.OrdinalIgnoreCase);
    }

    private string network_adapters_history_selectedRowContent = ""; // Hier wird der Inhalt der ausgewählten Zeile gespeichert

    // Der Handler für den TableRowClick-Event
    private void Device_Information_Network_Adapters_History_RowClickHandler(Device_Information_Network_Adapters_History_Entity row)
    {
        network_adapters_history_selectedRowContent = row.date;
    }

    private string Device_Information_Network_Adapters_History_GetRowClass(Device_Information_Network_Adapters_History_Entity row)
    {
        return row.date == network_adapters_history_selectedRowContent ? "selected-row" : "";
    }

    private async Task<List<Device_Information_Network_Adapters_History_Entity>> Device_Information_Network_Adapters_History_Load(string tenant_name, string location_name, string device_name)
    {        
        loading_overlay = true;

        string query = "SELECT * FROM device_information_network_adapters_history WHERE device_name = @device_name AND location_name = @location_name AND tenant_name = @tenant_name AND date >= @start_date AND date <= @end_date ORDER BY date DESC;";

        MySqlConnection conn = new MySqlConnection(Application_Settings.connectionString);

        try
        {
            List<Device_Information_Network_Adapters_History_Entity> result = new List<Device_Information_Network_Adapters_History_Entity>();

            await conn.OpenAsync();

            MySqlCommand command = new MySqlCommand(query, conn);
            command = new MySqlCommand(query, conn);
            command.Parameters.AddWithValue("@tenant_name", tenant_name);
            command.Parameters.AddWithValue("@location_name", location_name);
            command.Parameters.AddWithValue("@device_name", device_name);
            command.Parameters.AddWithValue("@start_date", device_information_network_adapters_history_table_dateRange.Start.Value);
            command.Parameters.AddWithValue("@end_date", device_information_network_adapters_history_table_dateRange.End.Value);

            Logging.Handler.Debug("/devices -> Network_Adapters_History_Load", "MySQL_Query", query);

            using (DbDataReader reader = await command.ExecuteReaderAsync())
            {
                if (reader.HasRows)
                {
                    while (await reader.ReadAsync())
                    {
                        Logging.Handler.Debug("/devices -> Network_Adapters_History_Load", "MySQL_Result", reader["json"].ToString());

                        JsonArray network_adapters_array = JsonNode.Parse(reader["json"].ToString()).AsArray();

                        foreach (var _object in network_adapters_array)
                        {

                            Device_Information_Network_Adapters_History_Entity entity = new Device_Information_Network_Adapters_History_Entity
                            {
                                date = reader["date"].ToString(),

                                name = _object["name"].ToString(),
                                description = _object["description"].ToString(),
                                type = _object["type"].ToString(),
                                link_speed = _object["link_speed"].ToString(),
                                service_name = _object["service_name"].ToString(),
                                dns_domain = _object["dns_domain"].ToString(),
                                dns_hostname = _object["dns_hostname"].ToString(),
                                dhcp_enabled = _object["dhcp_enabled"].ToString(),
                                dhcp_server = _object["dhcp_server"].ToString(),
                                ipv4_address = _object["ipv4_address"].ToString(),
                                ipv6_address = _object["ipv6_address"].ToString(),
                                subnet_mask = _object["subnet_mask"].ToString(),
                                mac_address = _object["mac_address"].ToString(),
                                sending = _object["sending"].ToString(),
                                    receive = _object["receive"].ToString()
                            };

                            result.Add(entity);
                        }
                    }
                }
            }

            return result;
        }
        catch (Exception ex)
        {
            Logging.Handler.Error("/devices -> Network_Adapters_History_Load", "MySQL_Query", ex.Message);
            return new List<Device_Information_Network_Adapters_History_Entity>(); // Return an empty list or handle the exception as needed
        }
        finally
        {
            conn.Close();
            StateHasChanged();
            loading_overlay = false;
        }
    }

    private async Task Export_Network_Adapters_History_Table_Dialog()
    {
        await Show_Export_Table_Dialog("network_adapters_history");
    }

    #endregion

    #region Software Installed Table

    public List<Software_Installed_Entity> software_installed_mysql_data;

    public class Software_Installed_Entity
    {
        public string name { get; set; } = String.Empty;
        public string version { get; set; } = String.Empty;
        public string installation_date { get; set; } = String.Empty;
        public string installation_path { get; set; } = String.Empty;
        public string vendor { get; set; } = String.Empty;
        public string uninstallation_string { get; set; } = String.Empty;
    }

    private string software_installed_table_view_port = "70vh";
    private string software_installed_table_sorted_column;
    private string software_installed_table_search_string = "";

    private bool Software_Installed_Table_Filter_Func(Software_Installed_Entity row)
    {
        if (string.IsNullOrEmpty(software_installed_table_search_string))
            return true;

        //Search logic for each column
        return row.name.Contains(software_installed_table_search_string, StringComparison.OrdinalIgnoreCase) ||
            row.version.Contains(software_installed_table_search_string, StringComparison.OrdinalIgnoreCase) ||
            row.installation_date.Contains(software_installed_table_search_string, StringComparison.OrdinalIgnoreCase) ||
            row.installation_path.Contains(software_installed_table_search_string, StringComparison.OrdinalIgnoreCase) ||
            row.vendor.Contains(software_installed_table_search_string, StringComparison.OrdinalIgnoreCase) ||
            row.uninstallation_string.Contains(software_installed_table_search_string, StringComparison.OrdinalIgnoreCase);
    }

    private string software_installed_selectedRowContent = ""; // Hier wird der Inhalt der ausgewählten Zeile gespeichert

    // Der Handler für den TableRowClick-Event
    private void Software_Installed_RowClickHandler(Software_Installed_Entity row)
    {
        software_installed_selectedRowContent = row.name;
    }

    private string Software_Installed_GetRowClass(Software_Installed_Entity row)
    {
        return row.name == software_installed_selectedRowContent ? "selected-row" : "";
    }

    private async Task Software_Installed_Load()
    {
        try
        {
            JsonArray software_installed_array = JsonNode.Parse(applications_installed).AsArray();

            software_installed_mysql_data = new List<Software_Installed_Entity>();

            foreach (var software in software_installed_array)
            {
                Software_Installed_Entity softwareEntity = new Software_Installed_Entity
                {
                    name = software["name"].ToString(),
                    version = software["version"].ToString(),
                    installation_date = software["installed_date"].ToString(),
                    installation_path = software["installation_path"].ToString(),
                    vendor = software["vendor"].ToString(),
                    uninstallation_string = software["uninstallation_string"].ToString()
                };

                software_installed_mysql_data.Add(softwareEntity);
            }
        }
        catch (Exception ex)
        {
            Logging.Handler.Error("/devices -> Software_Installed_Load", "Result", ex.Message);
        }
    }

    #endregion

    #region Applications Installed Table History

    private List<Applications_Installed_History_Entity> applications_installed_history_mysql_data;

    public class Applications_Installed_History_Entity
    {
        public string date { get; set; } = String.Empty;
        public string name { get; set; } = String.Empty;
        public string version { get; set; } = String.Empty;
        public string installation_date { get; set; } = String.Empty;
        public string installation_path { get; set; } = String.Empty;
        public string vendor{ get; set; } = String.Empty;
        public string uninstallation_string { get; set; } = String.Empty;
    }

    private TableGroupDefinition<Applications_Installed_History_Entity> _groupDefinition = new TableGroupDefinition<Applications_Installed_History_Entity>
    {
        GroupName = "Datum",
        Indentation = false,
        Expandable = true,
        IsInitiallyExpanded = false,
        Selector = (e) => e.date// Hier sollte die Eigenschaft sein, nach der gruppiert werden soll
    };

    private string applications_installed_history_table_view_port = "70vh";
    private string applications_installed_history_table_sorted_column;
    private string applications_installed_history_table_search_string = "";
    private MudDateRangePicker applications_installed_history_table_picker;
    private DateRange applications_installed_history_table_dateRange = new DateRange(DateTime.Now.Date.AddDays(-7), DateTime.Now.Date.AddDays(1));

    private async Task Applications_Installed_History_Table_Submit_Picker()
    {
        applications_installed_history_table_picker.Close();

        applications_installed_history_mysql_data = await Applications_Installed_History_Load(notes_tenant_name, notes_location_name, notes_device_name);
    }

    private bool Applications_Installed_History_Table_Filter_Func(Applications_Installed_History_Entity row)
    {
        if (string.IsNullOrEmpty(applications_installed_history_table_search_string))
            return true;

        //Search logic for each column
        return row.date.Contains(applications_installed_history_table_search_string, StringComparison.OrdinalIgnoreCase) ||
            row.name.Contains(applications_installed_history_table_search_string, StringComparison.OrdinalIgnoreCase) ||
            row.version.Contains(applications_installed_history_table_search_string, StringComparison.OrdinalIgnoreCase) ||
            row.installation_date.Contains(applications_installed_history_table_search_string, StringComparison.OrdinalIgnoreCase) ||
            row.installation_path.Contains(applications_installed_history_table_search_string, StringComparison.OrdinalIgnoreCase) ||
            row.vendor.Contains(applications_installed_history_table_search_string, StringComparison.OrdinalIgnoreCase) ||
            row.uninstallation_string.Contains(applications_installed_history_table_search_string, StringComparison.OrdinalIgnoreCase);
    }

    private string applications_installed_history_selectedRowContent = ""; // Hier wird der Inhalt der ausgewählten Zeile gespeichert

    // Der Handler für den TableRowClick-Event
    private void Applications_Installed_History_RowClickHandler(Applications_Installed_History_Entity row)
    {
        applications_installed_history_selectedRowContent = row.name;
    }

    private string Applications_Installed_History_GetRowClass(Applications_Installed_History_Entity row)
    {
        return row.name == applications_installed_history_selectedRowContent ? "selected-row" : "";
    }

    private async Task<List<Applications_Installed_History_Entity>> Applications_Installed_History_Load(string tenant_name, string location_name, string device_name)
    {
        loading_overlay = true;

        string query = "SELECT * FROM applications_installed_history WHERE device_name = @device_name AND location_name = @location_name AND tenant_name = @tenant_name AND date >= @start_date AND date <= @end_date ORDER BY date DESC;";

        MySqlConnection conn = new MySqlConnection(Application_Settings.connectionString);

        try
        {
            List<Applications_Installed_History_Entity> result = new List<Applications_Installed_History_Entity>();

            await conn.OpenAsync();

            MySqlCommand command = new MySqlCommand(query, conn);
            command = new MySqlCommand(query, conn);
            command.Parameters.AddWithValue("@tenant_name", tenant_name);
            command.Parameters.AddWithValue("@location_name", location_name);
            command.Parameters.AddWithValue("@device_name", device_name);
            command.Parameters.AddWithValue("@start_date", applications_installed_history_table_dateRange.Start.Value);
            command.Parameters.AddWithValue("@end_date", applications_installed_history_table_dateRange.End.Value);

            Logging.Handler.Debug("/devices -> Applications_Installed_History_Load", "MySQL_Query", query);

            using (DbDataReader reader = await command.ExecuteReaderAsync())
            {
                if (reader.HasRows)
                {
                    while (await reader.ReadAsync())
                    {
                        Logging.Handler.Debug("/devices -> Applications_Installed_History_Load", "MySQL_Result", reader["json"].ToString());

                        JsonArray applications_installed_history_array = JsonNode.Parse(reader["json"].ToString()).AsArray();

                        foreach (var software in applications_installed_history_array)
                        {
                            Applications_Installed_History_Entity softwareEntity = new Applications_Installed_History_Entity
                                {
                                    name = software["name"].ToString(),
                                    date = reader["date"].ToString(),
                                    version = software["version"].ToString(),
                                    installation_date = software["installed_date"].ToString(),
                                    installation_path = software["installation_path"].ToString(),
                                    vendor = software["vendor"].ToString(),
                                    uninstallation_string = software["uninstallation_string"].ToString(),
                                };

                            result.Add(softwareEntity);
                        }
                    }
                }
            }

            return result;
        }
        catch (Exception ex)
        {
            Logging.Handler.Error("/devices -> Applications_Installed_History_Load", "MySQL_Query", ex.Message);
            return new List<Applications_Installed_History_Entity>(); // Return an empty list or handle the exception as needed
        }
        finally
        {
            conn.Close();
            StateHasChanged();
            loading_overlay = false;
        }
    }

    #endregion

    #region Applications Logon Table

    public List<Application_Logon_Entity> application_logon_mysql_data;

    public class Application_Logon_Entity
    {
        public string name { get; set; } = String.Empty;
        public string path { get; set; } = String.Empty;
        public string command { get; set; } = String.Empty;
        public string user { get; set; } = String.Empty;
        public string user_sid{ get; set; } = String.Empty;
    }

    private string application_logon_table_view_port = "70vh";
    private string application_logon_table_sorted_column;
    private string application_logon_table_search_string = "";

    private bool Application_Logon_Table_Filter_Func(Application_Logon_Entity row)
    {
        if (string.IsNullOrEmpty(application_logon_table_search_string))
            return true;

        //Search logic for each column
        return row.name.Contains(application_logon_table_search_string, StringComparison.OrdinalIgnoreCase) ||
            row.path.Contains(application_logon_table_search_string, StringComparison.OrdinalIgnoreCase) ||
            row.command.Contains(application_logon_table_search_string, StringComparison.OrdinalIgnoreCase) ||
            row.user.Contains(application_logon_table_search_string, StringComparison.OrdinalIgnoreCase) ||
            row.user_sid.Contains(application_logon_table_search_string, StringComparison.OrdinalIgnoreCase);
    }

    private string application_logon_selectedRowContent = ""; // Hier wird der Inhalt der ausgewählten Zeile gespeichert

    // Der Handler für den TableRowClick-Event
    private void Application_Logon_RowClickHandler(Application_Logon_Entity row)
    {
        application_logon_selectedRowContent = row.name;
    }

    private string Application_Logon_GetRowClass(Application_Logon_Entity row)
    {
        return row.name == application_logon_selectedRowContent ? "selected-row" : "";
    }

    private async Task Application_Logon_Load()
    {
        try
        {
            JsonArray application_logon_array = JsonNode.Parse(applications_logon).AsArray();

            application_logon_mysql_data = new List<Application_Logon_Entity>();

            foreach (var software in application_logon_array)
            {
                Application_Logon_Entity softwareEntity = new Application_Logon_Entity
                    {
                        name = software["name"].ToString(),
                        path = software["path"].ToString(),
                        command = software["command"].ToString(),
                        user = software["user"].ToString(),
                        user_sid = software["user_sid"].ToString(),
                    };

                application_logon_mysql_data.Add(softwareEntity);
            }
        }
        catch (Exception ex)
        {
            Logging.Handler.Error("/devices -> Application_Logon_Load", "Result", ex.Message);
        }
    }

    #endregion

    #region Applications Logon History Table
    private List<Applications_Logon_History_Entity> applications_logon_history_mysql_data;

    public class Applications_Logon_History_Entity
    {
        public string date { get; set; } = String.Empty;
        public string name { get; set; } = String.Empty;
        public string path { get; set; } = String.Empty;
        public string command { get; set; } = String.Empty;
        public string user { get; set; } = String.Empty;
        public string user_sid{ get; set; } = String.Empty;
    }

    private TableGroupDefinition<Applications_Logon_History_Entity> applications_logon_history_groupDefinition = new TableGroupDefinition<Applications_Logon_History_Entity>
    {
        GroupName = "Datum",
        Indentation = false,
        Expandable = true,
        IsInitiallyExpanded = false,
        Selector = (e) => e.date// Hier sollte die Eigenschaft sein, nach der gruppiert werden soll
    };

    private string applications_logon_history_table_view_port = "70vh";
    private string applications_logon_history_table_sorted_column;
    private string applications_logon_history_table_search_string = "";
    private MudDateRangePicker applications_logon_history_table_picker;
    private DateRange applications_logon_history_table_dateRange = new DateRange(DateTime.Now.Date.AddDays(-7), DateTime.Now.Date.AddDays(1));

    private async Task Applications_Logon_History_Table_Submit_Picker()
    {
        applications_logon_history_table_picker.Close();

        applications_logon_history_mysql_data = await Applications_Logon_History_Load(notes_tenant_name, notes_location_name, notes_device_name);
    }

    private bool Applications_Logon_History_Table_Filter_Func(Applications_Logon_History_Entity row)
    {
        if (string.IsNullOrEmpty(applications_logon_history_table_search_string))
            return true;

        //Search logic for each column
        return row.date.Contains(applications_logon_history_table_search_string, StringComparison.OrdinalIgnoreCase) ||
            row.name.Contains(applications_logon_history_table_search_string, StringComparison.OrdinalIgnoreCase) ||
            row.path.Contains(applications_logon_history_table_search_string, StringComparison.OrdinalIgnoreCase) ||
            row.command.Contains(applications_logon_history_table_search_string, StringComparison.OrdinalIgnoreCase) ||
            row.user.Contains(applications_logon_history_table_search_string, StringComparison.OrdinalIgnoreCase) ||
            row.user_sid.Contains(applications_logon_history_table_search_string, StringComparison.OrdinalIgnoreCase);
    }

    private string applications_logon_history_selectedRowContent = ""; // Hier wird der Inhalt der ausgewählten Zeile gespeichert

    // Der Handler für den TableRowClick-Event
    private void Applications_Logon_History_RowClickHandler(Applications_Logon_History_Entity row)
    {
        applications_logon_history_selectedRowContent = row.name;
    }

    private string Applications_Logon_History_GetRowClass(Applications_Logon_History_Entity row)
    {
        return row.name == applications_logon_history_selectedRowContent ? "selected-row" : "";
    }

    private async Task<List<Applications_Logon_History_Entity>> Applications_Logon_History_Load(string tenant_name, string location_name, string device_name)
    {
        loading_overlay = true;

        string query = "SELECT * FROM applications_logon_history WHERE device_name = @device_name AND location_name = @location_name AND tenant_name = @tenant_name AND date >= @start_date AND date <= @end_date ORDER BY date DESC;";

        MySqlConnection conn = new MySqlConnection(Application_Settings.connectionString);

        try
        {
            List<Applications_Logon_History_Entity> result = new List<Applications_Logon_History_Entity>();

            await conn.OpenAsync();

            MySqlCommand command = new MySqlCommand(query, conn);
            command = new MySqlCommand(query, conn);
            command.Parameters.AddWithValue("@tenant_name", tenant_name);
            command.Parameters.AddWithValue("@location_name", location_name);
            command.Parameters.AddWithValue("@device_name", device_name);
            command.Parameters.AddWithValue("@start_date", applications_logon_history_table_dateRange.Start.Value);
            command.Parameters.AddWithValue("@end_date", applications_logon_history_table_dateRange.End.Value);

            Logging.Handler.Debug("/devices -> Applications_Logon_History_Load", "MySQL_Query", query);

            using (DbDataReader reader = await command.ExecuteReaderAsync())
            {
                if (reader.HasRows)
                {
                    while (await reader.ReadAsync())
                    {
                        Logging.Handler.Debug("/devices -> Applications_Logon_History_Load", "MySQL_Result", reader["json"].ToString());

                        JsonArray applications_logon_history_array = JsonNode.Parse(reader["json"].ToString()).AsArray();

                        foreach (var software in applications_logon_history_array)
                        {
                            Applications_Logon_History_Entity softwareEntity = new Applications_Logon_History_Entity
                                {
                                    name = software["name"].ToString(),
                                    date = reader["date"].ToString(),
                                    path = software["path"].ToString(),
                                    command = software["command"].ToString(),
                                    user = software["user"].ToString(),
                                    user_sid = software["user_sid"].ToString(),
                                };

                            result.Add(softwareEntity);
                        }
                    }
                }
            }

            return result;
        }
        catch (Exception ex)
        {
            Logging.Handler.Error("/devices -> Applications_Logon_History_Load", "MySQL_Query", ex.Message);
            return new List<Applications_Logon_History_Entity>(); // Return an empty list or handle the exception as needed
        }
        finally
        {
            conn.Close();
            StateHasChanged();
            loading_overlay = false;
        }
    }
    #endregion
    #region Applications Scheduled Tasks Table

    public List<Applications_Scheduled_Tasks_Entity> applications_scheduled_tasks_mysql_data;

    public class Applications_Scheduled_Tasks_Entity
    {
        public string name { get; set; } = String.Empty;
        public string status { get; set; } = String.Empty;
        public string author { get; set; } = String.Empty;
        public string path { get; set; } = String.Empty;
        public string folder { get; set; } = String.Empty;
        public string user_sid { get; set; } = String.Empty;
        public string next_execution { get; set; } = String.Empty;
        public string last_execution { get; set; } = String.Empty;
    }

    private string applications_scheduled_tasks_table_view_port = "70vh";
    private string applications_scheduled_tasks_table_sorted_column;
    private string applications_scheduled_tasks_table_search_string = "";

    private bool Applications_Scheduled_Tasks_Table_Filter_Func(Applications_Scheduled_Tasks_Entity row)
    {
        if (string.IsNullOrEmpty(applications_scheduled_tasks_table_search_string))
            return true;

        //Search logic for each column
        return row.name.Contains(applications_scheduled_tasks_table_search_string, StringComparison.OrdinalIgnoreCase) ||
            row.status.Contains(applications_scheduled_tasks_table_search_string, StringComparison.OrdinalIgnoreCase) ||
            row.author.Contains(applications_scheduled_tasks_table_search_string, StringComparison.OrdinalIgnoreCase) ||
            row.path.Contains(applications_scheduled_tasks_table_search_string, StringComparison.OrdinalIgnoreCase) ||
            row.folder.Contains(applications_scheduled_tasks_table_search_string, StringComparison.OrdinalIgnoreCase) ||
            row.user_sid.Contains(applications_scheduled_tasks_table_search_string, StringComparison.OrdinalIgnoreCase) ||
            row.next_execution.Contains(applications_scheduled_tasks_table_search_string, StringComparison.OrdinalIgnoreCase) ||
            row.last_execution.Contains(applications_scheduled_tasks_table_search_string, StringComparison.OrdinalIgnoreCase);
    }

    private string applications_scheduled_tasks_selectedRowContent = ""; // Hier wird der Inhalt der ausgewählten Zeile gespeichert

    // Der Handler für den TableRowClick-Event
    private void Applications_Scheduled_Tasks_RowClickHandler(Applications_Scheduled_Tasks_Entity row)
    {
        applications_scheduled_tasks_selectedRowContent = row.name;
    }

    private string Applications_Scheduled_Tasks_GetRowClass(Applications_Scheduled_Tasks_Entity row)
    {
        return row.name == applications_scheduled_tasks_selectedRowContent ? "selected-row" : "";
    }

    private async Task Applications_Scheduled_Tasks_Load()
    {
        try
        {
            JsonArray applications_scheduled_tasks_array = JsonNode.Parse(applications_scheduled_tasks).AsArray();

            applications_scheduled_tasks_mysql_data = new List<Applications_Scheduled_Tasks_Entity>();

            foreach (var software in applications_scheduled_tasks_array)
            {
                Applications_Scheduled_Tasks_Entity softwareEntity = new Applications_Scheduled_Tasks_Entity
                    {
                        name = software["name"]?.ToString() ?? "N/A",
                        status = software["status"]?.ToString() ?? "N/A",
                        author = software["author"]?.ToString() ?? "N/A",
                        path = software["path"]?.ToString() ?? "N/A",
                        folder = software["folder"]?.ToString() ?? "N/A",
                        user_sid = software["user_sid"]?.ToString() ?? "N/A",
                        next_execution = software["next_execution"]?.ToString() ?? "N/A",
                        last_execution = software["last_execution"]?.ToString() ?? "N/A",
                    };

                applications_scheduled_tasks_mysql_data.Add(softwareEntity);
            }
        }
        catch (Exception ex)
        {
            Logging.Handler.Error("/devices -> Applications_Scheduled_Tasks_Load", "Result", ex.Message);
        }
    }

    #endregion

    #region Applications Scheduled Tasks History

    private List<Applications_Scheduled_Tasks_History_Entity> applications_scheduled_tasks_history_mysql_data;

    public class Applications_Scheduled_Tasks_History_Entity
    {
        public string date { get; set; } = String.Empty;
        public string name { get; set; } = String.Empty;
        public string status { get; set; } = String.Empty;
        public string author { get; set; } = String.Empty;
        public string path { get; set; } = String.Empty;
        public string folder { get; set; } = String.Empty;
        public string user_sid { get; set; } = String.Empty;
        public string next_execution { get; set; } = String.Empty;
        public string last_execution { get; set; } = String.Empty;
    }

    private TableGroupDefinition<Applications_Scheduled_Tasks_History_Entity> applications_scheduled_tasks_history_groupDefinition = new TableGroupDefinition<Applications_Scheduled_Tasks_History_Entity>
        {
            GroupName = "Datum",
            Indentation = false,
            Expandable = true,
            IsInitiallyExpanded = false,
            Selector = (e) => e.date// Hier sollte die Eigenschaft sein, nach der gruppiert werden soll
        };

    private string applications_scheduled_tasks_history_table_view_port = "70vh";
    private string applications_scheduled_tasks_history_table_sorted_column;
    private string applications_scheduled_tasks_history_table_search_string = "";
    private MudDateRangePicker applications_scheduled_tasks_history_table_picker;
    private DateRange applications_scheduled_tasks_history_table_dateRange = new DateRange(DateTime.Now.Date.AddDays(-7), DateTime.Now.Date.AddDays(1));

    private async Task Applications_Scheduled_Tasks_History_Table_Submit_Picker()
    {
        applications_scheduled_tasks_history_table_picker.Close();

        applications_scheduled_tasks_history_mysql_data = await Applications_Scheduled_Tasks_History_Load(notes_tenant_name, notes_location_name, notes_device_name);
    }

    private bool Applications_Scheduled_Tasks_History_Table_Filter_Func(Applications_Scheduled_Tasks_History_Entity row)
    {
        if (string.IsNullOrEmpty(applications_scheduled_tasks_history_table_search_string))
            return true;

        //Search logic for each column
        return row.date.Contains(applications_scheduled_tasks_history_table_search_string, StringComparison.OrdinalIgnoreCase) ||
            row.name.Contains(applications_scheduled_tasks_history_table_search_string, StringComparison.OrdinalIgnoreCase) ||
            row.status.Contains(applications_scheduled_tasks_history_table_search_string, StringComparison.OrdinalIgnoreCase) ||
            row.author.Contains(applications_scheduled_tasks_history_table_search_string, StringComparison.OrdinalIgnoreCase) ||
            row.path.Contains(applications_scheduled_tasks_history_table_search_string, StringComparison.OrdinalIgnoreCase) ||
            row.folder.Contains(applications_scheduled_tasks_history_table_search_string, StringComparison.OrdinalIgnoreCase) ||
            row.user_sid.Contains(applications_scheduled_tasks_history_table_search_string, StringComparison.OrdinalIgnoreCase) ||
            row.next_execution.Contains(applications_scheduled_tasks_history_table_search_string, StringComparison.OrdinalIgnoreCase) ||
            row.last_execution.Contains(applications_scheduled_tasks_history_table_search_string, StringComparison.OrdinalIgnoreCase);
    }

    private string applications_scheduled_tasks_history_selectedRowContent = ""; // Hier wird der Inhalt der ausgewählten Zeile gespeichert

    // Der Handler für den TableRowClick-Event
    private void Applications_Scheduled_Tasks_History_RowClickHandler(Applications_Scheduled_Tasks_History_Entity row)
    {
        applications_scheduled_tasks_history_selectedRowContent = row.name;
    }

    private string Applications_Scheduled_Tasks_History_GetRowClass(Applications_Scheduled_Tasks_History_Entity row)
    {
        return row.name == applications_scheduled_tasks_history_selectedRowContent ? "selected-row" : "";
    }

    private async Task<List<Applications_Scheduled_Tasks_History_Entity>> Applications_Scheduled_Tasks_History_Load(string tenant_name, string location_name, string device_name)
    {
        loading_overlay = true;

        string query = "SELECT * FROM applications_scheduled_tasks_history WHERE device_name = @device_name AND location_name = @location_name AND tenant_name = @tenant_name AND date >= @start_date AND date <= @end_date ORDER BY date DESC;";

        MySqlConnection conn = new MySqlConnection(Application_Settings.connectionString);

        try
        {
            List<Applications_Scheduled_Tasks_History_Entity> result = new List<Applications_Scheduled_Tasks_History_Entity>();

            await conn.OpenAsync();

            MySqlCommand command = new MySqlCommand(query, conn);
            command = new MySqlCommand(query, conn);
            command.Parameters.AddWithValue("@tenant_name", tenant_name);
            command.Parameters.AddWithValue("@location_name", location_name);
            command.Parameters.AddWithValue("@device_name", device_name);
            command.Parameters.AddWithValue("@start_date", applications_scheduled_tasks_history_table_dateRange.Start.Value);
            command.Parameters.AddWithValue("@end_date", applications_scheduled_tasks_history_table_dateRange.End.Value);

            Logging.Handler.Debug("/devices -> Applications_Scheduled_Tasks_History_Load", "MySQL_Query", query);

            using (DbDataReader reader = await command.ExecuteReaderAsync())
            {
                if (reader.HasRows)
                {
                    while (await reader.ReadAsync())
                    {
                        Logging.Handler.Debug("/devices -> Applications_Scheduled_Tasks_History_Load", "MySQL_Result", reader["json"].ToString());

                        JsonArray applications_scheduled_tasks_history_array = JsonNode.Parse(reader["json"].ToString()).AsArray();

                        foreach (var software in applications_scheduled_tasks_history_array)
                        {
                            Applications_Scheduled_Tasks_History_Entity softwareEntity = new Applications_Scheduled_Tasks_History_Entity
                                {
                                    name = software["name"].ToString(),
                                    date = reader["date"].ToString(),
                                    status = software["status"].ToString(),
                                    author = software["author"].ToString(),
                                    path = software["path"].ToString(),
                                    folder = software["folder"].ToString(),
                                    user_sid = software["user_sid"].ToString(),
                                    next_execution = software["next_execution"].ToString(),
                                    last_execution = software["last_execution"].ToString(),
                                };

                            result.Add(softwareEntity);
                        }
                    }
                }
            }

            return result;
        }
        catch (Exception ex)
        {
            Logging.Handler.Error("/devices -> Applications_Scheduled_Tasks_History_Load", "MySQL_Query", ex.Message);
            return new List<Applications_Scheduled_Tasks_History_Entity>(); // Return an empty list or handle the exception as needed
        }
        finally
        {
            conn.Close();
            StateHasChanged();
            loading_overlay = false;
        }
    }

    #endregion

    #region Applications Services Table

    public List<Applications_Services_Entity> applications_services_mysql_data;

    public class Applications_Services_Entity
    {
        public string display_name { get; set; } = String.Empty;
        public string name { get; set; } = String.Empty;
        public string status { get; set; } = String.Empty;
        public string start_type { get; set; } = String.Empty;
        public string login_as { get; set; } = String.Empty;
        public string path { get; set; } = String.Empty;
        public string description { get; set; } = String.Empty;
    }

    private string applications_services_table_view_port = "70vh";
    private string applications_services_table_sorted_column;
    private string applications_services_table_search_string = "";

    private bool Applications_Services_Table_Filter_Func(Applications_Services_Entity row)
    {
        if (string.IsNullOrEmpty(applications_services_table_search_string))
            return true;

        //Search logic for each column
        return row.display_name.Contains(applications_services_table_search_string, StringComparison.OrdinalIgnoreCase) ||
            row.name.Contains(applications_services_table_search_string, StringComparison.OrdinalIgnoreCase) ||
            row.status.Contains(applications_services_table_search_string, StringComparison.OrdinalIgnoreCase) ||
            row.start_type.Contains(applications_services_table_search_string, StringComparison.OrdinalIgnoreCase) ||
            row.login_as.Contains(applications_services_table_search_string, StringComparison.OrdinalIgnoreCase) ||
            row.path.Contains(applications_services_table_search_string, StringComparison.OrdinalIgnoreCase) ||
            row.description.Contains(applications_services_table_search_string, StringComparison.OrdinalIgnoreCase);
    }

    private string applications_services_selectedRowContent = ""; // Hier wird der Inhalt der ausgewählten Zeile gespeichert

    // Der Handler für den TableRowClick-Event
    private void Applications_Services_RowClickHandler(Applications_Services_Entity row)
    {
        applications_services_selectedRowContent = row.name;
    }

    private string Applications_Services_GetRowClass(Applications_Services_Entity row)
    {
        return row.name == applications_services_selectedRowContent ? "selected-row" : "";
    }

    private async Task Applications_Services_Load()
    {
        try
        {
            JsonArray applications_services_array = JsonNode.Parse(applications_services).AsArray();

            applications_services_mysql_data = new List<Applications_Services_Entity>();

            foreach (var software in applications_services_array)
            {
                Applications_Services_Entity softwareEntity = new Applications_Services_Entity
                    {
                        display_name = software["display_name"].ToString(),
                        name = software["name"].ToString(),
                        status = software["status"].ToString(),
                        start_type = software["start_type"].ToString(),
                        login_as = software["login_as"].ToString(),
                        path = software["path"].ToString(),
                        description = software["description"].ToString(),
                    };

                applications_services_mysql_data.Add(softwareEntity);
            }
        }
        catch (Exception ex)
        {
            Logging.Handler.Error("/devices -> Applications_Services_Load", "Result", ex.Message);
        }
    }

    #endregion

    #region Applications Services History Table

    private List<Applications_Services_History_Entity> applications_services_history_mysql_data;

    public class Applications_Services_History_Entity
    {
        public string date { get; set; } = String.Empty;
        public string display_name { get; set; } = String.Empty;
        public string name { get; set; } = String.Empty;
        public string status { get; set; } = String.Empty;
        public string start_type { get; set; } = String.Empty;
        public string login_as { get; set; } = String.Empty;
        public string path { get; set; } = String.Empty;
        public string description { get; set; } = String.Empty;
    }

    private TableGroupDefinition<Applications_Services_History_Entity> applications_services_history_groupDefinition = new TableGroupDefinition<Applications_Services_History_Entity>
        {
            GroupName = "Datum",
            Indentation = false,
            Expandable = true,
            IsInitiallyExpanded = false,
            Selector = (e) => e.date// Hier sollte die Eigenschaft sein, nach der gruppiert werden soll
        };

    private string applications_services_history_table_view_port = "70vh";
    private string applications_services_history_table_sorted_column;
    private string applications_services_history_table_search_string = "";
    private MudDateRangePicker applications_services_history_table_picker;
    private DateRange applications_services_history_table_dateRange = new DateRange(DateTime.Now.Date.AddDays(-7), DateTime.Now.Date.AddDays(1));

    private async Task Applications_Services_History_Table_Submit_Picker()
    {
        applications_services_history_table_picker.Close();

        applications_services_history_mysql_data = await Applications_Services_History_Load(notes_tenant_name, notes_location_name, notes_device_name);
    }

    private bool Applications_Services_History_Table_Filter_Func(Applications_Services_History_Entity row)
    {
        if (string.IsNullOrEmpty(applications_services_history_table_search_string))
            return true;

        //Search logic for each column
        return row.date.Contains(applications_services_history_table_search_string, StringComparison.OrdinalIgnoreCase) ||
        row.display_name.Contains(applications_services_history_table_search_string, StringComparison.OrdinalIgnoreCase) ||
        row.name.Contains(applications_services_history_table_search_string, StringComparison.OrdinalIgnoreCase) ||
        row.status.Contains(applications_services_history_table_search_string, StringComparison.OrdinalIgnoreCase) ||
        row.start_type.Contains(applications_services_history_table_search_string, StringComparison.OrdinalIgnoreCase) ||
        row.login_as.Contains(applications_services_history_table_search_string, StringComparison.OrdinalIgnoreCase) ||
        row.path.Contains(applications_services_history_table_search_string, StringComparison.OrdinalIgnoreCase) ||
        row.description.Contains(applications_services_history_table_search_string, StringComparison.OrdinalIgnoreCase);
    }

    private string applications_services_history_selectedRowContent = ""; // Hier wird der Inhalt der ausgewählten Zeile gespeichert

    // Der Handler für den TableRowClick-Event
    private void Applications_Services_History_RowClickHandler(Applications_Services_History_Entity row)
    {
        applications_services_history_selectedRowContent = row.name;
    }

    private string Applications_Services_History_GetRowClass(Applications_Services_History_Entity row)
    {
        return row.name == applications_services_history_selectedRowContent ? "selected-row" : "";
    }

    private async Task<List<Applications_Services_History_Entity>> Applications_Services_History_Load(string tenant_name, string location_name, string device_name)
    {
        loading_overlay = true;

        string query = "SELECT * FROM applications_services_history WHERE device_name = @device_name AND location_name = @location_name AND tenant_name = @tenant_name AND date >= @start_date AND date <= @end_date ORDER BY date DESC;";

        MySqlConnection conn = new MySqlConnection(Application_Settings.connectionString);

        try
        {
            List<Applications_Services_History_Entity> result = new List<Applications_Services_History_Entity>();

            await conn.OpenAsync();

            MySqlCommand command = new MySqlCommand(query, conn);
            command = new MySqlCommand(query, conn);
            command.Parameters.AddWithValue("@tenant_name", tenant_name);
            command.Parameters.AddWithValue("@location_name", location_name);
            command.Parameters.AddWithValue("@device_name", device_name);
            command.Parameters.AddWithValue("@start_date", applications_services_history_table_dateRange.Start.Value);
            command.Parameters.AddWithValue("@end_date", applications_services_history_table_dateRange.End.Value);

            Logging.Handler.Debug("/devices -> Applications_Services_History_Load", "MySQL_Query", query);

            using (DbDataReader reader = await command.ExecuteReaderAsync())
            {
                if (reader.HasRows)
                {
                    while (await reader.ReadAsync())
                    {
                        Logging.Handler.Debug("/devices -> Applications_Services_History_Load", "MySQL_Result", reader["json"].ToString());

                        JsonArray applications_services_history_array = JsonNode.Parse(reader["json"].ToString()).AsArray();

                        foreach (var software in applications_services_history_array)
                        {
                            Applications_Services_History_Entity softwareEntity = new Applications_Services_History_Entity
                                {
                                    date = reader["date"].ToString(),
                                    display_name = software["display_name"].ToString(),
                                    name = software["name"].ToString(),
                                    status = software["status"].ToString(),
                                    start_type = software["start_type"].ToString(),
                                    login_as = software["login_as"].ToString(),
                                    path = software["path"].ToString(),
                                    description = software["description"].ToString(),
                                };

                            result.Add(softwareEntity);
                        }
                    }
                }
            }

            return result;
        }
        catch (Exception ex)
        {
            Logging.Handler.Error("/devices -> Applications_Services_History_Load", "MySQL_Query", ex.Message);
            return new List<Applications_Services_History_Entity>(); // Return an empty list or handle the exception as needed
        }
        finally
        {
            conn.Close();
            loading_overlay = false;
        }
    }

    #endregion

    #region Applications Drivers Table

    public List<Applications_Drivers_Entity> applications_drivers_mysql_data;

    public class Applications_Drivers_Entity
    {
        public string display_name { get; set; } = String.Empty;
        public string name { get; set; } = String.Empty;
        public string description { get; set; } = String.Empty;
        public string status { get; set; } = String.Empty;
        public string type { get; set; } = String.Empty;
        public string start_type { get; set; } = String.Empty;
        public string path { get; set; } = String.Empty;
        public string version { get; set; } = String.Empty;
    }

    private string applications_drivers_table_view_port = "70vh";
    private string applications_drivers_table_sorted_column;
    private string applications_drivers_table_search_string = "";

    private bool Applications_Drivers_Table_Filter_Func(Applications_Drivers_Entity row)
    {
        if (string.IsNullOrEmpty(applications_drivers_table_search_string))
            return true;

        //Search logic for each column
        return row.display_name.Contains(applications_drivers_table_search_string, StringComparison.OrdinalIgnoreCase) ||
            row.name.Contains(applications_drivers_table_search_string, StringComparison.OrdinalIgnoreCase) ||
            row.description.Contains(applications_drivers_table_search_string, StringComparison.OrdinalIgnoreCase) ||
            row.status.Contains(applications_drivers_table_search_string, StringComparison.OrdinalIgnoreCase) ||
            row.type.Contains(applications_drivers_table_search_string, StringComparison.OrdinalIgnoreCase) ||
            row.start_type.Contains(applications_drivers_table_search_string, StringComparison.OrdinalIgnoreCase) ||
            row.path.Contains(applications_drivers_table_search_string, StringComparison.OrdinalIgnoreCase) ||
            row.version.Contains(applications_drivers_table_search_string, StringComparison.OrdinalIgnoreCase);
    }

    private string applications_drivers_selectedRowContent = ""; // Hier wird der Inhalt der ausgewählten Zeile gespeichert

    // Der Handler für den TableRowClick-Event
    private void Applications_Drivers_RowClickHandler(Applications_Drivers_Entity row)
    {
        applications_drivers_selectedRowContent = row.name;
    }

    private string Applications_Drivers_GetRowClass(Applications_Drivers_Entity row)
    {
        return row.name == applications_drivers_selectedRowContent ? "selected-row" : "";
    }

    private async Task Applications_Drivers_Load()
    {
        try
        {
            JsonArray applications_drivers_array = JsonNode.Parse(applications_drivers).AsArray();

            applications_drivers_mysql_data = new List<Applications_Drivers_Entity>();

            foreach (var software in applications_drivers_array)
            {
                Applications_Drivers_Entity softwareEntity = new Applications_Drivers_Entity
                    {
                        display_name = software["display_name"].ToString(),
                        name = software["name"].ToString(),
                        description = software["description"].ToString(),
                        status = software["status"].ToString(),
                        type = software["type"].ToString(),
                        start_type = software["start_type"].ToString(),
                        path = software["path"].ToString(),
                        version = software["version"].ToString(),
                    };

                applications_drivers_mysql_data.Add(softwareEntity);
            }
        }
        catch (Exception ex)
        {
            Logging.Handler.Error("/devices -> Applications_Drivers_Load", "Result", ex.Message);
        }
    }

    #endregion

    #region Applications Drivers History Table

    private List<Applications_Drivers_History_Entity> applications_drivers_history_mysql_data;

    public class Applications_Drivers_History_Entity
    {
        public string date { get; set; } = String.Empty;
        public string display_name { get; set; } = String.Empty;
        public string name { get; set; } = String.Empty;
        public string description { get; set; } = String.Empty;
        public string status { get; set; } = String.Empty;
        public string type { get; set; } = String.Empty;
        public string start_type { get; set; } = String.Empty;
        public string path { get; set; } = String.Empty;
        public string version { get; set; } = String.Empty;
    }

    private TableGroupDefinition<Applications_Drivers_History_Entity> applications_drivers_history_groupDefinition = new TableGroupDefinition<Applications_Drivers_History_Entity>
    {
        GroupName = "Datum",
        Indentation = false,
        Expandable = true,
        IsInitiallyExpanded = false,
        Selector = (e) => e.date// Hier sollte die Eigenschaft sein, nach der gruppiert werden soll
    };

    private string applications_drivers_history_table_view_port = "70vh";
    private string applications_drivers_history_table_sorted_column;
    private string applications_drivers_history_table_search_string = "";
    private MudDateRangePicker applications_drivers_history_table_picker;
    private DateRange applications_drivers_history_table_dateRange = new DateRange(DateTime.Now.Date.AddDays(-7), DateTime.Now.Date.AddDays(1));

    private async Task Applications_Drivers_History_Table_Submit_Picker()
    {
        applications_drivers_history_table_picker.Close();

        applications_drivers_history_mysql_data = await Applications_Drivers_History_Load(notes_tenant_name, notes_location_name, notes_device_name);
    }

    private bool Applications_Drivers_History_Table_Filter_Func(Applications_Drivers_History_Entity row)
    {
        if (string.IsNullOrEmpty(applications_drivers_history_table_search_string))
            return true;

        //Search logic for each column
        return row.date.Contains(applications_drivers_history_table_search_string, StringComparison.OrdinalIgnoreCase) ||
            row.display_name.Contains(applications_drivers_history_table_search_string, StringComparison.OrdinalIgnoreCase) ||
            row.name.Contains(applications_drivers_history_table_search_string, StringComparison.OrdinalIgnoreCase) ||
            row.description.Contains(applications_drivers_history_table_search_string, StringComparison.OrdinalIgnoreCase) ||
            row.status.Contains(applications_drivers_history_table_search_string, StringComparison.OrdinalIgnoreCase) ||
            row.type.Contains(applications_drivers_history_table_search_string, StringComparison.OrdinalIgnoreCase) ||
            row.start_type.Contains(applications_drivers_history_table_search_string, StringComparison.OrdinalIgnoreCase) ||
            row.path.Contains(applications_drivers_history_table_search_string, StringComparison.OrdinalIgnoreCase) ||
            row.version.Contains(applications_drivers_history_table_search_string, StringComparison.OrdinalIgnoreCase);
    }

    private string applications_drivers_history_selectedRowContent = ""; // Hier wird der Inhalt der ausgewählten Zeile gespeichert

    // Der Handler für den TableRowClick-Event
    private void Applications_Drivers_History_RowClickHandler(Applications_Drivers_History_Entity row)
    {
        applications_drivers_history_selectedRowContent = row.name;
    }

    private string Applications_Drivers_History_GetRowClass(Applications_Drivers_History_Entity row)
    {
        return row.name == applications_drivers_history_selectedRowContent ? "selected-row" : "";
    }

    private async Task<List<Applications_Drivers_History_Entity>> Applications_Drivers_History_Load(string tenant_name, string location_name, string device_name)
    {
        loading_overlay = true;

        string query = "SELECT * FROM applications_drivers_history WHERE device_name = @device_name AND location_name = @location_name AND tenant_name = @tenant_name AND date >= @start_date AND date <= @end_date ORDER BY date DESC;";

        MySqlConnection conn = new MySqlConnection(Application_Settings.connectionString);

        try
        {
            List<Applications_Drivers_History_Entity> result = new List<Applications_Drivers_History_Entity>();

            await conn.OpenAsync();

            MySqlCommand command = new MySqlCommand(query, conn);
            command = new MySqlCommand(query, conn);
            command.Parameters.AddWithValue("@tenant_name", tenant_name);
            command.Parameters.AddWithValue("@location_name", location_name);
            command.Parameters.AddWithValue("@device_name", device_name);
            command.Parameters.AddWithValue("@start_date", applications_drivers_history_table_dateRange.Start.Value);
            command.Parameters.AddWithValue("@end_date", applications_drivers_history_table_dateRange.End.Value);

            Logging.Handler.Debug("/devices -> Applications_Drivers_History_Load", "MySQL_Query", query);

            using (DbDataReader reader = await command.ExecuteReaderAsync())
            {
                if (reader.HasRows)
                {
                    while (await reader.ReadAsync())
                    {
                        Logging.Handler.Debug("/devices -> Applications_Drivers_History_Load", "MySQL_Result", reader["json"].ToString());

                        JsonArray applications_drivers_history_array = JsonNode.Parse(reader["json"].ToString()).AsArray();

                        foreach (var software in applications_drivers_history_array)
                        {
                            Applications_Drivers_History_Entity softwareEntity = new Applications_Drivers_History_Entity
                                {
                                    date = reader["date"].ToString(),
                                    display_name = software["display_name"].ToString(),
                                    name = software["name"].ToString(),
                                    description = software["description"].ToString(),
                                    status = software["status"].ToString(),
                                    type = software["type"].ToString(),
                                    start_type = software["start_type"].ToString(),
                                    path = software["path"].ToString(),
                                    version = software["version"].ToString(),
                                };

                            result.Add(softwareEntity);
                        }
                    }
                }
            }

            return result;
        }
        catch (Exception ex)
        {
            Logging.Handler.Error("/devices -> Applications_Drivers_History_Load", "MySQL_Query", ex.Message);
            return new List<Applications_Drivers_History_Entity>(); // Return an empty list or handle the exception as needed
        }
        finally
        {
            conn.Close();
            StateHasChanged();
            loading_overlay = false;
        }
    }

    #endregion

    #region Antivirus Products

    private string antivirus_products_string = String.Empty;

    public List<Antivirus_Products_Entity> antivirus_products_mysql_data; //Datasource for table

    public class Antivirus_Products_Entity
    {
        public string display_name { get; set; } = String.Empty;
        public string instance_guid { get; set; } = String.Empty;
        public string path_to_signed_product_exe { get; set; } = String.Empty;
        public string path_to_signed_reporting_exe { get; set; } = String.Empty;
        public string product_state { get; set; } = String.Empty;
        public string timestamp { get; set; } = String.Empty;
    }

    private string antivirus_products_table_sorted_column;
    private string antivirus_products_table_search_string = String.Empty;

    private bool Antivirus_Products_Table_Filter_Func(Antivirus_Products_Entity row)
    {
        if (string.IsNullOrEmpty(antivirus_products_table_search_string))
            return true;

        //Search logic for each column
        return row.display_name.Contains(antivirus_products_table_search_string, StringComparison.OrdinalIgnoreCase) ||
            row.instance_guid.Contains(antivirus_products_table_search_string, StringComparison.OrdinalIgnoreCase) ||
            row.path_to_signed_product_exe.Contains(antivirus_products_table_search_string, StringComparison.OrdinalIgnoreCase) ||
            row.path_to_signed_reporting_exe.Contains(antivirus_products_table_search_string, StringComparison.OrdinalIgnoreCase) ||
            row.product_state.Contains(antivirus_products_table_search_string, StringComparison.OrdinalIgnoreCase) ||
            row.timestamp.Contains(antivirus_products_table_search_string, StringComparison.OrdinalIgnoreCase);
    }

    private string antivirus_products_selectedRowContent = ""; // Saving content of selected row

    // Executes on row click
    private void Antivirus_Products_RowClickHandler(Antivirus_Products_Entity row)
    {
        antivirus_products_selectedRowContent = row.instance_guid;
    }

    private string Antivirus_Products_GetRowClass(Antivirus_Products_Entity row)
    {
        return row.instance_guid == antivirus_products_selectedRowContent ? "selected-row" : "";
    }

    private async Task Antivirus_Products_Load()
    {
        try
        {
            JsonArray antivirus_products_array = JsonNode.Parse(antivirus_products_string).AsArray();

            antivirus_products_mysql_data = new List<Antivirus_Products_Entity>();

            foreach (var _object in antivirus_products_array)
            {
                Antivirus_Products_Entity entity = new Antivirus_Products_Entity
                {
                    display_name = _object["display_name"].ToString(),
                    instance_guid = _object["instance_guid"].ToString(),
                    path_to_signed_product_exe = _object["path_to_signed_product_exe"].ToString(),
                    path_to_signed_reporting_exe = _object["path_to_signed_reporting_exe"].ToString(),
                    product_state = _object["product_state"].ToString(),
                    timestamp = _object["timestamp"].ToString(), 
                };

                antivirus_products_mysql_data.Add(entity);
            }
        }
        catch (Exception ex)
        {
            Logging.Handler.Error("/devices -> Antivirus_Products_Load", "Result", ex.Message);
        }
    }

    private async Task Export_Antivirus_Products_Table_Dialog()
    {
        await Show_Export_Table_Dialog("antivirus_products");
    }

    #endregion

    #region Antivirus Products History

    private List<Antivirus_Products_History_Entity> antivirus_products_history_mysql_data;

    public class Antivirus_Products_History_Entity
    {
        public string date { get; set; } = String.Empty;
        public string display_name { get; set; } = String.Empty;
        public string instance_guid { get; set; } = String.Empty;
        public string path_to_signed_product_exe { get; set; } = String.Empty;
        public string path_to_signed_reporting_exe { get; set; } = String.Empty;
        public string product_state { get; set; } = String.Empty;
        public string timestamp { get; set; } = String.Empty;
    }

    private TableGroupDefinition<Antivirus_Products_History_Entity> antivirus_products_history_groupDefinition = new TableGroupDefinition<Antivirus_Products_History_Entity>
        {
            GroupName = "Datum",
            Indentation = false,
            Expandable = true,
            IsInitiallyExpanded = false,
            Selector = (e) => e.date// Hier sollte die Eigenschaft sein, nach der gruppiert werden soll
        };

    private string antivirus_products_history_table_view_port = "70vh";
    private string antivirus_products_history_table_sorted_column;
    private string antivirus_products_history_table_search_string = "";
    private MudDateRangePicker antivirus_products_history_table_picker;
    private DateRange antivirus_products_history_table_dateRange = new DateRange(DateTime.Now.Date.AddDays(-7), DateTime.Now.Date.AddDays(1));

    private async Task Antivirus_Products_History_Table_Submit_Picker()
    {
        antivirus_products_history_table_picker.Close();

        antivirus_products_history_mysql_data = await Antivirus_Products_History_Load(notes_tenant_name, notes_location_name, notes_device_name);
    }

    private bool Antivirus_Products_History_Table_Filter_Func(Antivirus_Products_History_Entity row)
    {
        if (string.IsNullOrEmpty(antivirus_products_history_table_search_string))
            return true;

        //Search logic for each column
        return row.date.Contains(antivirus_products_history_table_search_string, StringComparison.OrdinalIgnoreCase) ||
            row.display_name.Contains(antivirus_products_history_table_search_string, StringComparison.OrdinalIgnoreCase) ||
            row.instance_guid.Contains(antivirus_products_history_table_search_string, StringComparison.OrdinalIgnoreCase) ||
            row.path_to_signed_product_exe.Contains(antivirus_products_history_table_search_string, StringComparison.OrdinalIgnoreCase) ||
            row.path_to_signed_reporting_exe.Contains(antivirus_products_history_table_search_string, StringComparison.OrdinalIgnoreCase) ||
            row.product_state.Contains(antivirus_products_history_table_search_string, StringComparison.OrdinalIgnoreCase) ||
            row.timestamp.Contains(antivirus_products_history_table_search_string, StringComparison.OrdinalIgnoreCase);
    }

    private string antivirus_products_history_selectedRowContent = ""; // Hier wird der Inhalt der ausgewählten Zeile gespeichert

    // Der Handler für den TableRowClick-Event
    private void Antivirus_Products_History_RowClickHandler(Antivirus_Products_History_Entity row)
    {
        antivirus_products_history_selectedRowContent = row.instance_guid;
    }

    private string Antivirus_Products_History_GetRowClass(Antivirus_Products_History_Entity row)
    {
        return row.instance_guid == antivirus_products_history_selectedRowContent ? "selected-row" : "";
    }

    private async Task<List<Antivirus_Products_History_Entity>> Antivirus_Products_History_Load(string tenant_name, string location_name, string device_name)
    {
        loading_overlay = true;

        string query = "SELECT * FROM device_information_antivirus_products_history WHERE device_name = @device_name AND location_name = @location_name AND tenant_name = @tenant_name AND date >= @start_date AND date <= @end_date ORDER BY date DESC;";

        MySqlConnection conn = new MySqlConnection(Application_Settings.connectionString);

        try
        {
            List<Antivirus_Products_History_Entity> result = new List<Antivirus_Products_History_Entity>();

            await conn.OpenAsync();

            MySqlCommand command = new MySqlCommand(query, conn);
            command = new MySqlCommand(query, conn);
            command.Parameters.AddWithValue("@tenant_name", tenant_name);
            command.Parameters.AddWithValue("@location_name", location_name);
            command.Parameters.AddWithValue("@device_name", device_name);
            command.Parameters.AddWithValue("@start_date", antivirus_products_history_table_dateRange.Start.Value);
            command.Parameters.AddWithValue("@end_date", antivirus_products_history_table_dateRange.End.Value);

            Logging.Handler.Debug("/devices -> Antivirus_Products_History_Load", "MySQL_Query", query);

            using (DbDataReader reader = await command.ExecuteReaderAsync())
            {
                if (reader.HasRows)
                {
                    while (await reader.ReadAsync())
                    {
                        Logging.Handler.Debug("/devices -> Antivirus_Products_History_Load", "MySQL_Result", reader["json"].ToString());

                        JsonArray antivirus_products_history_array = JsonNode.Parse(reader["json"].ToString()).AsArray();

                        foreach (var software in antivirus_products_history_array)
                        {
                            Antivirus_Products_History_Entity softwareEntity = new Antivirus_Products_History_Entity
                                {
                                    date = reader["date"].ToString(),
                                    display_name = software["display_name"].ToString(),
                                    instance_guid = software["instance_guid"].ToString(),
                                    path_to_signed_product_exe = software["path_to_signed_product_exe"].ToString(),
                                    path_to_signed_reporting_exe = software["path_to_signed_reporting_exe"].ToString(),
                                    product_state = software["product_state"].ToString(),
                                    timestamp = software["timestamp"].ToString(),
                                };

                            result.Add(softwareEntity);
                        }
                    }
                }
            }

            return result;
        }
        catch (Exception ex)
        {
            Logging.Handler.Error("/devices -> Antivirus_Products_History_Load", "MySQL_Query", ex.Message);
            return new List<Antivirus_Products_History_Entity>(); // Return an empty list or handle the exception as needed
        }
        finally
        {
            conn.Close();
            StateHasChanged();
            loading_overlay = false;
        }
    }

    private async Task Export_Antivirus_Products_History_Table_Dialog()
    {
        await Show_Export_Table_Dialog("antivirus_products_history");
    }

    #endregion

    private string group_name = null;

    private async Task Show_Move_Devices_Dialog()
    {
        var options = new DialogOptions
            {
                DisableBackdropClick = false,
                MaxWidth = MaxWidth.Small,
                ClassBackground = "dialog-blurring",

            };

        var result = await this.DialogService.Show<Move_Devices_Dialog>(string.Empty, new DialogParameters(), options).Result;

        if (result.Canceled)
            return;

        Logging.Handler.Debug("/devices -> Show_Move_Devices_Dialog", "Result", result.Data.ToString() ?? String.Empty);

        if (String.IsNullOrEmpty(result.Data.ToString()) == false && result.Data.ToString() != "error")
        {
            await Get_Clients_OverviewAsync();
        }
    }

    public class MySQL_Entity
    {
        public string device_name { get; set; } = "Empty";
        public string tenant_name { get; set; } = "Empty";
        public string location_name { get; set; } = "Empty";
        public string group_name { get; set; } = "Empty";
        public string agent_version { get; set; } = "Empty";
        public string last_access { get; set; } = "Empty";
        public string policy_name { get; set; } = "Empty";
        public string ip_address { get; set; } = "Empty";
        public string operating_system { get; set; } = "Empty";
        public string domain { get; set; } = "Empty";
        public string antivirus_solution { get; set; } = "Empty";
        public string firewall_status { get; set; } = "Empty";
    }

    public List<MySQL_Entity> mysql_data;

    private async Task Get_Clients_OverviewAsync()
    {
        string tenant_name = await localStorage.GetItemAsync<string>("tenant_name");
        string group_name = await localStorage.GetItemAsync<string>("group_name");
        string location_name = await localStorage.GetItemAsync<string>("location_name");
        string query = null;

        mysql_data = new List<MySQL_Entity>();

        MySqlConnection conn = new MySqlConnection(Application_Settings.connectionString);

        try
        {
            await conn.OpenAsync();

            MySqlCommand command;

            if (tenant_name == "all")
            {
                query = "SELECT * FROM devices WHERE authorized = '1';";
                command = new MySqlCommand(query, conn);
            }
            else if (location_name == "all")
            {
                query = "SELECT * FROM devices WHERE authorized = '1' AND tenant_name = @tenant_name;";
                command = new MySqlCommand(query, conn);
                command.Parameters.AddWithValue("@tenant_name", tenant_name);
            }
            else
            {
                query = "SELECT * FROM devices WHERE authorized = '1' AND group_name = @group_name AND location_name = @location_name AND tenant_name = @tenant_name;";
                command = new MySqlCommand(query, conn);
                command.Parameters.AddWithValue("@group_name", group_name);
                command.Parameters.AddWithValue("@location_name", location_name);
                command.Parameters.AddWithValue("@tenant_name", tenant_name);
            }

            Logging.Handler.Debug("/devices -> Get_Clients_OverviewAsync", "MySQL_Query", query);

            using (DbDataReader reader = await command.ExecuteReaderAsync())
            {
                if (reader.HasRows)
                {
                    while (await reader.ReadAsync())
                    {
                        MySQL_Entity entity = new MySQL_Entity
                            {
                                device_name = reader["device_name"].ToString() ?? "",
                                tenant_name = reader["tenant_name"].ToString() ?? "",
                                location_name = reader["location_name"].ToString() ?? "",
                                group_name = reader["group_name"].ToString() ?? "",
                                agent_version = reader["agent_version"].ToString() ?? "",
                                last_access = reader["last_access"].ToString() ?? "",
                                policy_name = reader["policy_name"].ToString() ?? "",
                                ip_address = reader["ip_address_internal"].ToString() + " & " + reader["ip_address_external"].ToString(),
                                operating_system = reader["operating_system"].ToString() ?? "",
                                domain = reader["domain"].ToString() ?? "",
                                antivirus_solution = reader["antivirus_solution"].ToString() ?? "",
                                firewall_status = reader["firewall_status"].ToString() ?? "",
                            };

                        mysql_data.Add(entity);
                    }
                }
            }
        }
        catch (Exception ex)
        {
            Logging.Handler.Error("/devices -> Get_Clients_OverviewAsync", "MySQL_Query", ex.Message);
        }
        finally
        {
            conn.Close();
        }
    }

    private async Task Get_Device_Information_Details(string tenant_name, string location_name, string device_name)
    {
        string query = String.Empty;

        MySqlConnection conn = new MySqlConnection(Application_Settings.connectionString);
        MySqlCommand command = new MySqlCommand(query, conn);

        try
        {
            await conn.OpenAsync();

            query = "SELECT * FROM devices WHERE authorized = '1' AND device_name = @device_name AND location_name = @location_name AND tenant_name = @tenant_name;";
            command = new MySqlCommand(query, conn);
            command.Parameters.AddWithValue("@tenant_name", tenant_name);
            command.Parameters.AddWithValue("@location_name", location_name);
            command.Parameters.AddWithValue("@device_name", device_name);

            Logging.Handler.Debug("/devices -> Get_Clients_OverviewAsync", "MySQL_Query", query);

            using (DbDataReader reader = await command.ExecuteReaderAsync())
            {
                if (reader.HasRows)
                {
                    while (await reader.ReadAsync())
                    {
                        agent_version = reader["agent_version"].ToString() ?? String.Empty;
                        last_access = reader["last_access"].ToString() ?? String.Empty;
                        policy_name = reader["policy_name"].ToString() ?? String.Empty;
                        operating_system = reader["operating_system"].ToString() ?? String.Empty;
                        domain = reader["domain"].ToString() ?? String.Empty;
                        architecture = reader["architecture"].ToString() ?? String.Empty;
                        antivirus_solution = reader["antivirus_solution"].ToString() ?? String.Empty;
                        firewall_status = reader["firewall_status"].ToString() ?? String.Empty;
                        last_boot = reader["last_boot"].ToString() ?? String.Empty;
                        timezone = reader["timezone"].ToString() ?? String.Empty;
                        cpu = reader["cpu"].ToString() ?? String.Empty;
                        mainboard = reader["mainboard"].ToString() ?? String.Empty;
                        gpu = reader["gpu"].ToString() ?? String.Empty;
                        ram = reader["ram"].ToString() ?? String.Empty;
                        tpm = reader["tpm"].ToString() ?? String.Empty;
                        environment_variables = reader["environment_variables"].ToString() ?? String.Empty;
                        ip_address_internal = reader["ip_address_internal"].ToString() ?? String.Empty;
                        ip_address_external = reader["ip_address_external"].ToString() ?? String.Empty;
                        network_adapters = reader["network_adapters"].ToString() ?? String.Empty;
                        disks = reader["disks"].ToString() ?? String.Empty;
                        cpu_information_string = reader["cpu_information"].ToString() ?? String.Empty;
                        ram_information_string = reader["ram_information"].ToString() ?? String.Empty;
                        applications_installed = reader["applications_installed"].ToString() ?? String.Empty;
                        applications_logon = reader["applications_logon"].ToString() ?? String.Empty;
                        applications_scheduled_tasks = reader["applications_scheduled_tasks"].ToString() ?? String.Empty;
                        applications_services = reader["applications_services"].ToString() ?? String.Empty;
                        applications_drivers = reader["applications_drivers"].ToString() ?? String.Empty;                        
                        task_manager_string = reader["processes"].ToString() ?? String.Empty;
                        notes_string = await Base64.Handler.Decode(reader["notes"].ToString()) ?? String.Empty;
                        notes_old_string = await Base64.Handler.Decode(reader["notes"].ToString()) ?? String.Empty;
                        antivirus_products_string = reader["antivirus_products"].ToString() ?? String.Empty;
                        antivirus_information_json = reader["antivirus_information"].ToString() ?? String.Empty;
                    }
                }
            }
        }
        catch (Exception ex)
        {
            Logging.Handler.Error("/devices -> Get_Device_Information_Details", "MySQL_Query", ex.Message);
        }
        finally
        {
            conn.Close();
        }
    }


    #region Device Information General History

    private List<Device_Information_General_History_Entity> device_information_general_history_mysql_data;

    public class Device_Information_General_History_Entity
    {
        public string date { get; set; } = String.Empty;
        public string agent_version { get; set; } = String.Empty;
        public string policy_name { get; set; } = String.Empty;
        public string operating_system { get; set; } = String.Empty;
        public string domain { get; set; } = String.Empty;
        public string architecture { get; set; } = String.Empty;
        public string antivirus_solution { get; set; } = String.Empty;
        public string firewall_status { get; set; } = String.Empty;
        public string last_boot { get; set; } = String.Empty;
        public string timezone { get; set; } = String.Empty;
        public string cpu { get; set; } = String.Empty;
        public string mainboard { get; set; } = String.Empty;
        public string gpu { get; set; } = String.Empty;
        public string ram { get; set; } = String.Empty;
        public string tpm { get; set; } = String.Empty;
        public string environment_variables { get; set; } = String.Empty;
        public string ip_address_internal { get; set; } = String.Empty;
        public string ip_address_external { get; set; } = String.Empty;
        public string network_adapters { get; set; } = String.Empty;
    }

    private TableGroupDefinition<Device_Information_General_History_Entity> device_information_general_history_groupDefinition = new TableGroupDefinition<Device_Information_General_History_Entity>
    {
        GroupName = "Datum",
        Indentation = false,
        Expandable = true,
        IsInitiallyExpanded = false,
        Selector = (e) => e.date// Hier sollte die Eigenschaft sein, nach der gruppiert werden soll
    };

    private string device_information_general_history_table_view_port = "70vh";
    private string device_information_general_history_table_sorted_column;
    private string device_information_general_history_table_search_string = "";
    private string device_information_general_history_table_rows = "50";
    private MudDateRangePicker device_information_general_history_table_picker;
    private DateRange device_information_general_history_table_dateRange = new DateRange(DateTime.Now.Date.AddDays(-7), DateTime.Now.Date.AddDays(1));

    private async Task Device_Information_General_History_Table_Submit_Picker()
    {
        device_information_general_history_table_picker.Close();

        device_information_general_history_mysql_data = await Device_Information_General_History_Load(notes_tenant_name, notes_location_name, notes_device_name);
    }

    private bool Device_Information_General_History_Table_Filter_Func(Device_Information_General_History_Entity row)
    {
        if (string.IsNullOrEmpty(device_information_general_history_table_search_string))
            return true;

        //Search logic for each column
        return row.date.Contains(device_information_general_history_table_search_string, StringComparison.OrdinalIgnoreCase) ||
            row.agent_version.Contains(device_information_general_history_table_search_string, StringComparison.OrdinalIgnoreCase) ||
            row.policy_name.Contains(device_information_general_history_table_search_string, StringComparison.OrdinalIgnoreCase) ||
            row.operating_system.Contains(device_information_general_history_table_search_string, StringComparison.OrdinalIgnoreCase) ||
            row.domain.Contains(device_information_general_history_table_search_string, StringComparison.OrdinalIgnoreCase) ||
            row.architecture.Contains(device_information_general_history_table_search_string, StringComparison.OrdinalIgnoreCase) ||
            row.antivirus_solution.Contains(device_information_general_history_table_search_string, StringComparison.OrdinalIgnoreCase) ||
            row.firewall_status.Contains(device_information_general_history_table_search_string, StringComparison.OrdinalIgnoreCase) ||
            row.last_boot.Contains(device_information_general_history_table_search_string, StringComparison.OrdinalIgnoreCase) ||
            row.timezone.Contains(device_information_general_history_table_search_string, StringComparison.OrdinalIgnoreCase) ||
            row.cpu.Contains(device_information_general_history_table_search_string, StringComparison.OrdinalIgnoreCase) ||
            row.mainboard.Contains(device_information_general_history_table_search_string, StringComparison.OrdinalIgnoreCase) ||
            row.gpu.Contains(device_information_general_history_table_search_string, StringComparison.OrdinalIgnoreCase) ||
            row.ram.Contains(device_information_general_history_table_search_string, StringComparison.OrdinalIgnoreCase) ||
            row.tpm.Contains(device_information_general_history_table_search_string, StringComparison.OrdinalIgnoreCase) ||
            row.environment_variables.Contains(device_information_general_history_table_search_string, StringComparison.OrdinalIgnoreCase) ||
            row.ip_address_internal.Contains(device_information_general_history_table_search_string, StringComparison.OrdinalIgnoreCase) ||
            row.ip_address_external.Contains(device_information_general_history_table_search_string, StringComparison.OrdinalIgnoreCase) ||
            row.network_adapters.Contains(device_information_general_history_table_search_string, StringComparison.OrdinalIgnoreCase);
    }

    private string device_information_general_history_selectedRowContent = ""; // Hier wird der Inhalt der ausgewählten Zeile gespeichert

    // Der Handler für den TableRowClick-Event
    private void Device_Information_General_History_RowClickHandler(Device_Information_General_History_Entity row)
    {
        device_information_general_history_selectedRowContent = row.date;
    }

    private string Device_Information_General_History_GetRowClass(Device_Information_General_History_Entity row)
    {
        return row.date == device_information_general_history_selectedRowContent ? "selected-row" : "";
    }

    private async Task<List<Device_Information_General_History_Entity>> Device_Information_General_History_Load(string tenant_name, string location_name, string device_name)
    {
        loading_overlay = true;

        string query = "SELECT * FROM device_information_general_history WHERE device_name = @device_name AND location_name = @location_name AND tenant_name = @tenant_name AND date >= @start_date AND date <= @end_date ORDER BY date DESC;";

        MySqlConnection conn = new MySqlConnection(Application_Settings.connectionString);

        try
        {
            List<Device_Information_General_History_Entity> result = new List<Device_Information_General_History_Entity>();

            await conn.OpenAsync();

            MySqlCommand command = new MySqlCommand(query, conn);
            command = new MySqlCommand(query, conn);
            command.Parameters.AddWithValue("@tenant_name", tenant_name);
            command.Parameters.AddWithValue("@location_name", location_name);
            command.Parameters.AddWithValue("@device_name", device_name);
            command.Parameters.AddWithValue("@start_date", device_information_general_history_table_dateRange.Start.Value);
            command.Parameters.AddWithValue("@end_date", device_information_general_history_table_dateRange.End.Value);


            Logging.Handler.Debug("/devices -> Device_Information_General_History_Load", "MySQL_Query", query);

            using (DbDataReader reader = await command.ExecuteReaderAsync())
            {
                if (reader.HasRows)
                {
                    while (await reader.ReadAsync())
                    {
                        Logging.Handler.Debug("/devices -> Device_Information_General_History_Load", "MySQL_Result", reader["json"].ToString());

                        JsonObject device_information_general_history_object = JsonNode.Parse(reader["json"].ToString()).AsObject();

                        Device_Information_General_History_Entity softwareEntity = new Device_Information_General_History_Entity
                        {
                            date = reader["date"].ToString(),
                            policy_name = reader["policy_name"].ToString(),
                            ip_address_internal = reader["ip_address_internal"].ToString(),
                            ip_address_external = reader["ip_address_external"].ToString(),
                            network_adapters = reader["network_adapters"].ToString(),
                            agent_version = device_information_general_history_object["agent_version"].ToString(),
                            operating_system = device_information_general_history_object["operating_system"].ToString(),
                            domain = device_information_general_history_object["domain"].ToString(),
                            architecture = device_information_general_history_object["architecture"].ToString(),
                            antivirus_solution = device_information_general_history_object["antivirus_solution"].ToString(),
                            firewall_status = device_information_general_history_object["firewall_status"].ToString(),
                            last_boot = device_information_general_history_object["last_boot"].ToString(),
                            timezone = device_information_general_history_object["timezone"].ToString(),
                            cpu = device_information_general_history_object["cpu"].ToString(),
                            mainboard = device_information_general_history_object["mainboard"].ToString(),
                            gpu = device_information_general_history_object["gpu"].ToString(),
                            ram = device_information_general_history_object["ram"].ToString(),
                            tpm = device_information_general_history_object["tpm"].ToString(),
                            environment_variables = device_information_general_history_object["environment_variables"].ToString(),
                        };

                        result.Add(softwareEntity);
                    }
                }
            }

            return result;
        }
        catch (Exception ex)
        {
            Logging.Handler.Error("/devices -> Device_Information_General_History_Load", "MySQL_Query", ex.Message);
            return new List<Device_Information_General_History_Entity>(); // Return an empty list or handle the exception as needed
        }
        finally
        {
            conn.Close();
            StateHasChanged();
            loading_overlay = false;
        }
    }

    #endregion

    #region Device Information Disks History

    private List<Device_Information_Disks_History_Entity> device_information_disks_history_mysql_data;

    public class Device_Information_Disks_History_Entity
    {
        public string date { get; set; } = String.Empty;
        public string letter { get; set; } = String.Empty;
        public string label { get; set; } = String.Empty;
        public string model { get; set; } = String.Empty;
        public string firmware_revision { get; set; } = String.Empty;
        public string serial_number { get; set; } = String.Empty;
        public string interface_type { get; set; } = String.Empty;
        public string drive_type { get; set; } = String.Empty;
        public string drive_format { get; set; } = String.Empty;
        public string drive_ready { get; set; } = String.Empty;
        public string capacity { get; set; } = String.Empty;
        public string usage { get; set; } = String.Empty;
        public string status { get; set; } = String.Empty;
    }

    private TableGroupDefinition<Device_Information_Disks_History_Entity> device_information_disks_history_groupDefinition = new TableGroupDefinition<Device_Information_Disks_History_Entity>
        {
            GroupName = "Datum",
            Indentation = false,
            Expandable = true,
            IsInitiallyExpanded = false,
            Selector = (e) => e.date// Hier sollte die Eigenschaft sein, nach der gruppiert werden soll
        };

    private string device_information_disks_history_table_view_port = "70vh";
    private string device_information_disks_history_table_sorted_column;
    private string device_information_disks_history_table_search_string = "";
    private MudDateRangePicker device_information_disks_history_table_picker;
    private DateRange device_information_disks_history_table_dateRange = new DateRange(DateTime.Now.Date.AddDays(-7), DateTime.Now.Date.AddDays(1));

    private async Task Device_Information_Disks_History_Table_Submit_Picker()
    {
        device_information_disks_history_table_picker.Close();

        device_information_disks_history_mysql_data = await Device_Information_Disks_History_Load(notes_tenant_name, notes_location_name, notes_device_name);
    }

    private bool Device_Information_Disks_History_Table_Filter_Func(Device_Information_Disks_History_Entity row)
    {
        if (string.IsNullOrEmpty(device_information_disks_history_table_search_string))
            return true;

        //Search logic for each column
        return row.date.Contains(device_information_disks_history_table_search_string, StringComparison.OrdinalIgnoreCase) ||
            row.letter.Contains(device_information_disks_history_table_search_string, StringComparison.OrdinalIgnoreCase) ||
            row.label.Contains(device_information_disks_history_table_search_string, StringComparison.OrdinalIgnoreCase) ||
            row.model.Contains(device_information_disks_history_table_search_string, StringComparison.OrdinalIgnoreCase) ||
            row.firmware_revision.Contains(device_information_disks_history_table_search_string, StringComparison.OrdinalIgnoreCase) ||
            row.serial_number.Contains(device_information_disks_history_table_search_string, StringComparison.OrdinalIgnoreCase) ||
            row.interface_type.Contains(device_information_disks_history_table_search_string, StringComparison.OrdinalIgnoreCase) ||
            row.drive_type.Contains(device_information_disks_history_table_search_string, StringComparison.OrdinalIgnoreCase) ||
            row.drive_format.Contains(device_information_disks_history_table_search_string, StringComparison.OrdinalIgnoreCase) ||
            row.drive_ready.Contains(device_information_disks_history_table_search_string, StringComparison.OrdinalIgnoreCase) ||
            row.capacity.Contains(device_information_disks_history_table_search_string, StringComparison.OrdinalIgnoreCase) ||
            row.usage.Contains(device_information_disks_history_table_search_string, StringComparison.OrdinalIgnoreCase) ||
            row.status.Contains(device_information_disks_history_table_search_string, StringComparison.OrdinalIgnoreCase);
    }

    private string device_information_disks_history_selectedRowContent = ""; // Hier wird der Inhalt der ausgewählten Zeile gespeichert

    // Der Handler für den TableRowClick-Event
    private void Device_Information_Disks_History_RowClickHandler(Device_Information_Disks_History_Entity row)
    {
        device_information_disks_history_selectedRowContent = row.letter;
    }

    private string Device_Information_Disks_History_GetRowClass(Device_Information_Disks_History_Entity row)
    {
        return row.letter == device_information_disks_history_selectedRowContent ? "selected-row" : "";
    }

    private async Task<List<Device_Information_Disks_History_Entity>> Device_Information_Disks_History_Load(string tenant_name, string location_name, string device_name)
    {
        loading_overlay = true;

        string query = "SELECT * FROM device_information_disks_history WHERE device_name = @device_name AND location_name = @location_name AND tenant_name = @tenant_name AND date >= @start_date AND date <= @end_date ORDER BY date DESC;";

        MySqlConnection conn = new MySqlConnection(Application_Settings.connectionString);

        try
        {
            List<Device_Information_Disks_History_Entity> result = new List<Device_Information_Disks_History_Entity>();

            await conn.OpenAsync();

            MySqlCommand command = new MySqlCommand(query, conn);
            command = new MySqlCommand(query, conn);
            command.Parameters.AddWithValue("@tenant_name", tenant_name);
            command.Parameters.AddWithValue("@location_name", location_name);
            command.Parameters.AddWithValue("@device_name", device_name);
            command.Parameters.AddWithValue("@start_date", device_information_disks_history_table_dateRange.Start.Value);
            command.Parameters.AddWithValue("@end_date", device_information_disks_history_table_dateRange.End.Value);

            Logging.Handler.Debug("/devices -> Device_Information_Disks_History_Load", "MySQL_Query", query);

            using (DbDataReader reader = await command.ExecuteReaderAsync())
            {
                if (reader.HasRows)
                {
                    while (await reader.ReadAsync())
                    {
                        Logging.Handler.Debug("/devices -> Device_Information_Disks_History_Load", "MySQL_Result", reader["json"].ToString());

                        JsonArray device_information_disks_history_array = JsonNode.Parse(reader["json"].ToString()).AsArray();

                        foreach (var disks in device_information_disks_history_array)
                        {
                            Device_Information_Disks_History_Entity disksEntity = new Device_Information_Disks_History_Entity
                                {
                                    date = reader["date"].ToString(),
                                    letter = disks["letter"].ToString(),
                                    label = disks["label"].ToString(),
                                    model = disks["model"].ToString(),
                                    firmware_revision = disks["firmware_revision"].ToString(),
                                    serial_number = disks["serial_number"].ToString(),
                                    interface_type = disks["interface_type"].ToString(),
                                    drive_type = disks["drive_type"].ToString(),
                                    drive_format = disks["drive_format"].ToString(),
                                    drive_ready = disks["drive_ready"].ToString(),
                                    capacity = disks["capacity"].ToString(),
                                    usage = disks["usage"].ToString(),
                                    status = disks["status"].ToString(),
                                };

                            result.Add(disksEntity);
                        }
                    }
                }
            }

            return result;
        }
        catch (Exception ex)
        {
            Logging.Handler.Error("/devices -> Device_Information_Disks_History_Load", "MySQL_Query", ex.Message);
            return new List<Device_Information_Disks_History_Entity>(); // Return an empty list or handle the exception as needed
        }
        finally
        {
            conn.Close();
            StateHasChanged();
            loading_overlay = false;
        }
    }

    private async Task Export_Disks_History_Table_Dialog()
    {
        await Show_Export_Table_Dialog("disks_history");
    }

    #endregion

    #region Performance Monitoring Ressources

    ChartOptions drive_chart_options = new ChartOptions();
    ChartOptions cpu_chart_options = new ChartOptions();
    ChartOptions ram_chart_options = new ChartOptions();
    ChartOptions network_chart_options = new ChartOptions();

    public void Update_Chart_Options()
    {
        //Select chart colors
        string[] drive_colors = { "#303030", "#00bbff" };
        string[] cpu_colors = { "#00bbff", "#00bbff" };
        string[] ram_colors = { "#b600ff", "#00bbff" };
        string[] network_colors = { "#ff6e00", "#00bbff" };
        drive_chart_options.ChartPalette = drive_colors;
        cpu_chart_options.ChartPalette = cpu_colors;
        ram_chart_options.ChartPalette = ram_colors;
        network_chart_options.ChartPalette = network_colors;
    }

    #endregion

    #region Task Manager

    public string task_manager_string = String.Empty;

    public List<Task_Manager_Entity> task_manager_mysql_data;

    public class Task_Manager_Entity
    {
        public string name { get; set; } = String.Empty;
        public string pid { get; set; } = String.Empty;
        public string parent_name { get; set; } = String.Empty;
        public string parent_pid { get; set; } = String.Empty;
        public string cpu { get; set; } = String.Empty;
        public string ram { get; set; } = String.Empty;
        public string user { get; set; } = String.Empty;
        public string created { get; set; } = String.Empty;
        public string path { get; set; } = String.Empty;
        public string cmd { get; set; } = String.Empty;
        public string handles { get; set; } = String.Empty;
        public string threads { get; set; } = String.Empty;
        public string read_operations { get; set; } = String.Empty;
        public string read_transfer { get; set; } = String.Empty;
        public string write_operations { get; set; } = String.Empty;
        public string write_transfer { get; set; } = String.Empty;
    }

    private string task_manager_table_view_port = "70vh";
    private string task_manager_table_sorted_column;
    private string task_manager_table_search_string = "";

    private bool Task_Manager_Table_Filter_Func(Task_Manager_Entity row)
    {
        if (string.IsNullOrEmpty(task_manager_table_search_string))
            return true;

        //Search logic for each column
        return row.name.Contains(task_manager_table_search_string, StringComparison.OrdinalIgnoreCase) ||
            row.pid.Contains(task_manager_table_search_string, StringComparison.OrdinalIgnoreCase) ||
            row.parent_name.Contains(task_manager_table_search_string, StringComparison.OrdinalIgnoreCase) ||
            row.parent_pid.Contains(task_manager_table_search_string, StringComparison.OrdinalIgnoreCase) ||
            row.cpu.Contains(task_manager_table_search_string, StringComparison.OrdinalIgnoreCase) ||
            row.ram.Contains(task_manager_table_search_string, StringComparison.OrdinalIgnoreCase) ||
            row.user.Contains(task_manager_table_search_string, StringComparison.OrdinalIgnoreCase) ||
            row.created.Contains(task_manager_table_search_string, StringComparison.OrdinalIgnoreCase) ||
            row.path.Contains(task_manager_table_search_string, StringComparison.OrdinalIgnoreCase) ||
            row.cmd.Contains(task_manager_table_search_string, StringComparison.OrdinalIgnoreCase) ||
            row.handles.Contains(task_manager_table_search_string, StringComparison.OrdinalIgnoreCase) ||
            row.threads.Contains(task_manager_table_search_string, StringComparison.OrdinalIgnoreCase) ||
            row.read_operations.Contains(task_manager_table_search_string, StringComparison.OrdinalIgnoreCase) ||
            row.read_transfer.Contains(task_manager_table_search_string, StringComparison.OrdinalIgnoreCase) ||
            row.write_operations.Contains(task_manager_table_search_string, StringComparison.OrdinalIgnoreCase) ||
            row.write_transfer.Contains(task_manager_table_search_string, StringComparison.OrdinalIgnoreCase);
    }

    private string task_manager_selectedRowContent = ""; // Hier wird der Inhalt der ausgewählten Zeile gespeichert

    // Der Handler für den TableRowClick-Event
    private void Task_Manager_RowClickHandler(Task_Manager_Entity row)
    {
        task_manager_selectedRowContent = row.pid;
    }

    private string Task_Manager_GetRowClass(Task_Manager_Entity row)
    {
        return row.pid == task_manager_selectedRowContent ? "selected-row" : "";
    }

    private async Task Task_Manager_Load()
    {
        try
        {
            JsonArray task_manager_array = JsonNode.Parse(task_manager_string).AsArray();

            task_manager_mysql_data = new List<Task_Manager_Entity>();

            foreach (var software in task_manager_array)
            {
                Task_Manager_Entity softwareEntity = new Task_Manager_Entity
                    {
                        name = software["name"].ToString(),
                        pid = software["pid"].ToString(),
                        parent_name = software["parent_name"].ToString(),
                        parent_pid = software["parent_pid"].ToString(),
                        cpu = software["cpu"].ToString(),
                        ram = software["ram"].ToString(),
                        user = software["user"].ToString(),
                        created = software["created"].ToString(),
                        path = software["path"].ToString(),
                        cmd = software["cmd"].ToString(),
                        handles = software["handles"].ToString(),
                        threads = software["threads"].ToString(),
                        read_operations = software["read_operations"].ToString(),
                        read_transfer = software["read_transfer"].ToString(),
                        write_operations = software["write_operations"].ToString(),
                        write_transfer = software["write_transfer"].ToString(),
                    };

                task_manager_mysql_data.Add(softwareEntity);
            }
        }
        catch (Exception ex)
        {
            Logging.Handler.Error("/devices -> Task_Manager_Load", "Result", ex.Message);
        }
    }

    #endregion

    #region Task Manager History

    public List<Task_Manager_History_Entity> task_manager_history_mysql_data; //Datasource for table

    public class Task_Manager_History_Entity
    {
        public string date { get; set; } = String.Empty;
        public string name { get; set; } = String.Empty;
        public string pid { get; set; } = String.Empty;
        public string parent_name { get; set; } = String.Empty;
        public string parent_pid { get; set; } = String.Empty;
        public string cpu { get; set; } = String.Empty;
        public string ram { get; set; } = String.Empty;
        public string user { get; set; } = String.Empty;
        public string created { get; set; } = String.Empty;
        public string path { get; set; } = String.Empty;
        public string cmd { get; set; } = String.Empty;
        public string handles { get; set; } = String.Empty;
        public string threads { get; set; } = String.Empty;
        public string read_operations { get; set; } = String.Empty;
        public string read_transfer { get; set; } = String.Empty;
        public string write_operations { get; set; } = String.Empty;
        public string write_transfer { get; set; } = String.Empty;
    }

    private TableGroupDefinition<Task_Manager_History_Entity> task_manager_history_groupDefinition = new TableGroupDefinition<Task_Manager_History_Entity>
    {
        GroupName = "Datum",
        Indentation = false,
        Expandable = true,
        IsInitiallyExpanded = false,
        Selector = (e) => e.date// Hier sollte die Eigenschaft sein, nach der gruppiert werden soll
    };

    private string task_manager_history_table_sorted_column;
    private string task_manager_history_table_search_string = String.Empty;
    private MudDateRangePicker device_information_task_manager_history_table_picker;
    private DateRange device_information_task_manager_history_table_dateRange = new DateRange(DateTime.Now.Date.AddDays(-7), DateTime.Now.Date.AddDays(1));

    private async Task Device_Information_Task_Manager_History_Table_Submit_Picker()
    {
        device_information_task_manager_history_table_picker.Close();

        task_manager_history_mysql_data = await Task_Manager_History_Load(notes_tenant_name, notes_location_name, notes_device_name);
    }

    private bool Task_Manager_History_Table_Filter_Func(Task_Manager_History_Entity row)
    {
        if (string.IsNullOrEmpty(task_manager_history_table_search_string))
            return true;

        //Search logic for each column
        return row.date.Contains(task_manager_history_table_search_string, StringComparison.OrdinalIgnoreCase) ||
            row.name.Contains(task_manager_history_table_search_string, StringComparison.OrdinalIgnoreCase) ||
            row.pid.Contains(task_manager_history_table_search_string, StringComparison.OrdinalIgnoreCase) ||
            row.parent_name.Contains(task_manager_history_table_search_string, StringComparison.OrdinalIgnoreCase) ||
            row.parent_pid.Contains(task_manager_history_table_search_string, StringComparison.OrdinalIgnoreCase) ||
            row.cpu.Contains(task_manager_history_table_search_string, StringComparison.OrdinalIgnoreCase) ||
            row.ram.Contains(task_manager_history_table_search_string, StringComparison.OrdinalIgnoreCase) ||
            row.user.Contains(task_manager_history_table_search_string, StringComparison.OrdinalIgnoreCase) ||
            row.created.Contains(task_manager_history_table_search_string, StringComparison.OrdinalIgnoreCase) ||
            row.path.Contains(task_manager_history_table_search_string, StringComparison.OrdinalIgnoreCase) ||
            row.cmd.Contains(task_manager_history_table_search_string, StringComparison.OrdinalIgnoreCase) ||
            row.handles.Contains(task_manager_history_table_search_string, StringComparison.OrdinalIgnoreCase) ||
            row.threads.Contains(task_manager_history_table_search_string, StringComparison.OrdinalIgnoreCase) ||
            row.read_operations.Contains(task_manager_history_table_search_string, StringComparison.OrdinalIgnoreCase) ||
            row.read_transfer.Contains(task_manager_history_table_search_string, StringComparison.OrdinalIgnoreCase) ||
            row.write_operations.Contains(task_manager_history_table_search_string, StringComparison.OrdinalIgnoreCase) ||
            row.write_transfer.Contains(task_manager_history_table_search_string, StringComparison.OrdinalIgnoreCase);
    }

    private string task_manager_history_selectedRowContent = ""; // Saving content of selected row

    // Executes on row click
    private void Task_Manager_History_RowClickHandler(Task_Manager_History_Entity row)
    {
        task_manager_history_selectedRowContent = row.date;
    }

    private string Task_Manager_History_GetRowClass(Task_Manager_History_Entity row)
    {
        return row.date == task_manager_history_selectedRowContent ? "selected-row" : "";
    }

    private async Task<List<Task_Manager_History_Entity>> Task_Manager_History_Load(string tenant_name, string location_name, string device_name)
    {
        loading_overlay = true;

        string query = "SELECT * FROM device_information_task_manager_history WHERE device_name = @device_name AND location_name = @location_name AND tenant_name = @tenant_name AND date >= @start_date AND date <= @end_date ORDER BY date DESC;";

        MySqlConnection conn = new MySqlConnection(Application_Settings.connectionString);

        try
        {
            List<Task_Manager_History_Entity> result = new List<Task_Manager_History_Entity>();

            await conn.OpenAsync();

            MySqlCommand command = new MySqlCommand(query, conn);
            command = new MySqlCommand(query, conn);
            command.Parameters.AddWithValue("@tenant_name", tenant_name);
            command.Parameters.AddWithValue("@location_name", location_name);
            command.Parameters.AddWithValue("@device_name", device_name);
            command.Parameters.AddWithValue("@start_date", device_information_task_manager_history_table_dateRange.Start.Value);
            command.Parameters.AddWithValue("@end_date", device_information_task_manager_history_table_dateRange.End.Value);

            Logging.Handler.Debug("Task_Manager_History", "MySQL_Prepared_Query", query); //Output prepared query

            using (DbDataReader reader = await command.ExecuteReaderAsync())
            {
                if (reader.HasRows)
                {
                    while (await reader.ReadAsync())
                    {
                        Logging.Handler.Debug("Task_Manager_History", "MySQL_Result", reader["json"].ToString()); //Output the JSON

                        JsonArray json_array = JsonNode.Parse(reader["json"].ToString()).AsArray(); //Transform json to array

                        foreach (var _object in json_array)
                        {
                            Task_Manager_History_Entity entity = new Task_Manager_History_Entity //Create the entity
                            {
                                date = reader["date"].ToString(),
                                name = _object["name"].ToString(),
                                pid = _object["pid"].ToString(),
                                parent_name = _object["parent_name"].ToString(),
                                parent_pid = _object["parent_pid"].ToString(),
                                cpu = _object["cpu"].ToString(),
                                ram = _object["ram"].ToString(),
                                user = _object["user"].ToString(),
                                created = _object["created"].ToString(),
                                path = _object["path"].ToString(),
                                cmd = _object["cmd"].ToString(),
                                handles = _object["handles"].ToString(),
                                threads = _object["threads"].ToString(),
                                read_operations = _object["read_operations"].ToString(),
                                read_transfer = _object["read_transfer"].ToString(),
                                write_operations = _object["write_operations"].ToString(),
                                write_transfer = _object["write_transfer"].ToString(),
                            };

                            result.Add(entity); // Add the entity to the list
                        }
                    }
                }
            }

            return result; //Return the list
        }
        catch (Exception ex)
        {
            Logging.Handler.Error("Task_Manager_History", "MySQL_Query", ex.Message);
            return new List<Task_Manager_History_Entity>(); // Return an empty list or handle the exception as needed
        }
        finally
        {
            conn.Close();
            StateHasChanged();
            loading_overlay = false;
        }
    }

    private async Task Export_Task_Manager_History_Table_Dialog()
    {
        await Show_Export_Table_Dialog("task_manager_history");
    }

    #endregion

    #region Notes

    public string notes_string = "Beispiel: Lizenz Informationen, Nutzer Infos.";
    public string notes_old_string = String.Empty;
    public bool notes_disabled = true;
    public string notes_tenant_name = String.Empty;
    public string notes_location_name = String.Empty;
    public string notes_device_name = String.Empty;

    private async Task Notes_Edit_Form()
    {
        if (notes_disabled)
            notes_disabled = false;
        else
            notes_disabled = true;
    }

    private async Task Notes_Save()
    {
        Logging.Handler.Debug("/devices -> Notes_Save", "Info", $"{notes_tenant_name} {notes_location_name} {notes_device_name} notes: {notes_string}");

        this.Snackbar.Configuration.ShowCloseIcon = true;
        this.Snackbar.Configuration.PositionClass = Defaults.Classes.Position.BottomRight;

        MySqlConnection conn = new MySqlConnection(Application_Settings.connectionString);

        try
        {
            notes_old_string = notes_string;
            string username  = await localStorage.GetItemAsync<string>("username");

            await conn.OpenAsync();

            string execute_query = "UPDATE devices SET notes = @notes WHERE device_name = @device_name AND location_name = @location_name AND tenant_name = @tenant_name; INSERT INTO `device_information_notes_history` (`tenant_name`, `location_name`, `device_name`, `date`, `author`, `note`) VALUES (@tenant_name, @location_name, @device_name, @date, @author, @notes_old);";

            MySqlCommand cmd = new MySqlCommand(execute_query, conn);

            cmd.Parameters.AddWithValue("@tenant_name", notes_tenant_name);
            cmd.Parameters.AddWithValue("@location_name", notes_location_name);
            cmd.Parameters.AddWithValue("@device_name", notes_device_name);
            cmd.Parameters.AddWithValue("@date", DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss"));
            cmd.Parameters.AddWithValue("@notes", await Base64.Handler.Encode(notes_string));
            cmd.Parameters.AddWithValue("@author", username);
            cmd.Parameters.AddWithValue("@notes_old", await Base64.Handler.Encode(notes_old_string));

            cmd.ExecuteNonQuery();

            await Notes_Edit_Form();

            this.Snackbar.Add("Gespeichert.", Severity.Success);
        }
        catch (Exception ex)
        {
            Logging.Handler.Error("/devices -> Notes_Save", "Result", ex.Message);
        }
        finally
        {
            await conn.CloseAsync();
        }
    }
    #endregion

    #region Device Information Notes History

    private List<Device_Information_Notes_History_Entity> device_information_notes_history_mysql_data;

    public class Device_Information_Notes_History_Entity
    {
        public string date { get; set; } = String.Empty;
        public string author { get; set; } = String.Empty;
        public string note { get; set; } = String.Empty;
    }

    private TableGroupDefinition<Device_Information_Notes_History_Entity> device_information_notes_history_groupDefinition = new TableGroupDefinition<Device_Information_Notes_History_Entity>
    {
        GroupName = "Datum",
        Indentation = false,
        Expandable = true,
        IsInitiallyExpanded = false,
        Selector = (e) => e.date// Hier sollte die Eigenschaft sein, nach der gruppiert werden soll
    };

    private string device_information_notes_history_table_view_port = "70vh";
    private string device_information_notes_history_table_sorted_column;
    private string device_information_notes_history_table_search_string = "";
    private MudDateRangePicker device_information_notes_history_table_picker;
    private DateRange device_information_notes_history_table_dateRange = new DateRange(DateTime.Now.Date.AddDays(-7), DateTime.Now.Date.AddDays(1));

    private async Task Device_Information_Notes_History_Table_Submit_Picker()
    {
        device_information_notes_history_table_picker.Close();

        device_information_notes_history_mysql_data = await Device_Information_Notes_History_Load(notes_tenant_name, notes_location_name, notes_device_name);
    }

    private bool Device_Information_Notes_History_Table_Filter_Func(Device_Information_Notes_History_Entity row)
    {
        if (string.IsNullOrEmpty(device_information_notes_history_table_search_string))
            return true;

        //Search logic for each column
        return row.date.Contains(device_information_notes_history_table_search_string, StringComparison.OrdinalIgnoreCase) ||
            row.note.Contains(device_information_notes_history_table_search_string, StringComparison.OrdinalIgnoreCase);
    }

    private string device_information_notes_history_selectedRowContent = ""; // Hier wird der Inhalt der ausgewählten Zeile gespeichert

    // Der Handler für den TableRowClick-Event
    private void Device_Information_Notes_History_RowClickHandler(Device_Information_Notes_History_Entity row)
    {
        device_information_notes_history_selectedRowContent = row.date;
    }

    private string Device_Information_Notes_History_GetRowClass(Device_Information_Notes_History_Entity row)
    {
        return row.date == device_information_notes_history_selectedRowContent ? "selected-row" : "";
    }

    private async Task<List<Device_Information_Notes_History_Entity>> Device_Information_Notes_History_Load(string tenant_name, string location_name, string device_name)
    {
        loading_overlay = true;

        string query = "SELECT * FROM device_information_notes_history WHERE device_name = @device_name AND location_name = @location_name AND tenant_name = @tenant_name AND date >= @start_date AND date <= @end_date ORDER BY date DESC;";

        MySqlConnection conn = new MySqlConnection(Application_Settings.connectionString);

        try
        {
            List<Device_Information_Notes_History_Entity> result = new List<Device_Information_Notes_History_Entity>();

            await conn.OpenAsync();

            MySqlCommand command = new MySqlCommand(query, conn);
            command = new MySqlCommand(query, conn);
            command.Parameters.AddWithValue("@tenant_name", tenant_name);
            command.Parameters.AddWithValue("@location_name", location_name);
            command.Parameters.AddWithValue("@device_name", device_name);
            command.Parameters.AddWithValue("@start_date", device_information_notes_history_table_dateRange.Start.Value);
            command.Parameters.AddWithValue("@end_date", device_information_notes_history_table_dateRange.End.Value);

            Logging.Handler.Debug("/devices -> Device_Information_Notes_History_Load", "MySQL_Query", query);

            using (DbDataReader reader = await command.ExecuteReaderAsync())
            {
                if (reader.HasRows)
                {
                    while (await reader.ReadAsync())
                    {
                        Logging.Handler.Debug("/devices -> Device_Information_Notes_History_Load", "MySQL_Result", reader["note"].ToString());

                        Device_Information_Notes_History_Entity softwareEntity = new Device_Information_Notes_History_Entity
                            {
                                date = reader["date"].ToString(),
                                author = reader["author"].ToString(),
                                note = await Base64.Handler.Decode(reader["note"].ToString()),
                            };

                        result.Add(softwareEntity);
                    }
                }
            }

            return result;
        }
        catch (Exception ex)
        {
            Logging.Handler.Error("/devices -> Device_Information_Notes_History_Load", "MySQL_Query", ex.Message);
            return new List<Device_Information_Notes_History_Entity>(); // Return an empty list or handle the exception as needed
        }
        finally
        {
            conn.Close();
            StateHasChanged();
            loading_overlay = false;
        }
    }

    #endregion

    #region Support History

    public string support_history_string = String.Empty;

    public List<Support_History_Entity> support_history_mysql_data;

    public class Support_History_Entity
    {
        public string id { get; set; } = String.Empty;
        public string date { get; set; } = String.Empty;
        public string username { get; set; } = String.Empty;
        public string description { get; set; } = String.Empty;
    }

    private string support_history_table_view_port = "70vh";
    private string support_history_table_sorted_column;
    private string support_history_table_search_string = "";
    private MudDateRangePicker device_information_support_history_table_picker;
    private DateRange device_information_support_history_table_dateRange = new DateRange(DateTime.Now.Date.AddDays(-7), DateTime.Now.Date.AddDays(1));

    private async Task Device_Information_Support_History_Table_Submit_Picker()
    {
        device_information_support_history_table_picker.Close();

        support_history_mysql_data = await Get_Device_Support_History(notes_tenant_name, notes_location_name, notes_device_name, true);
    }

    private bool Support_History_Table_Filter_Func(Support_History_Entity row)
    {
        if (string.IsNullOrEmpty(support_history_table_search_string))
            return true;

        //Search logic for each column
        return row.id.Contains(support_history_table_search_string, StringComparison.OrdinalIgnoreCase) ||
            row.username.Contains(support_history_table_search_string, StringComparison.OrdinalIgnoreCase) ||
            row.date.Contains(support_history_table_search_string, StringComparison.OrdinalIgnoreCase) ||
            row.description.Contains(support_history_table_search_string, StringComparison.OrdinalIgnoreCase);
    }

    private string support_history_selectedRowContent = ""; // Hier wird der Inhalt der ausgewählten Zeile gespeichert

    // Der Handler für den TableRowClick-Event
    private void Support_History_RowClickHandler(Support_History_Entity row)
    {
        support_history_selectedRowContent = row.id;
    }

    private string Support_History_GetRowClass(Support_History_Entity row)
    {
        return row.id == support_history_selectedRowContent ? "selected-row" : "";
    }

    private async Task<List<Support_History_Entity>> Get_Device_Support_History(string tenant_name, string location_name, string device_name, bool loading_overlay)
    {
        if (loading_overlay)
            loading_overlay = true;


        string query = "SELECT * FROM support_history WHERE device_name = @device_name AND location_name = @location_name AND tenant_name = @tenant_name AND date >= @start_date AND date <= @end_date ORDER BY date DESC;";

        MySqlConnection conn = new MySqlConnection(Application_Settings.connectionString);

        try
        {
            List<Support_History_Entity> result = new List<Support_History_Entity>();

            await conn.OpenAsync();

            MySqlCommand command = new MySqlCommand(query, conn);
            command = new MySqlCommand(query, conn);
            command.Parameters.AddWithValue("@tenant_name", tenant_name);
            command.Parameters.AddWithValue("@location_name", location_name);
            command.Parameters.AddWithValue("@device_name", device_name);
            command.Parameters.AddWithValue("@start_date", device_information_support_history_table_dateRange.Start.Value);
            command.Parameters.AddWithValue("@end_date", device_information_support_history_table_dateRange.End.Value);

            Logging.Handler.Debug("/devices -> Get_Device_Support_History", "MySQL_Query", query);

            using (DbDataReader reader = await command.ExecuteReaderAsync())
            {
                if (reader.HasRows)
                {
                    while (await reader.ReadAsync())
                    {
                        Logging.Handler.Debug("/devices -> Get_Device_Support_History", "MySQL_Result", reader["username"].ToString() + " " + reader["date"].ToString() + " " + reader["description"].ToString());

                        Support_History_Entity entity = new Support_History_Entity
                        {
                            id = reader["id"].ToString() ?? "",
                            username = reader["username"].ToString() ?? "",
                            date = reader["date"].ToString() ?? "",
                            description = reader["description"].ToString() ?? "",
                        };

                        result.Add(entity);
                    }
                }
            }

            return result;
        }
        catch (Exception ex)
        {
            Logging.Handler.Error("/devices -> Get_Device_Support_History", "MySQL_Query", ex.Message);
            return new List<Support_History_Entity>(); // Return an empty list or handle the exception as needed
        }
        finally
        {
            conn.Close();
            if (loading_overlay)
                loading_overlay = true;
        }
    }

    #endregion

    #region Events

    public List<Events_Entity> events_mysql_data; //Datasource for table

    public class Events_Entity
    {
        public string id { get; set; } = String.Empty;
        public string date { get; set; } = String.Empty;
        public string severity { get; set; } = String.Empty;
        public string reported_by { get; set; } = String.Empty;
        public string _event { get; set; } = String.Empty;
        public string description { get; set; } = String.Empty;
        public string read { get; set; } = String.Empty;
        public string type { get; set; } = String.Empty;
    }

    private string events_table_sorted_column;
    private string events_table_search_string = String.Empty;
    private MudDateRangePicker device_information_events_table_picker;
    private DateRange device_information_events_table_dateRange = new DateRange(DateTime.Now.Date.AddDays(-7), DateTime.Now.Date.AddDays(1));
    private string device_information_events_severity_string = "Egal";

    private async Task Device_Information_Events_Table_Submit()
    {
        device_information_events_table_picker.Close();

        events_mysql_data = await Events_Load(notes_tenant_name, notes_location_name, notes_device_name, true);
    }

    private bool Events_Table_Filter_Func(Events_Entity row)
    {
        if (string.IsNullOrEmpty(events_table_search_string))
            return true;

        //Search logic for each column
        return row.id.Contains(events_table_search_string, StringComparison.OrdinalIgnoreCase) ||
            row.date.Contains(events_table_search_string, StringComparison.OrdinalIgnoreCase) ||
            row.severity.Contains(events_table_search_string, StringComparison.OrdinalIgnoreCase) ||
            row.reported_by.Contains(events_table_search_string, StringComparison.OrdinalIgnoreCase) ||
            row._event.Contains(events_table_search_string, StringComparison.OrdinalIgnoreCase) ||
            row.description.Contains(events_table_search_string, StringComparison.OrdinalIgnoreCase) ||
            row.read.Contains(events_table_search_string, StringComparison.OrdinalIgnoreCase) ||
            row.type.Contains(events_table_search_string, StringComparison.OrdinalIgnoreCase);
    }

    private string events_selectedRowContent = ""; // Saving content of selected row

    // Executes on row click
    private void Events_RowClickHandler(Events_Entity row)
    {
        events_selectedRowContent = row.id;
    }

    private string Events_GetRowClass(Events_Entity row)
    {
        return row.id == events_selectedRowContent ? "selected-row" : "";
    }

    int events_load_counter = 0;

    private async Task<List<Events_Entity>> Events_Load(string tenant_name, string location_name, string device_name, bool bypass_events_load_counter)
    {        
        if (events_load_counter != 0 && bypass_events_load_counter == false)
        {
            events_load_counter++;
            return new List<Events_Entity>();
        }

        loading_overlay = true;

        string query = "SELECT * FROM events WHERE device_name = @device_name AND location_name = @location_name AND tenant_name = @tenant_name AND date >= @start_date AND date <= @end_date ORDER BY date DESC;";

        //Select severity
        if (device_information_events_severity_string == "Niedrig")
            query = "SELECT * FROM events WHERE device_name = @device_name AND location_name = @location_name AND tenant_name = @tenant_name AND date >= @start_date AND date <= @end_date AND severity = 0 ORDER BY date DESC;";
        else if (device_information_events_severity_string == "Moderat")
            query = "SELECT * FROM events WHERE device_name = @device_name AND location_name = @location_name AND tenant_name = @tenant_name AND date >= @start_date AND date <= @end_date AND severity = 1 ORDER BY date DESC;";
        else if (device_information_events_severity_string == "Hoch")
            query = "SELECT * FROM events WHERE device_name = @device_name AND location_name = @location_name AND tenant_name = @tenant_name AND date >= @start_date AND date <= @end_date AND severity = 2 ORDER BY date DESC;";
        else if (device_information_events_severity_string == "Kritisch")
            query = "SELECT * FROM events WHERE device_name = @device_name AND location_name = @location_name AND tenant_name = @tenant_name AND date >= @start_date AND date <= @end_date AND severity = 3 ORDER BY date DESC;";

        MySqlConnection conn = new MySqlConnection(Application_Settings.connectionString);

        try
        {
            List<Events_Entity> result = new List<Events_Entity>();

            await conn.OpenAsync();

            MySqlCommand command = new MySqlCommand(query, conn);
            command = new MySqlCommand(query, conn);
            command.Parameters.AddWithValue("@tenant_name", tenant_name);
            command.Parameters.AddWithValue("@location_name", location_name);
            command.Parameters.AddWithValue("@device_name", device_name);
            command.Parameters.AddWithValue("@start_date", device_information_events_table_dateRange.Start.Value);
            command.Parameters.AddWithValue("@end_date", device_information_events_table_dateRange.End.Value);

            Logging.Handler.Debug("Events", "MySQL_Prepared_Query", query); //Output prepared query

            using (DbDataReader reader = await command.ExecuteReaderAsync())
            {
                if (reader.HasRows)
                {
                    while (await reader.ReadAsync())
                    {
                        Logging.Handler.Debug("Events", "MySQL_Result", reader["id"].ToString()); //Output the JSON

                        Events_Entity entity = new Events_Entity //Create the entity
                        {
                            id = reader["id"].ToString(),
                            date = reader["date"].ToString(),
                            severity = reader["severity"].ToString(),
                            reported_by = reader["reported_by"].ToString(),
                            _event = reader["_event"].ToString(),
                            description = await Base64.Handler.Decode(reader["description"].ToString()),
                            read = reader["read"].ToString(),
                            type = reader["type"].ToString(),
                        };

                        result.Add(entity); // Add the entity to the list
                    }
                }
            }

            return result; //Return the list
        }
        catch (Exception ex)
        {
            Logging.Handler.Error("Events", "MySQL_Query", ex.Message);
            return new List<Events_Entity>(); // Return an empty list or handle the exception as needed
        }
        finally
        {
            conn.Close();
            loading_overlay = false;
        }
    }

    private async Task Export_Events_Table_Dialog()
    {
        await Show_Export_Table_Dialog("events");
    }

    #endregion

    #region Antivirus Information

    string antivirus_information_json = String.Empty;

    string antivirus_information_amengineversion = String.Empty;
    string antivirus_information_amproductversion = String.Empty;
    string antivirus_information_amserviceenabled = String.Empty;
    string antivirus_information_amserviceversion = String.Empty;
    string antivirus_information_antispywareenabled = String.Empty;
    string antivirus_information_antispywaresignaturelastupdated = String.Empty;
    string antivirus_information_antispywaresignatureversion = String.Empty;
    string antivirus_information_antivirusenabled = String.Empty;
    string antivirus_information_antivirussignaturelastupdated = String.Empty;
    string antivirus_information_antivirussignatureversion = String.Empty;
    string antivirus_information_behaviormonitorenabled = String.Empty;
    string antivirus_information_ioavprotectionenabled = String.Empty;
    string antivirus_information_istamperprotected = String.Empty;
    string antivirus_information_nisenabled = String.Empty;
    string antivirus_information_nisengineversion = String.Empty;
    string antivirus_information_nissignaturelastupdated = String.Empty;
    string antivirus_information_nissignatureversion = String.Empty;
    string antivirus_information_onaccessprotectionenabled = String.Empty;
    string antivirus_information_realtimetprotectionenabled = String.Empty;

    private async Task Get_Antivirus_Information()
    {
        try
        {
            // Deserialisierung des gesamten JSON-Strings
            using (JsonDocument document = JsonDocument.Parse(antivirus_information_json))
            {
                antivirus_information_amengineversion = document.RootElement.GetProperty("amengineversion").ToString();
                antivirus_information_amproductversion = document.RootElement.GetProperty("amproductversion").ToString();
                antivirus_information_amserviceenabled = document.RootElement.GetProperty("amserviceenabled").ToString().ToLower();
                antivirus_information_amserviceversion = document.RootElement.GetProperty("amserviceversion").ToString();
                antivirus_information_antispywareenabled = document.RootElement.GetProperty("antispywareenabled").ToString().ToLower();
                antivirus_information_antispywaresignaturelastupdated = document.RootElement.GetProperty("antispywaresignaturelastupdated").ToString();
                antivirus_information_antispywaresignatureversion = document.RootElement.GetProperty("antispywaresignatureversion").ToString();
                antivirus_information_antivirusenabled = document.RootElement.GetProperty("antivirusenabled").ToString().ToLower();
                antivirus_information_antivirussignaturelastupdated = document.RootElement.GetProperty("antivirussignaturelastupdated").ToString();
                antivirus_information_antivirussignatureversion = document.RootElement.GetProperty("antivirussignatureversion").ToString();
                antivirus_information_behaviormonitorenabled = document.RootElement.GetProperty("behaviormonitorenabled").ToString().ToLower();
                antivirus_information_ioavprotectionenabled = document.RootElement.GetProperty("ioavprotectionenabled").ToString().ToLower();
                antivirus_information_istamperprotected = document.RootElement.GetProperty("istamperprotected").ToString().ToLower();
                antivirus_information_nisenabled = document.RootElement.GetProperty("nisenabled").ToString().ToLower();
                antivirus_information_nisengineversion = document.RootElement.GetProperty("nisengineversion").ToString();
                antivirus_information_nissignaturelastupdated = document.RootElement.GetProperty("nissignaturelastupdated").ToString();
                antivirus_information_nissignatureversion = document.RootElement.GetProperty("nissignatureversion").ToString();
                antivirus_information_onaccessprotectionenabled = document.RootElement.GetProperty("onaccessprotectionenabled").ToString().ToLower();
                antivirus_information_realtimetprotectionenabled = document.RootElement.GetProperty("realtimetprotectionenabled").ToString().ToLower();
            }

            //Logging.Handler.Debug("/devices -> Get_Antivirus_Information", "antispywareenabled", antivirus_information_antispywareenabled);


            //computable to human
            if (antivirus_information_amserviceenabled == "true")
                antivirus_information_amserviceenabled = "Aktiviert";
            else
                antivirus_information_amserviceenabled = "Deaktiviert";

            if (antivirus_information_antispywareenabled == "true")
                antivirus_information_antispywareenabled = "Aktiviert";
            else
                antivirus_information_antispywareenabled = "Deaktiviert";

            if (antivirus_information_antivirusenabled == "true")
                antivirus_information_antivirusenabled = "Aktiviert";
            else
                antivirus_information_antivirusenabled = "Deaktiviert";

            if (antivirus_information_behaviormonitorenabled == "true")
                antivirus_information_behaviormonitorenabled = "Aktiviert";
            else
                antivirus_information_behaviormonitorenabled = "Deaktiviert";

            if (antivirus_information_ioavprotectionenabled == "true")
                antivirus_information_ioavprotectionenabled = "Aktiviert";
            else
                antivirus_information_ioavprotectionenabled = "Deaktiviert";

            if (antivirus_information_istamperprotected == "true")
                antivirus_information_istamperprotected = "Aktiviert";
            else
                antivirus_information_istamperprotected = "Deaktiviert";

            if (antivirus_information_istamperprotected == "true")
                antivirus_information_istamperprotected = "Aktiviert";

            if (antivirus_information_nisenabled == "true")
                antivirus_information_nisenabled = "Aktiviert";
            else
                antivirus_information_nisenabled = "Deaktiviert";

            if (antivirus_information_onaccessprotectionenabled == "true")
                antivirus_information_onaccessprotectionenabled = "Aktiviert";
            else 
                antivirus_information_onaccessprotectionenabled = "Deaktiviert";

            if (antivirus_information_realtimetprotectionenabled == "true")
                antivirus_information_realtimetprotectionenabled = "Aktiviert";
        }
        catch (Exception ex)
        {
            Logging.Handler.Error("/devices -> Get_Antivirus_Information", "result", ex.Message);
        }
    }

    #endregion

    #region Data_Export
    private async Task Show_Export_Table_Dialog(string type)
    {
        var options = new DialogOptions
            {
                DisableBackdropClick = false,
                MaxWidth = MaxWidth.Small,
                ClassBackground = "dialog-blurring",

            };

        var result = await this.DialogService.Show<Device_Management.Export_Data_Dialog>(string.Empty, new DialogParameters(), options).Result;

        if (result != null && result.Data != null)
        {
            if (result.Data.ToString() == "JSON")
                await Export_Data_Json(type);
            else if (result.Data.ToString() == "Spreadsheet (.xlsx)")
                await Export_Data_Spreadsheet(type);
            else if (result.Data.ToString() == "HTML")
                await Export_Data_HTML(type);
        }
    }

    private async Task Trigger_Export_Device_Table_Dialog()
    {
        await Show_Export_Table_Dialog("devices");
    }

    private async Task Trigger_Export_Device_History_Table_Dialog()
    {
        await Show_Export_Table_Dialog("devices_history");
    }

    private async Task Trigger_Export_Installed_Application_Table_Dialog()
    {
        await Show_Export_Table_Dialog("applications_installed");
    }

    private async Task Trigger_Export_Application_Logon_Table_Dialog()
    {
        await Show_Export_Table_Dialog("applications_logon");
    }

    private async Task Trigger_Export_Application_Logon_History_Table_Dialog()
    {
        await Show_Export_Table_Dialog("applications_logon_history");
    }

    private async Task Trigger_Export_Application_Scheduled_Tasks_Table_Dialog()
    {
        await Show_Export_Table_Dialog("applications_scheduled_tasks");
    }

    private async Task Trigger_Export_Application_Scheduled_Tasks_History_Table_Dialog()
    {
        await Show_Export_Table_Dialog("applications_scheduled_tasks_history");
    }

    private async Task Trigger_Export_Applications_Services_Table_Dialog()
    {
        await Show_Export_Table_Dialog("applications_services");
    }
    
    private async Task Trigger_Export_Application_Services_History_Table_Dialog()
    {
        await Show_Export_Table_Dialog("applications_services_history");
    }

    private async Task Trigger_Export_Applications_Drivers_Table_Dialog()
    {
        await Show_Export_Table_Dialog("applications_drivers");
    }

    private async Task Trigger_Export_Application_Drivers_History_Table_Dialog()
    {
        await Show_Export_Table_Dialog("applications_drivers_history");
    }

    private async Task Trigger_Export_Task_Manager_Table_Dialog()
    {
        await Show_Export_Table_Dialog("task_manager");
    }

    private async Task Trigger_Export_Support_History_Table_Dialog()
    {
        await Show_Export_Table_Dialog("support_history");
    }

    private async Task Trigger_Export_Notes_History_Table_Dialog()
    {
        await Show_Export_Table_Dialog("note_history");
    }

    private async Task Trigger_Export_Disks_History_Table_Dialog()
    {
        await Show_Export_Table_Dialog("disk_history");
    }

    private async Task Trigger_Export_Installed_Application_History_Table_Dialog()
    {
        await Show_Export_Table_Dialog("applications_installed_history");
    }

    private async Task Export_Data_Json(string type)
    {
        try
        {
            string jsonContent = String.Empty;

            // Erstellen eines JSON-Strings aus den MudTable-Einträgen
            if (type == "devices")
                jsonContent = JsonSerializer.Serialize(mysql_data, new JsonSerializerOptions { WriteIndented = true });
            else if (type == "applications_installed")
                jsonContent = JsonSerializer.Serialize(software_installed_mysql_data, new JsonSerializerOptions { WriteIndented = true });
            else if (type == "applications_logon")
                jsonContent = JsonSerializer.Serialize(applications_logon, new JsonSerializerOptions { WriteIndented = true });
            else if (type == "applications_scheduled_tasks")
                jsonContent = JsonSerializer.Serialize(applications_scheduled_tasks, new JsonSerializerOptions { WriteIndented = true });
            else if (type == "applications_services")
                jsonContent = JsonSerializer.Serialize(applications_services, new JsonSerializerOptions { WriteIndented = true });
            else if (type == "task_manager")
                jsonContent = JsonSerializer.Serialize(task_manager_string, new JsonSerializerOptions { WriteIndented = true });
            else if (type == "support_history")
                jsonContent = JsonSerializer.Serialize(support_history_mysql_data, new JsonSerializerOptions { WriteIndented = true });
            else if (type == "devices_history")
                jsonContent = JsonSerializer.Serialize(support_history_mysql_data, new JsonSerializerOptions { WriteIndented = true });
            else if (type == "note_history")
                jsonContent = JsonSerializer.Serialize(device_information_notes_history_mysql_data, new JsonSerializerOptions { WriteIndented = true });
            else if (type == "disk_history")
                jsonContent = JsonSerializer.Serialize(device_information_disks_history_mysql_data, new JsonSerializerOptions { WriteIndented = true });
            else if (type == "applications_installed_history")
                jsonContent = JsonSerializer.Serialize(applications_installed_history_mysql_data, new JsonSerializerOptions { WriteIndented = true });
            else if (type == "applications_logon_history")
                jsonContent = JsonSerializer.Serialize(applications_logon_history_mysql_data, new JsonSerializerOptions { WriteIndented = true });
            else if (type == "applications_scheduled_tasks_history")
                jsonContent = JsonSerializer.Serialize(applications_scheduled_tasks_history_mysql_data, new JsonSerializerOptions { WriteIndented = true });
            else if (type == "applications_services_history")
                jsonContent = JsonSerializer.Serialize(applications_services_history_mysql_data, new JsonSerializerOptions { WriteIndented = true });
            else if (type == "applications_drivers_history")
                jsonContent = JsonSerializer.Serialize(applications_drivers_history_mysql_data, new JsonSerializerOptions { WriteIndented = true });
            else if (type == "cpu_history")
                jsonContent = JsonSerializer.Serialize(device_information_cpu_history_mysql_data, new JsonSerializerOptions { WriteIndented = true });
            else if (type == "ram_history")
                jsonContent = JsonSerializer.Serialize(ram_history_mysql_data, new JsonSerializerOptions { WriteIndented = true });
            else if (type == "network_adapters_history")
                jsonContent = JsonSerializer.Serialize(device_information_network_adapters_history_mysql_data, new JsonSerializerOptions { WriteIndented = true });
            else if (type == "disks_history")
                jsonContent = JsonSerializer.Serialize(device_information_disks_history_mysql_data, new JsonSerializerOptions { WriteIndented = true });
            else if (type == "task_manager_history")
                jsonContent = JsonSerializer.Serialize(task_manager_history_mysql_data, new JsonSerializerOptions { WriteIndented = true });
            else if (type == "events")
                jsonContent = JsonSerializer.Serialize(events_mysql_data, new JsonSerializerOptions { WriteIndented = true });
            else if (type == "antivirus_products_history")
                jsonContent = JsonSerializer.Serialize(antivirus_products_history_mysql_data, new JsonSerializerOptions { WriteIndented = true });
            
            // Aufruf der JavaScript-Funktion für den Export als .txt
            await JSRuntime.InvokeVoidAsync("exportToTxt", $"{type}.json", jsonContent);
        }
        catch (Exception ex)
        {
            Logging.Handler.Error("System_Logs", "Export_Data_Json", ex.Message);
        }
    }

    public async Task Export_Data_HTML(string type)
    {
        try
        {
            StringBuilder htmlBuilder = new StringBuilder();

            if (type == "devices")
            {
                // Baue den Tabellenkopf basierend auf den Eigenschaften der Datenklasse
                htmlBuilder.Append("<table border='1'><tr>");
                foreach (var property in mysql_data.First().GetType().GetProperties())
                {
                    htmlBuilder.Append($"<th>{property.Name}</th>");
                }
                htmlBuilder.Append("</tr>");

                // Baue die Tabelleneinträge basierend auf den Daten
                foreach (var entry in mysql_data)
                {
                    htmlBuilder.Append("<tr>");
                    foreach (var property in entry.GetType().GetProperties())
                    {
                        htmlBuilder.Append($"<td>{property.GetValue(entry)}</td>");
                    }
                    htmlBuilder.Append("</tr>");
                }
            }
            else if (type == "applications_installed")
            {
                // Baue den Tabellenkopf basierend auf den Eigenschaften der Datenklasse
                htmlBuilder.Append("<table border='1'><tr>");
                foreach (var property in software_installed_mysql_data.First().GetType().GetProperties())
                {
                    htmlBuilder.Append($"<th>{property.Name}</th>");
                }
                htmlBuilder.Append("</tr>");

                // Baue die Tabelleneinträge basierend auf den Daten
                foreach (var entry in software_installed_mysql_data)
                {
                    htmlBuilder.Append("<tr>");
                    foreach (var property in entry.GetType().GetProperties())
                    {
                        htmlBuilder.Append($"<td>{property.GetValue(entry)}</td>");
                    }
                    htmlBuilder.Append("</tr>");
                }
            }
            else if (type == "applications_logon")
            {
                // Baue den Tabellenkopf basierend auf den Eigenschaften der Datenklasse
                htmlBuilder.Append("<table border='1'><tr>");
                foreach (var property in application_logon_mysql_data.First().GetType().GetProperties())
                {
                    htmlBuilder.Append($"<th>{property.Name}</th>");
                }
                htmlBuilder.Append("</tr>");

                // Baue die Tabelleneinträge basierend auf den Daten
                foreach (var entry in application_logon_mysql_data)
                {
                    htmlBuilder.Append("<tr>");
                    foreach (var property in entry.GetType().GetProperties())
                    {
                        htmlBuilder.Append($"<td>{property.GetValue(entry)}</td>");
                    }
                    htmlBuilder.Append("</tr>");
                }
            }
            else if (type == "applications_scheduled_tasks")
            {
                // Baue den Tabellenkopf basierend auf den Eigenschaften der Datenklasse
                htmlBuilder.Append("<table border='1'><tr>");
                foreach (var property in applications_scheduled_tasks_history_mysql_data.First().GetType().GetProperties())
                {
                    htmlBuilder.Append($"<th>{property.Name}</th>");
                }
                htmlBuilder.Append("</tr>");

                // Baue die Tabelleneinträge basierend auf den Daten
                foreach (var entry in applications_scheduled_tasks_history_mysql_data)
                {
                    htmlBuilder.Append("<tr>");
                    foreach (var property in entry.GetType().GetProperties())
                    {
                        htmlBuilder.Append($"<td>{property.GetValue(entry)}</td>");
                    }
                    htmlBuilder.Append("</tr>");
                }
            }
            else if (type == "applications_services")
            {
                // Baue den Tabellenkopf basierend auf den Eigenschaften der Datenklasse
                htmlBuilder.Append("<table border='1'><tr>");
                foreach (var property in applications_services_history_mysql_data.First().GetType().GetProperties())
                {
                    htmlBuilder.Append($"<th>{property.Name}</th>");
                }
                htmlBuilder.Append("</tr>");

                // Baue die Tabelleneinträge basierend auf den Daten
                foreach (var entry in applications_services_history_mysql_data)
                {
                    htmlBuilder.Append("<tr>");
                    foreach (var property in entry.GetType().GetProperties())
                    {
                        htmlBuilder.Append($"<td>{property.GetValue(entry)}</td>");
                    }
                    htmlBuilder.Append("</tr>");
                }
            }
            else if (type == "task_manager")
            {
               // Baue den Tabellenkopf basierend auf den Eigenschaften der Datenklasse
                htmlBuilder.Append("<table border='1'><tr>");
                foreach (var property in task_manager_mysql_data.First().GetType().GetProperties())
                {
                    htmlBuilder.Append($"<th>{property.Name}</th>");
                }
                htmlBuilder.Append("</tr>");

                // Baue die Tabelleneinträge basierend auf den Daten
                foreach (var entry in task_manager_mysql_data)
                {
                    htmlBuilder.Append("<tr>");
                    foreach (var property in entry.GetType().GetProperties())
                    {
                        htmlBuilder.Append($"<td>{property.GetValue(entry)}</td>");
                    }
                    htmlBuilder.Append("</tr>");
                }
            }
            else if (type == "support_history")
            {
                // Baue den Tabellenkopf basierend auf den Eigenschaften der Datenklasse
                htmlBuilder.Append("<table border='1'><tr>");
                foreach (var property in support_history_mysql_data.First().GetType().GetProperties())
                {
                    htmlBuilder.Append($"<th>{property.Name}</th>");
                }
                htmlBuilder.Append("</tr>");

                // Baue die Tabelleneinträge basierend auf den Daten
                foreach (var entry in support_history_mysql_data)
                {
                    htmlBuilder.Append("<tr>");
                    foreach (var property in entry.GetType().GetProperties())
                    {
                        htmlBuilder.Append($"<td>{property.GetValue(entry)}</td>");
                    }
                    htmlBuilder.Append("</tr>");
                }
            }
            else if (type == "devices_history")
            {
                 // Baue den Tabellenkopf basierend auf den Eigenschaften der Datenklasse
                htmlBuilder.Append("<table border='1'><tr>");
                foreach (var property in device_information_general_history_mysql_data.First().GetType().GetProperties())
                {
                    htmlBuilder.Append($"<th>{property.Name}</th>");
                }
                htmlBuilder.Append("</tr>");

                // Baue die Tabelleneinträge basierend auf den Daten
                foreach (var entry in device_information_general_history_mysql_data)
                {
                    htmlBuilder.Append("<tr>");
                    foreach (var property in entry.GetType().GetProperties())
                    {
                        htmlBuilder.Append($"<td>{property.GetValue(entry)}</td>");
                    }
                    htmlBuilder.Append("</tr>");
                }
            }
            else if (type == "note_history")
            {
                // Baue den Tabellenkopf basierend auf den Eigenschaften der Datenklasse
                htmlBuilder.Append("<table border='1'><tr>");
                foreach (var property in device_information_notes_history_mysql_data.First().GetType().GetProperties())
                {
                    htmlBuilder.Append($"<th>{property.Name}</th>");
                }
                htmlBuilder.Append("</tr>");

                // Baue die Tabelleneinträge basierend auf den Daten
                foreach (var entry in device_information_notes_history_mysql_data)
                {
                    htmlBuilder.Append("<tr>");
                    foreach (var property in entry.GetType().GetProperties())
                    {
                        htmlBuilder.Append($"<td>{property.GetValue(entry)}</td>");
                    }
                    htmlBuilder.Append("</tr>");
                }
            }
            else if (type == "disk_history")
            {
                // Baue den Tabellenkopf basierend auf den Eigenschaften der Datenklasse
                htmlBuilder.Append("<table border='1'><tr>");
                foreach (var property in device_information_disks_history_mysql_data.First().GetType().GetProperties())
                {
                    htmlBuilder.Append($"<th>{property.Name}</th>");
                }
                htmlBuilder.Append("</tr>");

                // Baue die Tabelleneinträge basierend auf den Daten
                foreach (var entry in device_information_disks_history_mysql_data)
                {
                    htmlBuilder.Append("<tr>");
                    foreach (var property in entry.GetType().GetProperties())
                    {
                        htmlBuilder.Append($"<td>{property.GetValue(entry)}</td>");
                    }
                    htmlBuilder.Append("</tr>");
                }
            }
            else if (type == "applications_installed_history")
            {
                // Baue den Tabellenkopf basierend auf den Eigenschaften der Datenklasse
                htmlBuilder.Append("<table border='1'><tr>");
                foreach (var property in applications_installed_history_mysql_data.First().GetType().GetProperties())
                {
                    htmlBuilder.Append($"<th>{property.Name}</th>");
                }
                htmlBuilder.Append("</tr>");

                // Baue die Tabelleneinträge basierend auf den Daten
                foreach (var entry in applications_installed_history_mysql_data)
                {
                    htmlBuilder.Append("<tr>");
                    foreach (var property in entry.GetType().GetProperties())
                    {
                        htmlBuilder.Append($"<td>{property.GetValue(entry)}</td>");
                    }
                    htmlBuilder.Append("</tr>");
                }
            }
            else if (type == "applications_logon_history")
            {
                // Baue den Tabellenkopf basierend auf den Eigenschaften der Datenklasse
                htmlBuilder.Append("<table border='1'><tr>");
                foreach (var property in applications_logon_history_mysql_data.First().GetType().GetProperties())
                {
                    htmlBuilder.Append($"<th>{property.Name}</th>");
                }
                htmlBuilder.Append("</tr>");

                // Baue die Tabelleneinträge basierend auf den Daten
                foreach (var entry in applications_logon_history_mysql_data)
                {
                    htmlBuilder.Append("<tr>");
                    foreach (var property in entry.GetType().GetProperties())
                    {
                        htmlBuilder.Append($"<td>{property.GetValue(entry)}</td>");
                    }
                    htmlBuilder.Append("</tr>");
                }
            }
            else if (type == "applications_scheduled_tasks_history")
            {
                // Baue den Tabellenkopf basierend auf den Eigenschaften der Datenklasse
                htmlBuilder.Append("<table border='1'><tr>");
                foreach (var property in applications_scheduled_tasks_history_mysql_data.First().GetType().GetProperties())
                {
                    htmlBuilder.Append($"<th>{property.Name}</th>");
                }
                htmlBuilder.Append("</tr>");

                // Baue die Tabelleneinträge basierend auf den Daten
                foreach (var entry in applications_scheduled_tasks_history_mysql_data)
                {
                    htmlBuilder.Append("<tr>");
                    foreach (var property in entry.GetType().GetProperties())
                    {
                        htmlBuilder.Append($"<td>{property.GetValue(entry)}</td>");
                    }
                    htmlBuilder.Append("</tr>");
                }
            }
            else if (type == "applications_services_history")
            {
                // Baue den Tabellenkopf basierend auf den Eigenschaften der Datenklasse
                htmlBuilder.Append("<table border='1'><tr>");
                foreach (var property in applications_services_history_mysql_data.First().GetType().GetProperties())
                {
                    htmlBuilder.Append($"<th>{property.Name}</th>");
                }
                htmlBuilder.Append("</tr>");

                // Baue die Tabelleneinträge basierend auf den Daten
                foreach (var entry in applications_services_history_mysql_data)
                {
                    htmlBuilder.Append("<tr>");
                    foreach (var property in entry.GetType().GetProperties())
                    {
                        htmlBuilder.Append($"<td>{property.GetValue(entry)}</td>");
                    }
                    htmlBuilder.Append("</tr>");
                }
            }
            else if (type == "applications_drivers_history")
            {
                // Baue den Tabellenkopf basierend auf den Eigenschaften der Datenklasse
                htmlBuilder.Append("<table border='1'><tr>");
                foreach (var property in applications_drivers_history_mysql_data.First().GetType().GetProperties())
                {
                    htmlBuilder.Append($"<th>{property.Name}</th>");
                }
                htmlBuilder.Append("</tr>");

                // Baue die Tabelleneinträge basierend auf den Daten
                foreach (var entry in applications_drivers_history_mysql_data)
                {
                    htmlBuilder.Append("<tr>");
                    foreach (var property in entry.GetType().GetProperties())
                    {
                        htmlBuilder.Append($"<td>{property.GetValue(entry)}</td>");
                    }
                    htmlBuilder.Append("</tr>");
                }
            }
            else if (type == "cpu_history")
            {
                // Baue den Tabellenkopf basierend auf den Eigenschaften der Datenklasse
                htmlBuilder.Append("<table border='1'><tr>");
                foreach (var property in device_information_cpu_history_mysql_data.First().GetType().GetProperties())
                {
                    htmlBuilder.Append($"<th>{property.Name}</th>");
                }
                htmlBuilder.Append("</tr>");

                // Baue die Tabelleneinträge basierend auf den Daten
                foreach (var entry in device_information_cpu_history_mysql_data)
                {
                    htmlBuilder.Append("<tr>");
                    foreach (var property in entry.GetType().GetProperties())
                    {
                        htmlBuilder.Append($"<td>{property.GetValue(entry)}</td>");
                    }
                    htmlBuilder.Append("</tr>");
                }
            }
            else if (type == "ram_history")
            {
                // Baue den Tabellenkopf basierend auf den Eigenschaften der Datenklasse
                htmlBuilder.Append("<table border='1'><tr>");
                foreach (var property in ram_history_mysql_data.First().GetType().GetProperties())
                {
                    htmlBuilder.Append($"<th>{property.Name}</th>");
                }
                htmlBuilder.Append("</tr>");

                // Baue die Tabelleneinträge basierend auf den Daten
                foreach (var entry in ram_history_mysql_data)
                {
                    htmlBuilder.Append("<tr>");
                    foreach (var property in entry.GetType().GetProperties())
                    {
                        htmlBuilder.Append($"<td>{property.GetValue(entry)}</td>");
                    }
                    htmlBuilder.Append("</tr>");
                }
            }
            else if (type == "network_adapters_history")
            {
                // Baue den Tabellenkopf basierend auf den Eigenschaften der Datenklasse
                htmlBuilder.Append("<table border='1'><tr>");
                foreach (var property in device_information_network_adapters_history_mysql_data.First().GetType().GetProperties())
                {
                    htmlBuilder.Append($"<th>{property.Name}</th>");
                }
                htmlBuilder.Append("</tr>");

                // Baue die Tabelleneinträge basierend auf den Daten
                foreach (var entry in device_information_network_adapters_history_mysql_data)
                {
                    htmlBuilder.Append("<tr>");
                    foreach (var property in entry.GetType().GetProperties())
                    {
                        htmlBuilder.Append($"<td>{property.GetValue(entry)}</td>");
                    }
                    htmlBuilder.Append("</tr>");
                }
            }
            else if (type == "disks_history")
            {
                // Baue den Tabellenkopf basierend auf den Eigenschaften der Datenklasse
                htmlBuilder.Append("<table border='1'><tr>");
                foreach (var property in device_information_disks_history_mysql_data.First().GetType().GetProperties())
                {
                    htmlBuilder.Append($"<th>{property.Name}</th>");
                }
                htmlBuilder.Append("</tr>");

                // Baue die Tabelleneinträge basierend auf den Daten
                foreach (var entry in device_information_disks_history_mysql_data)
                {
                    htmlBuilder.Append("<tr>");
                    foreach (var property in entry.GetType().GetProperties())
                    {
                        htmlBuilder.Append($"<td>{property.GetValue(entry)}</td>");
                    }
                    htmlBuilder.Append("</tr>");
                }
            }
            else if (type == "task_manager_history")
            {
                // Baue den Tabellenkopf basierend auf den Eigenschaften der Datenklasse
                htmlBuilder.Append("<table border='1'><tr>");
                foreach (var property in task_manager_history_mysql_data.First().GetType().GetProperties())
                {
                    htmlBuilder.Append($"<th>{property.Name}</th>");
                }
                htmlBuilder.Append("</tr>");

                // Baue die Tabelleneinträge basierend auf den Daten
                foreach (var entry in task_manager_history_mysql_data)
                {
                    htmlBuilder.Append("<tr>");
                    foreach (var property in entry.GetType().GetProperties())
                    {
                        htmlBuilder.Append($"<td>{property.GetValue(entry)}</td>");
                    }
                    htmlBuilder.Append("</tr>");
                }
            }
            else if (type == "events")
            {
                // Baue den Tabellenkopf basierend auf den Eigenschaften der Datenklasse
                htmlBuilder.Append("<table border='1'><tr>");
                foreach (var property in events_mysql_data.First().GetType().GetProperties())
                {
                    htmlBuilder.Append($"<th>{property.Name}</th>");
                }
                htmlBuilder.Append("</tr>");

                // Baue die Tabelleneinträge basierend auf den Daten
                foreach (var entry in events_mysql_data)
                {
                    htmlBuilder.Append("<tr>");
                    foreach (var property in entry.GetType().GetProperties())
                    {
                        htmlBuilder.Append($"<td>{property.GetValue(entry)}</td>");
                    }
                    htmlBuilder.Append("</tr>");
                }
            }
            else if (type == "antivirus_products_history")
            {
                // Baue den Tabellenkopf basierend auf den Eigenschaften der Datenklasse
                htmlBuilder.Append("<table border='1'><tr>");
                foreach (var property in antivirus_products_history_mysql_data.First().GetType().GetProperties())
                {
                    htmlBuilder.Append($"<th>{property.Name}</th>");
                }
                htmlBuilder.Append("</tr>");

                // Baue die Tabelleneinträge basierend auf den Daten
                foreach (var entry in antivirus_products_history_mysql_data)
                {
                    htmlBuilder.Append("<tr>");
                    foreach (var property in entry.GetType().GetProperties())
                    {
                        htmlBuilder.Append($"<td>{property.GetValue(entry)}</td>");
                    }
                    htmlBuilder.Append("</tr>");
                }
            }


            htmlBuilder.Append("</table>");

            string htmlContent = htmlBuilder.ToString();

            // Hier wird JavaScript-Interop verwendet, um den HTML-Inhalt herunterzuladen
            await JSRuntime.InvokeVoidAsync("exportToTxt", $"{type}.html", htmlContent, "text/html");
        }
        catch (Exception ex)
        {
            Logging.Handler.Error("System_Logs", "Export_Data_HTML", ex.Message);
        }
    }

    private async Task Export_Data_Spreadsheet(string type)
    {
        try
        {
            using (var package = new ExcelPackage())
            {
                var worksheet = package.Workbook.Worksheets.Add("Sheet1");

                if (type == "devices")
                {
                    if (mysql_data.Count > 0)
                    {
                        int headerRow = 1;

                        // Baue den Tabellenkopf basierend auf den Eigenschaften der Datenklasse
                        int columnIndex = 1;
                        foreach (var property in mysql_data.First().GetType().GetProperties())
                        {
                            worksheet.Cells[headerRow, columnIndex].Value = property.Name;
                            columnIndex++;
                        }

                        int dataRow = headerRow + 1;

                        // Baue die Tabelleneinträge basierend auf den Daten
                        foreach (var entry in mysql_data)
                        {
                            columnIndex = 1;
                            foreach (var property in entry.GetType().GetProperties())
                            {
                                worksheet.Cells[dataRow, columnIndex].Value = property.GetValue(entry);
                                columnIndex++;
                            }

                            dataRow++;
                        }
                    }
                }
                else if (type == "applications_installed")
                {
                    if (software_installed_mysql_data.Count > 0)
                    {
                        int headerRow = 1;

                        // Baue den Tabellenkopf basierend auf den Eigenschaften der Datenklasse
                        int columnIndex = 1;
                        foreach (var property in software_installed_mysql_data.First().GetType().GetProperties())
                        {
                            worksheet.Cells[headerRow, columnIndex].Value = property.Name;
                            columnIndex++;
                        }

                        int dataRow = headerRow + 1;

                        // Baue die Tabelleneinträge basierend auf den Daten
                        foreach (var entry in software_installed_mysql_data)
                        {
                            columnIndex = 1;
                            foreach (var property in entry.GetType().GetProperties())
                            {
                                worksheet.Cells[dataRow, columnIndex].Value = property.GetValue(entry);
                                columnIndex++;
                            }

                            dataRow++;
                        }
                    }
                }
                else if (type == "applications_logon")
                {
                    if (application_logon_mysql_data.Count > 0)
                    {
                        int headerRow = 1;

                        // Baue den Tabellenkopf basierend auf den Eigenschaften der Datenklasse
                        int columnIndex = 1;
                        foreach (var property in application_logon_mysql_data.First().GetType().GetProperties())
                        {
                            worksheet.Cells[headerRow, columnIndex].Value = property.Name;
                            columnIndex++;
                        }

                        int dataRow = headerRow + 1;

                        // Baue die Tabelleneinträge basierend auf den Daten
                        foreach (var entry in application_logon_mysql_data)
                        {
                            columnIndex = 1;
                            foreach (var property in entry.GetType().GetProperties())
                            {
                                worksheet.Cells[dataRow, columnIndex].Value = property.GetValue(entry);
                                columnIndex++;
                            }

                            dataRow++;
                        }
                    }
                }
                else if (type == "applications_scheduled_tasks")
                {
                    if (applications_scheduled_tasks_mysql_data.Count > 0)
                    {
                        int headerRow = 1;

                        // Baue den Tabellenkopf basierend auf den Eigenschaften der Datenklasse
                        int columnIndex = 1;
                        foreach (var property in applications_scheduled_tasks_mysql_data.First().GetType().GetProperties())
                        {
                            worksheet.Cells[headerRow, columnIndex].Value = property.Name;
                            columnIndex++;
                        }

                        int dataRow = headerRow + 1;

                        // Baue die Tabelleneinträge basierend auf den Daten
                        foreach (var entry in applications_scheduled_tasks_mysql_data)
                        {
                            columnIndex = 1;
                            foreach (var property in entry.GetType().GetProperties())
                            {
                                worksheet.Cells[dataRow, columnIndex].Value = property.GetValue(entry);
                                columnIndex++;
                            }

                            dataRow++;
                        }
                    }
                }
                else if (type == "applications_services")
                {
                    if (applications_services_mysql_data.Count > 0)
                    {
                        int headerRow = 1;

                        // Baue den Tabellenkopf basierend auf den Eigenschaften der Datenklasse
                        int columnIndex = 1;
                        foreach (var property in applications_services_mysql_data.First().GetType().GetProperties())
                        {
                            worksheet.Cells[headerRow, columnIndex].Value = property.Name;
                            columnIndex++;
                        }

                        int dataRow = headerRow + 1;

                        // Baue die Tabelleneinträge basierend auf den Daten
                        foreach (var entry in applications_services_mysql_data)
                        {
                            columnIndex = 1;
                            foreach (var property in entry.GetType().GetProperties())
                            {
                                worksheet.Cells[dataRow, columnIndex].Value = property.GetValue(entry);
                                columnIndex++;
                            }

                            dataRow++;
                        }
                    }
                }
                else if (type == "task_manager")
                {
                    if (task_manager_mysql_data.Count > 0)
                    {
                        int headerRow = 1;

                        // Baue den Tabellenkopf basierend auf den Eigenschaften der Datenklasse
                        int columnIndex = 1;
                        foreach (var property in task_manager_mysql_data.First().GetType().GetProperties())
                        {
                            worksheet.Cells[headerRow, columnIndex].Value = property.Name;
                            columnIndex++;
                        }

                        int dataRow = headerRow + 1;

                        // Baue die Tabelleneinträge basierend auf den Daten
                        foreach (var entry in task_manager_mysql_data)
                        {
                            columnIndex = 1;
                            foreach (var property in entry.GetType().GetProperties())
                            {
                                worksheet.Cells[dataRow, columnIndex].Value = property.GetValue(entry);
                                columnIndex++;
                            }

                            dataRow++;
                        }
                    }
                }
                else if (type == "support_history")
                {
                    if (support_history_mysql_data.Count > 0)
                    {
                        int headerRow = 1;

                        // Baue den Tabellenkopf basierend auf den Eigenschaften der Datenklasse
                        int columnIndex = 1;
                        foreach (var property in support_history_mysql_data.First().GetType().GetProperties())
                        {
                            worksheet.Cells[headerRow, columnIndex].Value = property.Name;
                            columnIndex++;
                        }

                        int dataRow = headerRow + 1;

                        // Baue die Tabelleneinträge basierend auf den Daten
                        foreach (var entry in support_history_mysql_data)
                        {
                            columnIndex = 1;
                            foreach (var property in entry.GetType().GetProperties())
                            {
                                worksheet.Cells[dataRow, columnIndex].Value = property.GetValue(entry);
                                columnIndex++;
                            }

                            dataRow++;
                        }
                    }
                }
                else if (type == "devices_history")
                {
                    if (device_information_general_history_mysql_data.Count > 0)
                    {
                        int headerRow = 1;

                        // Baue den Tabellenkopf basierend auf den Eigenschaften der Datenklasse
                        int columnIndex = 1;
                        foreach (var property in device_information_general_history_mysql_data.First().GetType().GetProperties())
                        {
                            worksheet.Cells[headerRow, columnIndex].Value = property.Name;
                            columnIndex++;
                        }

                        int dataRow = headerRow + 1;

                        // Baue die Tabelleneinträge basierend auf den Daten
                        foreach (var entry in device_information_general_history_mysql_data)
                        {
                            columnIndex = 1;
                            foreach (var property in entry.GetType().GetProperties())
                            {
                                worksheet.Cells[dataRow, columnIndex].Value = property.GetValue(entry);
                                columnIndex++;
                            }

                            dataRow++;
                        }
                    }
                }
                else if (type == "note_history")
                {
                    if (device_information_notes_history_mysql_data.Count > 0)
                    {
                        int headerRow = 1;

                        // Baue den Tabellenkopf basierend auf den Eigenschaften der Datenklasse
                        int columnIndex = 1;
                        foreach (var property in device_information_notes_history_mysql_data.First().GetType().GetProperties())
                        {
                            worksheet.Cells[headerRow, columnIndex].Value = property.Name;
                            columnIndex++;
                        }

                        int dataRow = headerRow + 1;

                        // Baue die Tabelleneinträge basierend auf den Daten
                        foreach (var entry in device_information_notes_history_mysql_data)
                        {
                            columnIndex = 1;
                            foreach (var property in entry.GetType().GetProperties())
                            {
                                worksheet.Cells[dataRow, columnIndex].Value = property.GetValue(entry);
                                columnIndex++;
                            }

                            dataRow++;
                        }
                    }
                }
                else if (type == "disk_history")
                {
                    if (device_information_disks_history_mysql_data.Count > 0)
                    {
                        int headerRow = 1;

                        // Baue den Tabellenkopf basierend auf den Eigenschaften der Datenklasse
                        int columnIndex = 1;
                        foreach (var property in device_information_disks_history_mysql_data.First().GetType().GetProperties())
                        {
                            worksheet.Cells[headerRow, columnIndex].Value = property.Name;
                            columnIndex++;
                        }

                        int dataRow = headerRow + 1;

                        // Baue die Tabelleneinträge basierend auf den Daten
                        foreach (var entry in device_information_disks_history_mysql_data)
                        {
                            columnIndex = 1;
                            foreach (var property in entry.GetType().GetProperties())
                            {
                                worksheet.Cells[dataRow, columnIndex].Value = property.GetValue(entry);
                                columnIndex++;
                            }

                            dataRow++;
                        }
                    }
                }
                else if (type == "applications_installed_history")
                {
                    if (applications_installed_history_mysql_data.Count > 0)
                    {
                        int headerRow = 1;

                        // Baue den Tabellenkopf basierend auf den Eigenschaften der Datenklasse
                        int columnIndex = 1;
                        foreach (var property in applications_installed_history_mysql_data.First().GetType().GetProperties())
                        {
                            worksheet.Cells[headerRow, columnIndex].Value = property.Name;
                            columnIndex++;
                        }

                        int dataRow = headerRow + 1;

                        // Baue die Tabelleneinträge basierend auf den Daten
                        foreach (var entry in applications_installed_history_mysql_data)
                        {
                            columnIndex = 1;
                            foreach (var property in entry.GetType().GetProperties())
                            {
                                worksheet.Cells[dataRow, columnIndex].Value = property.GetValue(entry);
                                columnIndex++;
                            }

                            dataRow++;
                        }
                    }
                }
                else if (type == "applications_logon_history")
                {
                    if (applications_logon_history_mysql_data.Count > 0)
                    {
                        int headerRow = 1;

                        // Baue den Tabellenkopf basierend auf den Eigenschaften der Datenklasse
                        int columnIndex = 1;
                        foreach (var property in applications_logon_history_mysql_data.First().GetType().GetProperties())
                        {
                            worksheet.Cells[headerRow, columnIndex].Value = property.Name;
                            columnIndex++;
                        }

                        int dataRow = headerRow + 1;

                        // Baue die Tabelleneinträge basierend auf den Daten
                        foreach (var entry in applications_logon_history_mysql_data)
                        {
                            columnIndex = 1;
                            foreach (var property in entry.GetType().GetProperties())
                            {
                                worksheet.Cells[dataRow, columnIndex].Value = property.GetValue(entry);
                                columnIndex++;
                            }

                            dataRow++;
                        }
                    }
                }
                else if (type == "applications_scheduled_tasks_history")
                {
                    if (applications_scheduled_tasks_history_mysql_data.Count > 0)
                    {
                        int headerRow = 1;

                        // Baue den Tabellenkopf basierend auf den Eigenschaften der Datenklasse
                        int columnIndex = 1;
                        foreach (var property in applications_scheduled_tasks_history_mysql_data.First().GetType().GetProperties())
                        {
                            worksheet.Cells[headerRow, columnIndex].Value = property.Name;
                            columnIndex++;
                        }

                        int dataRow = headerRow + 1;

                        // Baue die Tabelleneinträge basierend auf den Daten
                        foreach (var entry in applications_scheduled_tasks_history_mysql_data)
                        {
                            columnIndex = 1;
                            foreach (var property in entry.GetType().GetProperties())
                            {
                                worksheet.Cells[dataRow, columnIndex].Value = property.GetValue(entry);
                                columnIndex++;
                            }

                            dataRow++;
                        }
                    }
                }
                else if (type == "applications_services_history")
                {
                    if (applications_services_history_mysql_data.Count > 0)
                    {
                        int headerRow = 1;

                        // Baue den Tabellenkopf basierend auf den Eigenschaften der Datenklasse
                        int columnIndex = 1;
                        foreach (var property in applications_services_history_mysql_data.First().GetType().GetProperties())
                        {
                            worksheet.Cells[headerRow, columnIndex].Value = property.Name;
                            columnIndex++;
                        }

                        int dataRow = headerRow + 1;

                        // Baue die Tabelleneinträge basierend auf den Daten
                        foreach (var entry in applications_services_history_mysql_data)
                        {
                            columnIndex = 1;
                            foreach (var property in entry.GetType().GetProperties())
                            {
                                worksheet.Cells[dataRow, columnIndex].Value = property.GetValue(entry);
                                columnIndex++;
                            }

                            dataRow++;
                        }
                    }
                }
                else if (type == "applications_drivers_history")
                {
                    if (applications_drivers_history_mysql_data.Count > 0)
                    {
                        int headerRow = 1;

                        // Baue den Tabellenkopf basierend auf den Eigenschaften der Datenklasse
                        int columnIndex = 1;
                        foreach (var property in applications_drivers_history_mysql_data.First().GetType().GetProperties())
                        {
                            worksheet.Cells[headerRow, columnIndex].Value = property.Name;
                            columnIndex++;
                        }

                        int dataRow = headerRow + 1;

                        // Baue die Tabelleneinträge basierend auf den Daten
                        foreach (var entry in applications_drivers_history_mysql_data)
                        {
                            columnIndex = 1;
                            foreach (var property in entry.GetType().GetProperties())
                            {
                                worksheet.Cells[dataRow, columnIndex].Value = property.GetValue(entry);
                                columnIndex++;
                            }

                            dataRow++;
                        }
                    }
                }
                else if (type == "cpu_history")
                {
                    if (device_information_cpu_history_mysql_data.Count > 0)
                    {
                        int headerRow = 1;

                        // Baue den Tabellenkopf basierend auf den Eigenschaften der Datenklasse
                        int columnIndex = 1;
                        foreach (var property in device_information_cpu_history_mysql_data.First().GetType().GetProperties())
                        {
                            worksheet.Cells[headerRow, columnIndex].Value = property.Name;
                            columnIndex++;
                        }

                        int dataRow = headerRow + 1;

                        // Baue die Tabelleneinträge basierend auf den Daten
                        foreach (var entry in device_information_cpu_history_mysql_data)
                        {
                            columnIndex = 1;
                            foreach (var property in entry.GetType().GetProperties())
                            {
                                worksheet.Cells[dataRow, columnIndex].Value = property.GetValue(entry);
                                columnIndex++;
                            }

                            dataRow++;
                        }
                    }
                }
                else if (type == "ram_history")
                {
                    if (ram_history_mysql_data.Count > 0)
                    {
                        int headerRow = 1;

                        // Baue den Tabellenkopf basierend auf den Eigenschaften der Datenklasse
                        int columnIndex = 1;
                        foreach (var property in ram_history_mysql_data.First().GetType().GetProperties())
                        {
                            worksheet.Cells[headerRow, columnIndex].Value = property.Name;
                            columnIndex++;
                        }

                        int dataRow = headerRow + 1;

                        // Baue die Tabelleneinträge basierend auf den Daten
                        foreach (var entry in ram_history_mysql_data)
                        {
                            columnIndex = 1;
                            foreach (var property in entry.GetType().GetProperties())
                            {
                                worksheet.Cells[dataRow, columnIndex].Value = property.GetValue(entry);
                                columnIndex++;
                            }

                            dataRow++;
                        }
                    }
                }
                else if (type == "network_adapters_history")
                {
                    if (device_information_network_adapters_history_mysql_data.Count > 0)
                    {
                        int headerRow = 1;

                        // Baue den Tabellenkopf basierend auf den Eigenschaften der Datenklasse
                        int columnIndex = 1;
                        foreach (var property in device_information_network_adapters_history_mysql_data.First().GetType().GetProperties())
                        {
                            worksheet.Cells[headerRow, columnIndex].Value = property.Name;
                            columnIndex++;
                        }

                        int dataRow = headerRow + 1;

                        // Baue die Tabelleneinträge basierend auf den Daten
                        foreach (var entry in device_information_network_adapters_history_mysql_data)
                        {
                            columnIndex = 1;
                            foreach (var property in entry.GetType().GetProperties())
                            {
                                worksheet.Cells[dataRow, columnIndex].Value = property.GetValue(entry);
                                columnIndex++;
                            }

                            dataRow++;
                        }
                    }
                }
                else if (type == "disks_history")
                {
                    if (device_information_disks_history_mysql_data.Count > 0)
                    {
                        int headerRow = 1;

                        // Baue den Tabellenkopf basierend auf den Eigenschaften der Datenklasse
                        int columnIndex = 1;
                        foreach (var property in device_information_disks_history_mysql_data.First().GetType().GetProperties())
                        {
                            worksheet.Cells[headerRow, columnIndex].Value = property.Name;
                            columnIndex++;
                        }

                        int dataRow = headerRow + 1;

                        // Baue die Tabelleneinträge basierend auf den Daten
                        foreach (var entry in device_information_disks_history_mysql_data)
                        {
                            columnIndex = 1;
                            foreach (var property in entry.GetType().GetProperties())
                            {
                                worksheet.Cells[dataRow, columnIndex].Value = property.GetValue(entry);
                                columnIndex++;
                            }

                            dataRow++;
                        }
                    }
                }
                else if (type == "task_manager_history")
                {
                    if (task_manager_history_mysql_data.Count > 0)
                    {
                        int headerRow = 1;

                        // Baue den Tabellenkopf basierend auf den Eigenschaften der Datenklasse
                        int columnIndex = 1;
                        foreach (var property in task_manager_history_mysql_data.First().GetType().GetProperties())
                        {
                            worksheet.Cells[headerRow, columnIndex].Value = property.Name;
                            columnIndex++;
                        }

                        int dataRow = headerRow + 1;

                        // Baue die Tabelleneinträge basierend auf den Daten
                        foreach (var entry in task_manager_history_mysql_data)
                        {
                            columnIndex = 1;
                            foreach (var property in entry.GetType().GetProperties())
                            {
                                worksheet.Cells[dataRow, columnIndex].Value = property.GetValue(entry);
                                columnIndex++;
                            }

                            dataRow++;
                        }
                    }
                }
                else if (type == "events")
                {
                    if (events_mysql_data.Count > 0)
                    {
                        int headerRow = 1;

                        // Baue den Tabellenkopf basierend auf den Eigenschaften der Datenklasse
                        int columnIndex = 1;
                        foreach (var property in events_mysql_data.First().GetType().GetProperties())
                        {
                            worksheet.Cells[headerRow, columnIndex].Value = property.Name;
                            columnIndex++;
                        }

                        int dataRow = headerRow + 1;

                        // Baue die Tabelleneinträge basierend auf den Daten
                        foreach (var entry in events_mysql_data)
                        {
                            columnIndex = 1;
                            foreach (var property in entry.GetType().GetProperties())
                            {
                                worksheet.Cells[dataRow, columnIndex].Value = property.GetValue(entry);
                                columnIndex++;
                            }

                            dataRow++;
                        }
                    }
                }
                else if (type == "antivirus_products_history")
                {
                    if (antivirus_products_history_mysql_data.Count > 0)
                    {
                        int headerRow = 1;

                        // Baue den Tabellenkopf basierend auf den Eigenschaften der Datenklasse
                        int columnIndex = 1;
                        foreach (var property in antivirus_products_history_mysql_data.First().GetType().GetProperties())
                        {
                            worksheet.Cells[headerRow, columnIndex].Value = property.Name;
                            columnIndex++;
                        }

                        int dataRow = headerRow + 1;

                        // Baue die Tabelleneinträge basierend auf den Daten
                        foreach (var entry in antivirus_products_history_mysql_data)
                        {
                            columnIndex = 1;
                            foreach (var property in entry.GetType().GetProperties())
                            {
                                worksheet.Cells[dataRow, columnIndex].Value = property.GetValue(entry);
                                columnIndex++;
                            }

                            dataRow++;
                        }
                    }
                }

                var stream = new MemoryStream(package.GetAsByteArray());

                // Hier wird JavaScript-Interop verwendet, um die Datei herunterzuladen
                await JSRuntime.InvokeVoidAsync("saveAsSpreadSheet", $"{type}.xlsx", Convert.ToBase64String(stream.ToArray()));
            }
        }
        catch (Exception ex)
        {
            Logging.Handler.Error("System_Logs", "Export_Data_Spreadsheet", ex.Message);
        }
    }
    #endregion
}
