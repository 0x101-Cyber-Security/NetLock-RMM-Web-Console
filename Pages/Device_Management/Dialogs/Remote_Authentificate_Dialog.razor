@using MySqlConnector;
@using System.Data.Common;
@using System.Text.Json;
@using Microsoft.AspNetCore.Components.Server.ProtectedBrowserStorage
@using Microsoft.AspNetCore.DataProtection

@inject NavigationManager NavigationManager
@inject ILocalStorageService localStorage
@inject IDialogService DialogService
@inject ISnackbar Snackbar
@inject IJSRuntime JSRuntime
@inject IDataProtectionProvider DataProtectionProvider

<MudDialog Style="width: 600px;">
    <TitleContent>
        <MudText Typo="Typo.h5">Authentifizierung</MudText>
    </TitleContent>
    <DialogContent>

        <MudText Typo="Typo.body1">Bitte bestätigen Sie Ihre Anmeldedaten, um eine Remote Verbindung zu dem Gerät aufbauen zu können.</MudText>
        <MudTextField Label="Benutzername" T="string" Lines="1" @bind-Value="@username" Required="false" RequiredError="Erforderlich" Immediate="@true" ReadOnly="false" />
        <MudTextField Label="Kennwort" T="string" Lines="1" @bind-Value="@password" Required="false" RequiredError="Erforderlich" Immediate="@true" InputType="@InputType.Password" ReadOnly="false" />
       
    </DialogContent>
    <DialogActions>
        
        <MudButton OnClick="@OK" Variant="Variant.Filled" Size="@Size.Small" Color="@Color.Success">Bestätigen</MudButton>
        <MudButton OnClick="@Cancel" Variant="Variant.Text" Size="@Size.Small" Color="@Color.Default">Abbrechen</MudButton>
    </DialogActions>
</MudDialog>

@code {

    private string username = String.Empty;
    private string password = String.Empty;
    private string session_guid_local = String.Empty;

    [CascadingParameter] MudDialogInstance MudDialog { get; set; }

    protected override async Task OnInitializedAsync()
    {
        try
        {
            // Get session_guid local
            var sessionStorage = new ProtectedSessionStorage(JSRuntime, DataProtectionProvider);
            var session_guid_result = await sessionStorage.GetAsync<string>("session_guid");
            session_guid_local = session_guid_result.Value;

            // Get username from session
            var session_username = await sessionStorage.GetAsync<string>("username");
            username = session_username.Value;

            Logging.Handler.Debug("/devices (Remote_Authentificate_Dialog) -> OK", "session_guid_local", session_guid_local);
        }
        catch (Exception ex)
        {
            Logging.Handler.Error("/devices (Remote_Authentificate_Dialog) -> OnInitializedAsync", "Result", ex.Message);
        }
    }

    private async Task OK()
    {
        this.Snackbar.Configuration.ShowCloseIcon = true;
        this.Snackbar.Configuration.PositionClass = Defaults.Classes.Position.BottomRight;

        bool success = false;
        string session_guid_database = String.Empty;

        MySqlConnection conn = new MySqlConnection(Application_Settings.connectionString);

        try
        {
            success = await Classes.Authentication.User.Verify_User(username, password);

            if (success) // Check custom session guid
            {
                // Get session_guid from database
                session_guid_database = await Classes.MySQL.Handler.Quick_Reader("SELECT session_guid FROM accounts WHERE username = '" + username + "';", "session_guid");
                Logging.Handler.Debug("/devices (Remote_Authentificate_Dialog) -> OK", "session_guid_database", session_guid_database);

                // Check if database session_guid is equal to the local session_guid
                if (session_guid_local == session_guid_database)
                    success = true;
                else
                    success = false;

                Logging.Handler.Debug("/devices (Remote_Authentificate_Dialog) -> OK", "sessions_guid_equal", success.ToString());
            }
        }
        catch (Exception ex)
        {
            Logging.Handler.Error("/manage_scripts (Add_Script_Dialog) -> OK", "Result", ex.Message);
        }
        finally
        {
            await conn.CloseAsync();
        }

        if (success)
        {
            this.MudDialog.Close(DialogResult.Ok("authentificated"));
        }
        else
        {
            this.Snackbar.Add("Es ist ein Fehler aufgetreten.", Severity.Error);
            this.MudDialog.Close(DialogResult.Ok("error"));
        }
    }

    private void Cancel() => MudDialog.Cancel();
}